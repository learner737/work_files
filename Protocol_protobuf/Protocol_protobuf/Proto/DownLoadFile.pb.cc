// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DownLoadFile.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DownLoadFile {

namespace {

const ::google::protobuf::Descriptor* DownLoadSingleFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownLoadSingleFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownLoadHandlersFileListAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownLoadHandlersFileListAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandlerAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandlerAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequstWriteFileBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequstWriteFileBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequstWriteFileBlockAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequstWriteFileBlockAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteFileBlockAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteFileBlockAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopDownLoadHandlersFileListTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopDownLoadHandlersFileListTaskAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DownLoadFile_2eproto() {
  protobuf_AddDesc_DownLoadFile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DownLoadFile.proto");
  GOOGLE_CHECK(file != NULL);
  DownLoadSingleFileAck_descriptor_ = file->message_type(0);
  static const int DownLoadSingleFileAck_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileAck, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileAck, error_number_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileAck, error_number_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileAck, file_path_),
  };
  DownLoadSingleFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownLoadSingleFileAck_descriptor_,
      DownLoadSingleFileAck::default_instance_,
      DownLoadSingleFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownLoadSingleFileAck));
  DownLoadHandlersFileListAck_descriptor_ = file->message_type(1);
  static const int DownLoadHandlersFileListAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListAck, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListAck, error_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListAck, file_path_),
  };
  DownLoadHandlersFileListAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownLoadHandlersFileListAck_descriptor_,
      DownLoadHandlersFileListAck::default_instance_,
      DownLoadHandlersFileListAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownLoadHandlersFileListAck));
  HandlerAck_descriptor_ = file->message_type(2);
  static const int HandlerAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerAck, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerAck, error_number_),
  };
  HandlerAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandlerAck_descriptor_,
      HandlerAck::default_instance_,
      HandlerAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandlerAck));
  OpenFile_descriptor_ = file->message_type(3);
  static const int OpenFile_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFile, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFile, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFile, file_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFile, filesize_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFile, lastupdatetime_),
  };
  OpenFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenFile_descriptor_,
      OpenFile::default_instance_,
      OpenFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenFile));
  OpenFileAck_descriptor_ = file->message_type(4);
  static const int OpenFileAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileAck, error_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileAck, task_uuid_),
  };
  OpenFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenFileAck_descriptor_,
      OpenFileAck::default_instance_,
      OpenFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenFileAck));
  RequstWriteFileBlock_descriptor_ = file->message_type(5);
  static const int RequstWriteFileBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlock, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlock, block_size_byte_),
  };
  RequstWriteFileBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequstWriteFileBlock_descriptor_,
      RequstWriteFileBlock::default_instance_,
      RequstWriteFileBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequstWriteFileBlock));
  RequstWriteFileBlockAck_descriptor_ = file->message_type(6);
  static const int RequstWriteFileBlockAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlockAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlockAck, error_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlockAck, task_uuid_),
  };
  RequstWriteFileBlockAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequstWriteFileBlockAck_descriptor_,
      RequstWriteFileBlockAck::default_instance_,
      RequstWriteFileBlockAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlockAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequstWriteFileBlockAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequstWriteFileBlockAck));
  WriteFileBlockAck_descriptor_ = file->message_type(7);
  static const int WriteFileBlockAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFileBlockAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFileBlockAck, error_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFileBlockAck, task_uuid_),
  };
  WriteFileBlockAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteFileBlockAck_descriptor_,
      WriteFileBlockAck::default_instance_,
      WriteFileBlockAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFileBlockAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteFileBlockAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteFileBlockAck));
  CloseFile_descriptor_ = file->message_type(8);
  static const int CloseFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFile, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFile, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFile, file_index_),
  };
  CloseFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseFile_descriptor_,
      CloseFile::default_instance_,
      CloseFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseFile));
  CloseFileAck_descriptor_ = file->message_type(9);
  static const int CloseFileAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileAck, error_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileAck, task_uuid_),
  };
  CloseFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseFileAck_descriptor_,
      CloseFileAck::default_instance_,
      CloseFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseFileAck));
  StopDownLoadHandlersFileListTaskAck_descriptor_ = file->message_type(10);
  static const int StopDownLoadHandlersFileListTaskAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDownLoadHandlersFileListTaskAck, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDownLoadHandlersFileListTaskAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDownLoadHandlersFileListTaskAck, error_number_),
  };
  StopDownLoadHandlersFileListTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopDownLoadHandlersFileListTaskAck_descriptor_,
      StopDownLoadHandlersFileListTaskAck::default_instance_,
      StopDownLoadHandlersFileListTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDownLoadHandlersFileListTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopDownLoadHandlersFileListTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopDownLoadHandlersFileListTaskAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DownLoadFile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownLoadSingleFileAck_descriptor_, &DownLoadSingleFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownLoadHandlersFileListAck_descriptor_, &DownLoadHandlersFileListAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandlerAck_descriptor_, &HandlerAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenFile_descriptor_, &OpenFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenFileAck_descriptor_, &OpenFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequstWriteFileBlock_descriptor_, &RequstWriteFileBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequstWriteFileBlockAck_descriptor_, &RequstWriteFileBlockAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteFileBlockAck_descriptor_, &WriteFileBlockAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseFile_descriptor_, &CloseFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseFileAck_descriptor_, &CloseFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopDownLoadHandlersFileListTaskAck_descriptor_, &StopDownLoadHandlersFileListTaskAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DownLoadFile_2eproto() {
  delete DownLoadSingleFileAck::default_instance_;
  delete DownLoadSingleFileAck_reflection_;
  delete DownLoadHandlersFileListAck::default_instance_;
  delete DownLoadHandlersFileListAck_reflection_;
  delete HandlerAck::default_instance_;
  delete HandlerAck_reflection_;
  delete OpenFile::default_instance_;
  delete OpenFile_reflection_;
  delete OpenFileAck::default_instance_;
  delete OpenFileAck_reflection_;
  delete RequstWriteFileBlock::default_instance_;
  delete RequstWriteFileBlock_reflection_;
  delete RequstWriteFileBlockAck::default_instance_;
  delete RequstWriteFileBlockAck_reflection_;
  delete WriteFileBlockAck::default_instance_;
  delete WriteFileBlockAck_reflection_;
  delete CloseFile::default_instance_;
  delete CloseFile_reflection_;
  delete CloseFileAck::default_instance_;
  delete CloseFileAck_reflection_;
  delete StopDownLoadHandlersFileListTaskAck::default_instance_;
  delete StopDownLoadHandlersFileListTaskAck_reflection_;
}

void protobuf_AddDesc_DownLoadFile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022DownLoadFile.proto\022\014DownLoadFile\"\202\001\n\025D"
    "ownLoadSingleFileAck\022\021\n\ttask_uuid\030\001 \002(\014\022"
    "\016\n\006result\030\002 \002(\010\022\030\n\020error_number_msg\030\003 \001("
    "\003\022\031\n\021error_number_node\030\004 \001(\003\022\021\n\tfile_pat"
    "h\030\005 \001(\014\"i\n\033DownLoadHandlersFileListAck\022\021"
    "\n\ttask_uuid\030\001 \002(\014\022\016\n\006result\030\002 \002(\010\022\024\n\014err"
    "or_number\030\003 \001(\003\022\021\n\tfile_path\030\004 \001(\014\"E\n\nHa"
    "ndlerAck\022\021\n\ttask_uuid\030\001 \002(\014\022\016\n\006result\030\002 "
    "\002(\010\022\024\n\014error_number\030\003 \001(\003\"s\n\010OpenFile\022\021\n"
    "\ttask_uuid\030\001 \002(\014\022\021\n\tfile_name\030\002 \002(\014\022\022\n\nf"
    "ile_index\030\003 \002(\003\022\025\n\rfilesize_byte\030\004 \002(\003\022\026"
    "\n\016lastupdatetime\030\005 \002(\014\"F\n\013OpenFileAck\022\016\n"
    "\006result\030\001 \002(\010\022\024\n\014error_number\030\002 \001(\003\022\021\n\tt"
    "ask_uuid\030\003 \002(\014\"B\n\024RequstWriteFileBlock\022\021"
    "\n\ttask_uuid\030\001 \002(\014\022\027\n\017block_size_byte\030\002 \002"
    "(\003\"R\n\027RequstWriteFileBlockAck\022\016\n\006result\030"
    "\001 \002(\010\022\024\n\014error_number\030\002 \001(\003\022\021\n\ttask_uuid"
    "\030\003 \002(\014\"L\n\021WriteFileBlockAck\022\016\n\006result\030\001 "
    "\002(\010\022\024\n\014error_number\030\002 \001(\003\022\021\n\ttask_uuid\030\003"
    " \002(\014\"E\n\tCloseFile\022\021\n\ttask_uuid\030\001 \002(\014\022\021\n\t"
    "file_name\030\002 \002(\014\022\022\n\nfile_index\030\003 \002(\003\"G\n\014C"
    "loseFileAck\022\016\n\006result\030\001 \002(\010\022\024\n\014error_num"
    "ber\030\002 \001(\003\022\021\n\ttask_uuid\030\003 \002(\014\"^\n#StopDown"
    "LoadHandlersFileListTaskAck\022\021\n\ttask_uuid"
    "\030\001 \002(\014\022\016\n\006result\030\002 \002(\010\022\024\n\014error_number\030\003"
    " \001(\003", 1004);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DownLoadFile.proto", &protobuf_RegisterTypes);
  DownLoadSingleFileAck::default_instance_ = new DownLoadSingleFileAck();
  DownLoadHandlersFileListAck::default_instance_ = new DownLoadHandlersFileListAck();
  HandlerAck::default_instance_ = new HandlerAck();
  OpenFile::default_instance_ = new OpenFile();
  OpenFileAck::default_instance_ = new OpenFileAck();
  RequstWriteFileBlock::default_instance_ = new RequstWriteFileBlock();
  RequstWriteFileBlockAck::default_instance_ = new RequstWriteFileBlockAck();
  WriteFileBlockAck::default_instance_ = new WriteFileBlockAck();
  CloseFile::default_instance_ = new CloseFile();
  CloseFileAck::default_instance_ = new CloseFileAck();
  StopDownLoadHandlersFileListTaskAck::default_instance_ = new StopDownLoadHandlersFileListTaskAck();
  DownLoadSingleFileAck::default_instance_->InitAsDefaultInstance();
  DownLoadHandlersFileListAck::default_instance_->InitAsDefaultInstance();
  HandlerAck::default_instance_->InitAsDefaultInstance();
  OpenFile::default_instance_->InitAsDefaultInstance();
  OpenFileAck::default_instance_->InitAsDefaultInstance();
  RequstWriteFileBlock::default_instance_->InitAsDefaultInstance();
  RequstWriteFileBlockAck::default_instance_->InitAsDefaultInstance();
  WriteFileBlockAck::default_instance_->InitAsDefaultInstance();
  CloseFile::default_instance_->InitAsDefaultInstance();
  CloseFileAck::default_instance_->InitAsDefaultInstance();
  StopDownLoadHandlersFileListTaskAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DownLoadFile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DownLoadFile_2eproto {
  StaticDescriptorInitializer_DownLoadFile_2eproto() {
    protobuf_AddDesc_DownLoadFile_2eproto();
  }
} static_descriptor_initializer_DownLoadFile_2eproto_;


// ===================================================================

const ::std::string DownLoadSingleFileAck::_default_task_uuid_;
const ::std::string DownLoadSingleFileAck::_default_file_path_;
#ifndef _MSC_VER
const int DownLoadSingleFileAck::kTaskUuidFieldNumber;
const int DownLoadSingleFileAck::kResultFieldNumber;
const int DownLoadSingleFileAck::kErrorNumberMsgFieldNumber;
const int DownLoadSingleFileAck::kErrorNumberNodeFieldNumber;
const int DownLoadSingleFileAck::kFilePathFieldNumber;
#endif  // !_MSC_VER

DownLoadSingleFileAck::DownLoadSingleFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownLoadSingleFileAck::InitAsDefaultInstance() {
}

DownLoadSingleFileAck::DownLoadSingleFileAck(const DownLoadSingleFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownLoadSingleFileAck::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  result_ = false;
  error_number_msg_ = GOOGLE_LONGLONG(0);
  error_number_node_ = GOOGLE_LONGLONG(0);
  file_path_ = const_cast< ::std::string*>(&_default_file_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownLoadSingleFileAck::~DownLoadSingleFileAck() {
  SharedDtor();
}

void DownLoadSingleFileAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (file_path_ != &_default_file_path_) {
    delete file_path_;
  }
  if (this != default_instance_) {
  }
}

void DownLoadSingleFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownLoadSingleFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownLoadSingleFileAck_descriptor_;
}

const DownLoadSingleFileAck& DownLoadSingleFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

DownLoadSingleFileAck* DownLoadSingleFileAck::default_instance_ = NULL;

DownLoadSingleFileAck* DownLoadSingleFileAck::New() const {
  return new DownLoadSingleFileAck;
}

void DownLoadSingleFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    result_ = false;
    error_number_msg_ = GOOGLE_LONGLONG(0);
    error_number_node_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (file_path_ != &_default_file_path_) {
        file_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownLoadSingleFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_number_msg;
        break;
      }
      
      // optional int64 error_number_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_msg_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_number_node;
        break;
      }
      
      // optional int64 error_number_node = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_node_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file_path;
        break;
      }
      
      // optional bytes file_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownLoadSingleFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional int64 error_number_msg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->error_number_msg(), output);
  }
  
  // optional int64 error_number_node = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->error_number_node(), output);
  }
  
  // optional bytes file_path = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->file_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownLoadSingleFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional int64 error_number_msg = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->error_number_msg(), target);
  }
  
  // optional int64 error_number_node = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->error_number_node(), target);
  }
  
  // optional bytes file_path = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->file_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownLoadSingleFileAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number_msg = 3;
    if (has_error_number_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number_msg());
    }
    
    // optional int64 error_number_node = 4;
    if (has_error_number_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number_node());
    }
    
    // optional bytes file_path = 5;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownLoadSingleFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownLoadSingleFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownLoadSingleFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownLoadSingleFileAck::MergeFrom(const DownLoadSingleFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_error_number_msg(from.error_number_msg());
    }
    if (from._has_bit(3)) {
      set_error_number_node(from.error_number_node());
    }
    if (from._has_bit(4)) {
      set_file_path(from.file_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownLoadSingleFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownLoadSingleFileAck::CopyFrom(const DownLoadSingleFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownLoadSingleFileAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DownLoadSingleFileAck::Swap(DownLoadSingleFileAck* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(result_, other->result_);
    std::swap(error_number_msg_, other->error_number_msg_);
    std::swap(error_number_node_, other->error_number_node_);
    std::swap(file_path_, other->file_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownLoadSingleFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownLoadSingleFileAck_descriptor_;
  metadata.reflection = DownLoadSingleFileAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DownLoadHandlersFileListAck::_default_task_uuid_;
const ::std::string DownLoadHandlersFileListAck::_default_file_path_;
#ifndef _MSC_VER
const int DownLoadHandlersFileListAck::kTaskUuidFieldNumber;
const int DownLoadHandlersFileListAck::kResultFieldNumber;
const int DownLoadHandlersFileListAck::kErrorNumberFieldNumber;
const int DownLoadHandlersFileListAck::kFilePathFieldNumber;
#endif  // !_MSC_VER

DownLoadHandlersFileListAck::DownLoadHandlersFileListAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownLoadHandlersFileListAck::InitAsDefaultInstance() {
}

DownLoadHandlersFileListAck::DownLoadHandlersFileListAck(const DownLoadHandlersFileListAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownLoadHandlersFileListAck::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  file_path_ = const_cast< ::std::string*>(&_default_file_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownLoadHandlersFileListAck::~DownLoadHandlersFileListAck() {
  SharedDtor();
}

void DownLoadHandlersFileListAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (file_path_ != &_default_file_path_) {
    delete file_path_;
  }
  if (this != default_instance_) {
  }
}

void DownLoadHandlersFileListAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownLoadHandlersFileListAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownLoadHandlersFileListAck_descriptor_;
}

const DownLoadHandlersFileListAck& DownLoadHandlersFileListAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

DownLoadHandlersFileListAck* DownLoadHandlersFileListAck::default_instance_ = NULL;

DownLoadHandlersFileListAck* DownLoadHandlersFileListAck::New() const {
  return new DownLoadHandlersFileListAck;
}

void DownLoadHandlersFileListAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (file_path_ != &_default_file_path_) {
        file_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownLoadHandlersFileListAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_file_path;
        break;
      }
      
      // optional bytes file_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownLoadHandlersFileListAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->error_number(), output);
  }
  
  // optional bytes file_path = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->file_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownLoadHandlersFileListAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->error_number(), target);
  }
  
  // optional bytes file_path = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->file_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownLoadHandlersFileListAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 3;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
    // optional bytes file_path = 4;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownLoadHandlersFileListAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownLoadHandlersFileListAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownLoadHandlersFileListAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownLoadHandlersFileListAck::MergeFrom(const DownLoadHandlersFileListAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_error_number(from.error_number());
    }
    if (from._has_bit(3)) {
      set_file_path(from.file_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownLoadHandlersFileListAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownLoadHandlersFileListAck::CopyFrom(const DownLoadHandlersFileListAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownLoadHandlersFileListAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DownLoadHandlersFileListAck::Swap(DownLoadHandlersFileListAck* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(file_path_, other->file_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownLoadHandlersFileListAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownLoadHandlersFileListAck_descriptor_;
  metadata.reflection = DownLoadHandlersFileListAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string HandlerAck::_default_task_uuid_;
#ifndef _MSC_VER
const int HandlerAck::kTaskUuidFieldNumber;
const int HandlerAck::kResultFieldNumber;
const int HandlerAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

HandlerAck::HandlerAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandlerAck::InitAsDefaultInstance() {
}

HandlerAck::HandlerAck(const HandlerAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandlerAck::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandlerAck::~HandlerAck() {
  SharedDtor();
}

void HandlerAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void HandlerAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandlerAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandlerAck_descriptor_;
}

const HandlerAck& HandlerAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

HandlerAck* HandlerAck::default_instance_ = NULL;

HandlerAck* HandlerAck::New() const {
  return new HandlerAck;
}

void HandlerAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandlerAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandlerAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandlerAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandlerAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 3;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandlerAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandlerAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandlerAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandlerAck::MergeFrom(const HandlerAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandlerAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandlerAck::CopyFrom(const HandlerAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandlerAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void HandlerAck::Swap(HandlerAck* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandlerAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandlerAck_descriptor_;
  metadata.reflection = HandlerAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string OpenFile::_default_task_uuid_;
const ::std::string OpenFile::_default_file_name_;
const ::std::string OpenFile::_default_lastupdatetime_;
#ifndef _MSC_VER
const int OpenFile::kTaskUuidFieldNumber;
const int OpenFile::kFileNameFieldNumber;
const int OpenFile::kFileIndexFieldNumber;
const int OpenFile::kFilesizeByteFieldNumber;
const int OpenFile::kLastupdatetimeFieldNumber;
#endif  // !_MSC_VER

OpenFile::OpenFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenFile::InitAsDefaultInstance() {
}

OpenFile::OpenFile(const OpenFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenFile::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  file_name_ = const_cast< ::std::string*>(&_default_file_name_);
  file_index_ = GOOGLE_LONGLONG(0);
  filesize_byte_ = GOOGLE_LONGLONG(0);
  lastupdatetime_ = const_cast< ::std::string*>(&_default_lastupdatetime_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenFile::~OpenFile() {
  SharedDtor();
}

void OpenFile::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (file_name_ != &_default_file_name_) {
    delete file_name_;
  }
  if (lastupdatetime_ != &_default_lastupdatetime_) {
    delete lastupdatetime_;
  }
  if (this != default_instance_) {
  }
}

void OpenFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenFile_descriptor_;
}

const OpenFile& OpenFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

OpenFile* OpenFile::default_instance_ = NULL;

OpenFile* OpenFile::New() const {
  return new OpenFile;
}

void OpenFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (file_name_ != &_default_file_name_) {
        file_name_->clear();
      }
    }
    file_index_ = GOOGLE_LONGLONG(0);
    filesize_byte_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (lastupdatetime_ != &_default_lastupdatetime_) {
        lastupdatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }
      
      // required bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_index;
        break;
      }
      
      // required int64 file_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_index_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filesize_byte;
        break;
      }
      
      // required int64 filesize_byte = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesize_byte_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lastupdatetime;
        break;
      }
      
      // required bytes lastupdatetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastupdatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lastupdatetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bytes file_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }
  
  // required int64 file_index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->file_index(), output);
  }
  
  // required int64 filesize_byte = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filesize_byte(), output);
  }
  
  // required bytes lastupdatetime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->lastupdatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bytes file_name = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }
  
  // required int64 file_index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->file_index(), target);
  }
  
  // required int64 filesize_byte = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filesize_byte(), target);
  }
  
  // required bytes lastupdatetime = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->lastupdatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }
    
    // required int64 file_index = 3;
    if (has_file_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_index());
    }
    
    // required int64 filesize_byte = 4;
    if (has_filesize_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesize_byte());
    }
    
    // required bytes lastupdatetime = 5;
    if (has_lastupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lastupdatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenFile::MergeFrom(const OpenFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_file_name(from.file_name());
    }
    if (from._has_bit(2)) {
      set_file_index(from.file_index());
    }
    if (from._has_bit(3)) {
      set_filesize_byte(from.filesize_byte());
    }
    if (from._has_bit(4)) {
      set_lastupdatetime(from.lastupdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenFile::CopyFrom(const OpenFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void OpenFile::Swap(OpenFile* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_index_, other->file_index_);
    std::swap(filesize_byte_, other->filesize_byte_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenFile_descriptor_;
  metadata.reflection = OpenFile_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string OpenFileAck::_default_task_uuid_;
#ifndef _MSC_VER
const int OpenFileAck::kResultFieldNumber;
const int OpenFileAck::kErrorNumberFieldNumber;
const int OpenFileAck::kTaskUuidFieldNumber;
#endif  // !_MSC_VER

OpenFileAck::OpenFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenFileAck::InitAsDefaultInstance() {
}

OpenFileAck::OpenFileAck(const OpenFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenFileAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenFileAck::~OpenFileAck() {
  SharedDtor();
}

void OpenFileAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void OpenFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenFileAck_descriptor_;
}

const OpenFileAck& OpenFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

OpenFileAck* OpenFileAck::default_instance_ = NULL;

OpenFileAck* OpenFileAck::New() const {
  return new OpenFileAck;
}

void OpenFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_uuid;
        break;
      }
      
      // required bytes task_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number(), output);
  }
  
  // required bytes task_uuid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->task_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number(), target);
  }
  
  // required bytes task_uuid = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->task_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenFileAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 2;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
    // required bytes task_uuid = 3;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenFileAck::MergeFrom(const OpenFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number(from.error_number());
    }
    if (from._has_bit(2)) {
      set_task_uuid(from.task_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenFileAck::CopyFrom(const OpenFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenFileAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void OpenFileAck::Swap(OpenFileAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenFileAck_descriptor_;
  metadata.reflection = OpenFileAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RequstWriteFileBlock::_default_task_uuid_;
#ifndef _MSC_VER
const int RequstWriteFileBlock::kTaskUuidFieldNumber;
const int RequstWriteFileBlock::kBlockSizeByteFieldNumber;
#endif  // !_MSC_VER

RequstWriteFileBlock::RequstWriteFileBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequstWriteFileBlock::InitAsDefaultInstance() {
}

RequstWriteFileBlock::RequstWriteFileBlock(const RequstWriteFileBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequstWriteFileBlock::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  block_size_byte_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequstWriteFileBlock::~RequstWriteFileBlock() {
  SharedDtor();
}

void RequstWriteFileBlock::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void RequstWriteFileBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequstWriteFileBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequstWriteFileBlock_descriptor_;
}

const RequstWriteFileBlock& RequstWriteFileBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

RequstWriteFileBlock* RequstWriteFileBlock::default_instance_ = NULL;

RequstWriteFileBlock* RequstWriteFileBlock::New() const {
  return new RequstWriteFileBlock;
}

void RequstWriteFileBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    block_size_byte_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequstWriteFileBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_size_byte;
        break;
      }
      
      // required int64 block_size_byte = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_size_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_size_byte_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequstWriteFileBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required int64 block_size_byte = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->block_size_byte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequstWriteFileBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required int64 block_size_byte = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->block_size_byte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequstWriteFileBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required int64 block_size_byte = 2;
    if (has_block_size_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_size_byte());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequstWriteFileBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequstWriteFileBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequstWriteFileBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequstWriteFileBlock::MergeFrom(const RequstWriteFileBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_block_size_byte(from.block_size_byte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequstWriteFileBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequstWriteFileBlock::CopyFrom(const RequstWriteFileBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequstWriteFileBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RequstWriteFileBlock::Swap(RequstWriteFileBlock* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(block_size_byte_, other->block_size_byte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequstWriteFileBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequstWriteFileBlock_descriptor_;
  metadata.reflection = RequstWriteFileBlock_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RequstWriteFileBlockAck::_default_task_uuid_;
#ifndef _MSC_VER
const int RequstWriteFileBlockAck::kResultFieldNumber;
const int RequstWriteFileBlockAck::kErrorNumberFieldNumber;
const int RequstWriteFileBlockAck::kTaskUuidFieldNumber;
#endif  // !_MSC_VER

RequstWriteFileBlockAck::RequstWriteFileBlockAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequstWriteFileBlockAck::InitAsDefaultInstance() {
}

RequstWriteFileBlockAck::RequstWriteFileBlockAck(const RequstWriteFileBlockAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequstWriteFileBlockAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequstWriteFileBlockAck::~RequstWriteFileBlockAck() {
  SharedDtor();
}

void RequstWriteFileBlockAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void RequstWriteFileBlockAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequstWriteFileBlockAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequstWriteFileBlockAck_descriptor_;
}

const RequstWriteFileBlockAck& RequstWriteFileBlockAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

RequstWriteFileBlockAck* RequstWriteFileBlockAck::default_instance_ = NULL;

RequstWriteFileBlockAck* RequstWriteFileBlockAck::New() const {
  return new RequstWriteFileBlockAck;
}

void RequstWriteFileBlockAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequstWriteFileBlockAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_uuid;
        break;
      }
      
      // required bytes task_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequstWriteFileBlockAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number(), output);
  }
  
  // required bytes task_uuid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->task_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequstWriteFileBlockAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number(), target);
  }
  
  // required bytes task_uuid = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->task_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequstWriteFileBlockAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 2;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
    // required bytes task_uuid = 3;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequstWriteFileBlockAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequstWriteFileBlockAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequstWriteFileBlockAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequstWriteFileBlockAck::MergeFrom(const RequstWriteFileBlockAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number(from.error_number());
    }
    if (from._has_bit(2)) {
      set_task_uuid(from.task_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequstWriteFileBlockAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequstWriteFileBlockAck::CopyFrom(const RequstWriteFileBlockAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequstWriteFileBlockAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void RequstWriteFileBlockAck::Swap(RequstWriteFileBlockAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequstWriteFileBlockAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequstWriteFileBlockAck_descriptor_;
  metadata.reflection = RequstWriteFileBlockAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string WriteFileBlockAck::_default_task_uuid_;
#ifndef _MSC_VER
const int WriteFileBlockAck::kResultFieldNumber;
const int WriteFileBlockAck::kErrorNumberFieldNumber;
const int WriteFileBlockAck::kTaskUuidFieldNumber;
#endif  // !_MSC_VER

WriteFileBlockAck::WriteFileBlockAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteFileBlockAck::InitAsDefaultInstance() {
}

WriteFileBlockAck::WriteFileBlockAck(const WriteFileBlockAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteFileBlockAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteFileBlockAck::~WriteFileBlockAck() {
  SharedDtor();
}

void WriteFileBlockAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void WriteFileBlockAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteFileBlockAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteFileBlockAck_descriptor_;
}

const WriteFileBlockAck& WriteFileBlockAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

WriteFileBlockAck* WriteFileBlockAck::default_instance_ = NULL;

WriteFileBlockAck* WriteFileBlockAck::New() const {
  return new WriteFileBlockAck;
}

void WriteFileBlockAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteFileBlockAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_uuid;
        break;
      }
      
      // required bytes task_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteFileBlockAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number(), output);
  }
  
  // required bytes task_uuid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->task_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteFileBlockAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number(), target);
  }
  
  // required bytes task_uuid = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->task_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteFileBlockAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 2;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
    // required bytes task_uuid = 3;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteFileBlockAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteFileBlockAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteFileBlockAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteFileBlockAck::MergeFrom(const WriteFileBlockAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number(from.error_number());
    }
    if (from._has_bit(2)) {
      set_task_uuid(from.task_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteFileBlockAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteFileBlockAck::CopyFrom(const WriteFileBlockAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteFileBlockAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void WriteFileBlockAck::Swap(WriteFileBlockAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteFileBlockAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteFileBlockAck_descriptor_;
  metadata.reflection = WriteFileBlockAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CloseFile::_default_task_uuid_;
const ::std::string CloseFile::_default_file_name_;
#ifndef _MSC_VER
const int CloseFile::kTaskUuidFieldNumber;
const int CloseFile::kFileNameFieldNumber;
const int CloseFile::kFileIndexFieldNumber;
#endif  // !_MSC_VER

CloseFile::CloseFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseFile::InitAsDefaultInstance() {
}

CloseFile::CloseFile(const CloseFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseFile::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  file_name_ = const_cast< ::std::string*>(&_default_file_name_);
  file_index_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseFile::~CloseFile() {
  SharedDtor();
}

void CloseFile::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (file_name_ != &_default_file_name_) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void CloseFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseFile_descriptor_;
}

const CloseFile& CloseFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

CloseFile* CloseFile::default_instance_ = NULL;

CloseFile* CloseFile::New() const {
  return new CloseFile;
}

void CloseFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (file_name_ != &_default_file_name_) {
        file_name_->clear();
      }
    }
    file_index_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }
      
      // required bytes file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_file_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_index;
        break;
      }
      
      // required int64 file_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_index_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bytes file_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->file_name(), output);
  }
  
  // required int64 file_index = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->file_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bytes file_name = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->file_name(), target);
  }
  
  // required int64 file_index = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->file_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bytes file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->file_name());
    }
    
    // required int64 file_index = 3;
    if (has_file_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseFile::MergeFrom(const CloseFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_file_name(from.file_name());
    }
    if (from._has_bit(2)) {
      set_file_index(from.file_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseFile::CopyFrom(const CloseFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void CloseFile::Swap(CloseFile* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(file_name_, other->file_name_);
    std::swap(file_index_, other->file_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseFile_descriptor_;
  metadata.reflection = CloseFile_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CloseFileAck::_default_task_uuid_;
#ifndef _MSC_VER
const int CloseFileAck::kResultFieldNumber;
const int CloseFileAck::kErrorNumberFieldNumber;
const int CloseFileAck::kTaskUuidFieldNumber;
#endif  // !_MSC_VER

CloseFileAck::CloseFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseFileAck::InitAsDefaultInstance() {
}

CloseFileAck::CloseFileAck(const CloseFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseFileAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseFileAck::~CloseFileAck() {
  SharedDtor();
}

void CloseFileAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void CloseFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseFileAck_descriptor_;
}

const CloseFileAck& CloseFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

CloseFileAck* CloseFileAck::default_instance_ = NULL;

CloseFileAck* CloseFileAck::New() const {
  return new CloseFileAck;
}

void CloseFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_uuid;
        break;
      }
      
      // required bytes task_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number(), output);
  }
  
  // required bytes task_uuid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->task_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number(), target);
  }
  
  // required bytes task_uuid = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->task_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseFileAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 2;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
    // required bytes task_uuid = 3;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseFileAck::MergeFrom(const CloseFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number(from.error_number());
    }
    if (from._has_bit(2)) {
      set_task_uuid(from.task_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseFileAck::CopyFrom(const CloseFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseFileAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void CloseFileAck::Swap(CloseFileAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseFileAck_descriptor_;
  metadata.reflection = CloseFileAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string StopDownLoadHandlersFileListTaskAck::_default_task_uuid_;
#ifndef _MSC_VER
const int StopDownLoadHandlersFileListTaskAck::kTaskUuidFieldNumber;
const int StopDownLoadHandlersFileListTaskAck::kResultFieldNumber;
const int StopDownLoadHandlersFileListTaskAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

StopDownLoadHandlersFileListTaskAck::StopDownLoadHandlersFileListTaskAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopDownLoadHandlersFileListTaskAck::InitAsDefaultInstance() {
}

StopDownLoadHandlersFileListTaskAck::StopDownLoadHandlersFileListTaskAck(const StopDownLoadHandlersFileListTaskAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopDownLoadHandlersFileListTaskAck::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopDownLoadHandlersFileListTaskAck::~StopDownLoadHandlersFileListTaskAck() {
  SharedDtor();
}

void StopDownLoadHandlersFileListTaskAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void StopDownLoadHandlersFileListTaskAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopDownLoadHandlersFileListTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopDownLoadHandlersFileListTaskAck_descriptor_;
}

const StopDownLoadHandlersFileListTaskAck& StopDownLoadHandlersFileListTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DownLoadFile_2eproto();  return *default_instance_;
}

StopDownLoadHandlersFileListTaskAck* StopDownLoadHandlersFileListTaskAck::default_instance_ = NULL;

StopDownLoadHandlersFileListTaskAck* StopDownLoadHandlersFileListTaskAck::New() const {
  return new StopDownLoadHandlersFileListTaskAck;
}

void StopDownLoadHandlersFileListTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopDownLoadHandlersFileListTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopDownLoadHandlersFileListTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopDownLoadHandlersFileListTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopDownLoadHandlersFileListTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 3;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopDownLoadHandlersFileListTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopDownLoadHandlersFileListTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopDownLoadHandlersFileListTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopDownLoadHandlersFileListTaskAck::MergeFrom(const StopDownLoadHandlersFileListTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopDownLoadHandlersFileListTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopDownLoadHandlersFileListTaskAck::CopyFrom(const StopDownLoadHandlersFileListTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopDownLoadHandlersFileListTaskAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StopDownLoadHandlersFileListTaskAck::Swap(StopDownLoadHandlersFileListTaskAck* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopDownLoadHandlersFileListTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopDownLoadHandlersFileListTaskAck_descriptor_;
  metadata.reflection = StopDownLoadHandlersFileListTaskAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DownLoadFile

// @@protoc_insertion_point(global_scope)
