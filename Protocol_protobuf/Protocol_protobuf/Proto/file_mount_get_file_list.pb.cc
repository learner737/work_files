// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_mount_get_file_list.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace file_mount_get_file_list {

namespace {

const ::google::protobuf::Descriptor* GetFileListTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileListTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileListTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileListTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileListTaskAckDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileListTaskAckDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountFile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_file_5fmount_5fget_5ffile_5flist_2eproto() {
  protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "file_mount_get_file_list.proto");
  GOOGLE_CHECK(file != NULL);
  GetFileListTask_descriptor_ = file->message_type(0);
  static const int GetFileListTask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTask, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTask, task_timeout_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTask, task_handler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTask, task_handler_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTask, mount_root_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTask, the_dir_path_),
  };
  GetFileListTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileListTask_descriptor_,
      GetFileListTask::default_instance_,
      GetFileListTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileListTask));
  GetFileListTaskAck_descriptor_ = file->message_type(1);
  static const int GetFileListTaskAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAck, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAck, error_number_),
  };
  GetFileListTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileListTaskAck_descriptor_,
      GetFileListTaskAck::default_instance_,
      GetFileListTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileListTaskAck));
  GetFileListTaskAckDetail_descriptor_ = file->message_type(2);
  static const int GetFileListTaskAckDetail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAckDetail, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAckDetail, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAckDetail, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAckDetail, error_number_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAckDetail, error_number_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAckDetail, file_list_),
  };
  GetFileListTaskAckDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileListTaskAckDetail_descriptor_,
      GetFileListTaskAckDetail::default_instance_,
      GetFileListTaskAckDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAckDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileListTaskAckDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileListTaskAckDetail));
  MountFile_descriptor_ = file->message_type(3);
  static const int MountFile_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFile, is_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFile, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFile, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFile, size_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFile, lastupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFile, mount_root_path_),
  };
  MountFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountFile_descriptor_,
      MountFile::default_instance_,
      MountFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountFile));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_file_5fmount_5fget_5ffile_5flist_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileListTask_descriptor_, &GetFileListTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileListTaskAck_descriptor_, &GetFileListTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileListTaskAckDetail_descriptor_, &GetFileListTaskAckDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountFile_descriptor_, &MountFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_file_5fmount_5fget_5ffile_5flist_2eproto() {
  delete GetFileListTask::default_instance_;
  delete GetFileListTask_reflection_;
  delete GetFileListTaskAck::default_instance_;
  delete GetFileListTaskAck_reflection_;
  delete GetFileListTaskAckDetail::default_instance_;
  delete GetFileListTaskAckDetail_reflection_;
  delete MountFile::default_instance_;
  delete MountFile_reflection_;
}

void protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::LogExportTask::protobuf_AddDesc_LogExportTask_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036file_mount_get_file_list.proto\022\030file_m"
    "ount_get_file_list\032\023LogExportTask.proto\""
    "\277\001\n\017GetFileListTask\022\021\n\ttask_uuid\030\001 \002(\014\022\033"
    "\n\023task_timeout_second\030\002 \002(\005\0220\n\014task_hand"
    "ler\030\003 \002(\0162\032.LogExportTask.TaskHandler\022\033\n"
    "\023task_handler_userid\030\004 \002(\014\022\027\n\017mount_root"
    "_path\030\005 \002(\014\022\024\n\014the_dir_path\030\006 \002(\014\"M\n\022Get"
    "FileListTaskAck\022\021\n\ttask_uuid\030\001 \002(\014\022\016\n\006re"
    "sult\030\002 \002(\010\022\024\n\014error_number\030\003 \001(\003\"\274\001\n\030Get"
    "FileListTaskAckDetail\022\021\n\ttask_uuid\030\001 \002(\014"
    "\022\016\n\006finish\030\002 \002(\010\022\016\n\006result\030\003 \002(\010\022\030\n\020erro"
    "r_number_msg\030\004 \001(\003\022\033\n\023error_number_clien"
    "t\030\005 \001(\003\0226\n\tfile_list\030\006 \003(\0132#.file_mount_"
    "get_file_list.MountFile\"{\n\tMountFile\022\016\n\006"
    "is_dir\030\001 \002(\010\022\014\n\004name\030\002 \002(\014\022\014\n\004path\030\003 \001(\014"
    "\022\021\n\tsize_byte\030\004 \002(\003\022\026\n\016lastupdatetime\030\005 "
    "\002(\014\022\027\n\017mount_root_path\030\006 \001(\014", 668);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file_mount_get_file_list.proto", &protobuf_RegisterTypes);
  GetFileListTask::default_instance_ = new GetFileListTask();
  GetFileListTaskAck::default_instance_ = new GetFileListTaskAck();
  GetFileListTaskAckDetail::default_instance_ = new GetFileListTaskAckDetail();
  MountFile::default_instance_ = new MountFile();
  GetFileListTask::default_instance_->InitAsDefaultInstance();
  GetFileListTaskAck::default_instance_->InitAsDefaultInstance();
  GetFileListTaskAckDetail::default_instance_->InitAsDefaultInstance();
  MountFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_file_5fmount_5fget_5ffile_5flist_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_file_5fmount_5fget_5ffile_5flist_2eproto {
  StaticDescriptorInitializer_file_5fmount_5fget_5ffile_5flist_2eproto() {
    protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  }
} static_descriptor_initializer_file_5fmount_5fget_5ffile_5flist_2eproto_;


// ===================================================================

const ::std::string GetFileListTask::_default_task_uuid_;
const ::std::string GetFileListTask::_default_task_handler_userid_;
const ::std::string GetFileListTask::_default_mount_root_path_;
const ::std::string GetFileListTask::_default_the_dir_path_;
#ifndef _MSC_VER
const int GetFileListTask::kTaskUuidFieldNumber;
const int GetFileListTask::kTaskTimeoutSecondFieldNumber;
const int GetFileListTask::kTaskHandlerFieldNumber;
const int GetFileListTask::kTaskHandlerUseridFieldNumber;
const int GetFileListTask::kMountRootPathFieldNumber;
const int GetFileListTask::kTheDirPathFieldNumber;
#endif  // !_MSC_VER

GetFileListTask::GetFileListTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileListTask::InitAsDefaultInstance() {
}

GetFileListTask::GetFileListTask(const GetFileListTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileListTask::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  task_timeout_second_ = 0;
  task_handler_ = 1;
  task_handler_userid_ = const_cast< ::std::string*>(&_default_task_handler_userid_);
  mount_root_path_ = const_cast< ::std::string*>(&_default_mount_root_path_);
  the_dir_path_ = const_cast< ::std::string*>(&_default_the_dir_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileListTask::~GetFileListTask() {
  SharedDtor();
}

void GetFileListTask::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (task_handler_userid_ != &_default_task_handler_userid_) {
    delete task_handler_userid_;
  }
  if (mount_root_path_ != &_default_mount_root_path_) {
    delete mount_root_path_;
  }
  if (the_dir_path_ != &_default_the_dir_path_) {
    delete the_dir_path_;
  }
  if (this != default_instance_) {
  }
}

void GetFileListTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileListTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileListTask_descriptor_;
}

const GetFileListTask& GetFileListTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();  return *default_instance_;
}

GetFileListTask* GetFileListTask::default_instance_ = NULL;

GetFileListTask* GetFileListTask::New() const {
  return new GetFileListTask;
}

void GetFileListTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    task_timeout_second_ = 0;
    task_handler_ = 1;
    if (_has_bit(3)) {
      if (task_handler_userid_ != &_default_task_handler_userid_) {
        task_handler_userid_->clear();
      }
    }
    if (_has_bit(4)) {
      if (mount_root_path_ != &_default_mount_root_path_) {
        mount_root_path_->clear();
      }
    }
    if (_has_bit(5)) {
      if (the_dir_path_ != &_default_the_dir_path_) {
        the_dir_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileListTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_timeout_second;
        break;
      }
      
      // required int32 task_timeout_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_timeout_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_timeout_second_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_handler;
        break;
      }
      
      // required .LogExportTask.TaskHandler task_handler = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_handler:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (LogExportTask::TaskHandler_IsValid(value)) {
            set_task_handler(static_cast< LogExportTask::TaskHandler >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_handler_userid;
        break;
      }
      
      // required bytes task_handler_userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_handler_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_handler_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mount_root_path;
        break;
      }
      
      // required bytes mount_root_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_root_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mount_root_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_the_dir_path;
        break;
      }
      
      // required bytes the_dir_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_the_dir_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_the_dir_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileListTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_timeout_second(), output);
  }
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->task_handler(), output);
  }
  
  // required bytes task_handler_userid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->task_handler_userid(), output);
  }
  
  // required bytes mount_root_path = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->mount_root_path(), output);
  }
  
  // required bytes the_dir_path = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->the_dir_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileListTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_timeout_second(), target);
  }
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->task_handler(), target);
  }
  
  // required bytes task_handler_userid = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->task_handler_userid(), target);
  }
  
  // required bytes mount_root_path = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->mount_root_path(), target);
  }
  
  // required bytes the_dir_path = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->the_dir_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileListTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required int32 task_timeout_second = 2;
    if (has_task_timeout_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_timeout_second());
    }
    
    // required .LogExportTask.TaskHandler task_handler = 3;
    if (has_task_handler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_handler());
    }
    
    // required bytes task_handler_userid = 4;
    if (has_task_handler_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_handler_userid());
    }
    
    // required bytes mount_root_path = 5;
    if (has_mount_root_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mount_root_path());
    }
    
    // required bytes the_dir_path = 6;
    if (has_the_dir_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->the_dir_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileListTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileListTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileListTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileListTask::MergeFrom(const GetFileListTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_task_timeout_second(from.task_timeout_second());
    }
    if (from._has_bit(2)) {
      set_task_handler(from.task_handler());
    }
    if (from._has_bit(3)) {
      set_task_handler_userid(from.task_handler_userid());
    }
    if (from._has_bit(4)) {
      set_mount_root_path(from.mount_root_path());
    }
    if (from._has_bit(5)) {
      set_the_dir_path(from.the_dir_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileListTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileListTask::CopyFrom(const GetFileListTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileListTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void GetFileListTask::Swap(GetFileListTask* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(task_timeout_second_, other->task_timeout_second_);
    std::swap(task_handler_, other->task_handler_);
    std::swap(task_handler_userid_, other->task_handler_userid_);
    std::swap(mount_root_path_, other->mount_root_path_);
    std::swap(the_dir_path_, other->the_dir_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileListTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileListTask_descriptor_;
  metadata.reflection = GetFileListTask_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetFileListTaskAck::_default_task_uuid_;
#ifndef _MSC_VER
const int GetFileListTaskAck::kTaskUuidFieldNumber;
const int GetFileListTaskAck::kResultFieldNumber;
const int GetFileListTaskAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

GetFileListTaskAck::GetFileListTaskAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileListTaskAck::InitAsDefaultInstance() {
}

GetFileListTaskAck::GetFileListTaskAck(const GetFileListTaskAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileListTaskAck::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileListTaskAck::~GetFileListTaskAck() {
  SharedDtor();
}

void GetFileListTaskAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void GetFileListTaskAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileListTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileListTaskAck_descriptor_;
}

const GetFileListTaskAck& GetFileListTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();  return *default_instance_;
}

GetFileListTaskAck* GetFileListTaskAck::default_instance_ = NULL;

GetFileListTaskAck* GetFileListTaskAck::New() const {
  return new GetFileListTaskAck;
}

void GetFileListTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileListTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileListTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileListTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileListTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 3;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileListTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileListTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileListTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileListTaskAck::MergeFrom(const GetFileListTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileListTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileListTaskAck::CopyFrom(const GetFileListTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileListTaskAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetFileListTaskAck::Swap(GetFileListTaskAck* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileListTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileListTaskAck_descriptor_;
  metadata.reflection = GetFileListTaskAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string GetFileListTaskAckDetail::_default_task_uuid_;
#ifndef _MSC_VER
const int GetFileListTaskAckDetail::kTaskUuidFieldNumber;
const int GetFileListTaskAckDetail::kFinishFieldNumber;
const int GetFileListTaskAckDetail::kResultFieldNumber;
const int GetFileListTaskAckDetail::kErrorNumberMsgFieldNumber;
const int GetFileListTaskAckDetail::kErrorNumberClientFieldNumber;
const int GetFileListTaskAckDetail::kFileListFieldNumber;
#endif  // !_MSC_VER

GetFileListTaskAckDetail::GetFileListTaskAckDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileListTaskAckDetail::InitAsDefaultInstance() {
}

GetFileListTaskAckDetail::GetFileListTaskAckDetail(const GetFileListTaskAckDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileListTaskAckDetail::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  finish_ = false;
  result_ = false;
  error_number_msg_ = GOOGLE_LONGLONG(0);
  error_number_client_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileListTaskAckDetail::~GetFileListTaskAckDetail() {
  SharedDtor();
}

void GetFileListTaskAckDetail::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void GetFileListTaskAckDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileListTaskAckDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileListTaskAckDetail_descriptor_;
}

const GetFileListTaskAckDetail& GetFileListTaskAckDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();  return *default_instance_;
}

GetFileListTaskAckDetail* GetFileListTaskAckDetail::default_instance_ = NULL;

GetFileListTaskAckDetail* GetFileListTaskAckDetail::New() const {
  return new GetFileListTaskAckDetail;
}

void GetFileListTaskAckDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    finish_ = false;
    result_ = false;
    error_number_msg_ = GOOGLE_LONGLONG(0);
    error_number_client_ = GOOGLE_LONGLONG(0);
  }
  file_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileListTaskAckDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }
      
      // required bool finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_number_msg;
        break;
      }
      
      // optional int64 error_number_msg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_msg_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error_number_client;
        break;
      }
      
      // optional int64 error_number_client = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_client_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file_list;
        break;
      }
      
      // repeated .file_mount_get_file_list.MountFile file_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_file_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileListTaskAckDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bool finish = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->finish(), output);
  }
  
  // required bool result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }
  
  // optional int64 error_number_msg = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->error_number_msg(), output);
  }
  
  // optional int64 error_number_client = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->error_number_client(), output);
  }
  
  // repeated .file_mount_get_file_list.MountFile file_list = 6;
  for (int i = 0; i < this->file_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->file_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileListTaskAckDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bool finish = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->finish(), target);
  }
  
  // required bool result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }
  
  // optional int64 error_number_msg = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->error_number_msg(), target);
  }
  
  // optional int64 error_number_client = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->error_number_client(), target);
  }
  
  // repeated .file_mount_get_file_list.MountFile file_list = 6;
  for (int i = 0; i < this->file_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->file_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileListTaskAckDetail::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bool finish = 2;
    if (has_finish()) {
      total_size += 1 + 1;
    }
    
    // required bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number_msg = 4;
    if (has_error_number_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number_msg());
    }
    
    // optional int64 error_number_client = 5;
    if (has_error_number_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number_client());
    }
    
  }
  // repeated .file_mount_get_file_list.MountFile file_list = 6;
  total_size += 1 * this->file_list_size();
  for (int i = 0; i < this->file_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileListTaskAckDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileListTaskAckDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileListTaskAckDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileListTaskAckDetail::MergeFrom(const GetFileListTaskAckDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_list_.MergeFrom(from.file_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_finish(from.finish());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_error_number_msg(from.error_number_msg());
    }
    if (from._has_bit(4)) {
      set_error_number_client(from.error_number_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileListTaskAckDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileListTaskAckDetail::CopyFrom(const GetFileListTaskAckDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileListTaskAckDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < file_list_size(); i++) {
    if (!this->file_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetFileListTaskAckDetail::Swap(GetFileListTaskAckDetail* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(finish_, other->finish_);
    std::swap(result_, other->result_);
    std::swap(error_number_msg_, other->error_number_msg_);
    std::swap(error_number_client_, other->error_number_client_);
    file_list_.Swap(&other->file_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileListTaskAckDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileListTaskAckDetail_descriptor_;
  metadata.reflection = GetFileListTaskAckDetail_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MountFile::_default_name_;
const ::std::string MountFile::_default_path_;
const ::std::string MountFile::_default_lastupdatetime_;
const ::std::string MountFile::_default_mount_root_path_;
#ifndef _MSC_VER
const int MountFile::kIsDirFieldNumber;
const int MountFile::kNameFieldNumber;
const int MountFile::kPathFieldNumber;
const int MountFile::kSizeByteFieldNumber;
const int MountFile::kLastupdatetimeFieldNumber;
const int MountFile::kMountRootPathFieldNumber;
#endif  // !_MSC_VER

MountFile::MountFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountFile::InitAsDefaultInstance() {
}

MountFile::MountFile(const MountFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountFile::SharedCtor() {
  _cached_size_ = 0;
  is_dir_ = false;
  name_ = const_cast< ::std::string*>(&_default_name_);
  path_ = const_cast< ::std::string*>(&_default_path_);
  size_byte_ = GOOGLE_LONGLONG(0);
  lastupdatetime_ = const_cast< ::std::string*>(&_default_lastupdatetime_);
  mount_root_path_ = const_cast< ::std::string*>(&_default_mount_root_path_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountFile::~MountFile() {
  SharedDtor();
}

void MountFile::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (path_ != &_default_path_) {
    delete path_;
  }
  if (lastupdatetime_ != &_default_lastupdatetime_) {
    delete lastupdatetime_;
  }
  if (mount_root_path_ != &_default_mount_root_path_) {
    delete mount_root_path_;
  }
  if (this != default_instance_) {
  }
}

void MountFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountFile_descriptor_;
}

const MountFile& MountFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();  return *default_instance_;
}

MountFile* MountFile::default_instance_ = NULL;

MountFile* MountFile::New() const {
  return new MountFile;
}

void MountFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_dir_ = false;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (path_ != &_default_path_) {
        path_->clear();
      }
    }
    size_byte_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (lastupdatetime_ != &_default_lastupdatetime_) {
        lastupdatetime_->clear();
      }
    }
    if (_has_bit(5)) {
      if (mount_root_path_ != &_default_mount_root_path_) {
        mount_root_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dir_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }
      
      // optional bytes path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size_byte;
        break;
      }
      
      // required int64 size_byte = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_byte_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lastupdatetime;
        break;
      }
      
      // required bytes lastupdatetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastupdatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lastupdatetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mount_root_path;
        break;
      }
      
      // optional bytes mount_root_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_root_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mount_root_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is_dir = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_dir(), output);
  }
  
  // required bytes name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }
  
  // optional bytes path = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->path(), output);
  }
  
  // required int64 size_byte = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->size_byte(), output);
  }
  
  // required bytes lastupdatetime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->lastupdatetime(), output);
  }
  
  // optional bytes mount_root_path = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->mount_root_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool is_dir = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_dir(), target);
  }
  
  // required bytes name = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }
  
  // optional bytes path = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->path(), target);
  }
  
  // required int64 size_byte = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->size_byte(), target);
  }
  
  // required bytes lastupdatetime = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->lastupdatetime(), target);
  }
  
  // optional bytes mount_root_path = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->mount_root_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_dir = 1;
    if (has_is_dir()) {
      total_size += 1 + 1;
    }
    
    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }
    
    // optional bytes path = 3;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->path());
    }
    
    // required int64 size_byte = 4;
    if (has_size_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->size_byte());
    }
    
    // required bytes lastupdatetime = 5;
    if (has_lastupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lastupdatetime());
    }
    
    // optional bytes mount_root_path = 6;
    if (has_mount_root_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mount_root_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountFile::MergeFrom(const MountFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_is_dir(from.is_dir());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      set_path(from.path());
    }
    if (from._has_bit(3)) {
      set_size_byte(from.size_byte());
    }
    if (from._has_bit(4)) {
      set_lastupdatetime(from.lastupdatetime());
    }
    if (from._has_bit(5)) {
      set_mount_root_path(from.mount_root_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountFile::CopyFrom(const MountFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;
  
  return true;
}

void MountFile::Swap(MountFile* other) {
  if (other != this) {
    std::swap(is_dir_, other->is_dir_);
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(size_byte_, other->size_byte_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(mount_root_path_, other->mount_root_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountFile_descriptor_;
  metadata.reflection = MountFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_mount_get_file_list

// @@protoc_insertion_point(global_scope)
