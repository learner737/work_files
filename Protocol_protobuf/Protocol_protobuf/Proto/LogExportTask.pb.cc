// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LogExportTask.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LogExportTask {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownLoadSingleFileTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownLoadSingleFileTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownLoadHandlersFileListTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownLoadHandlersFileListTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Handler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Handler_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandlerFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandlerFile_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskHandler_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_LogExportTask_2eproto() {
  protobuf_AddDesc_LogExportTask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LogExportTask.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_timeout_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_handler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_handler_userid_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  DownLoadSingleFileTask_descriptor_ = file->message_type(1);
  static const int DownLoadSingleFileTask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, task_timeout_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, task_handler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, task_handler_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, fileindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, filesize_byte_),
  };
  DownLoadSingleFileTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownLoadSingleFileTask_descriptor_,
      DownLoadSingleFileTask::default_instance_,
      DownLoadSingleFileTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadSingleFileTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownLoadSingleFileTask));
  DownLoadHandlersFileListTask_descriptor_ = file->message_type(2);
  static const int DownLoadHandlersFileListTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListTask, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListTask, task_timeout_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListTask, bug_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListTask, handler_list_),
  };
  DownLoadHandlersFileListTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownLoadHandlersFileListTask_descriptor_,
      DownLoadHandlersFileListTask::default_instance_,
      DownLoadHandlersFileListTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownLoadHandlersFileListTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownLoadHandlersFileListTask));
  Handler_descriptor_ = file->message_type(3);
  static const int Handler_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handler, task_handler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handler, task_handler_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handler, task_sub_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handler, handler_file_list_),
  };
  Handler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Handler_descriptor_,
      Handler::default_instance_,
      Handler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Handler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Handler));
  HandlerFile_descriptor_ = file->message_type(4);
  static const int HandlerFile_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerFile, filetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerFile, fileindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerFile, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerFile, filesize_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerFile, lastupdatetime_),
  };
  HandlerFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandlerFile_descriptor_,
      HandlerFile::default_instance_,
      HandlerFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandlerFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandlerFile));
  TaskHandler_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LogExportTask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownLoadSingleFileTask_descriptor_, &DownLoadSingleFileTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownLoadHandlersFileListTask_descriptor_, &DownLoadHandlersFileListTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Handler_descriptor_, &Handler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandlerFile_descriptor_, &HandlerFile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LogExportTask_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete DownLoadSingleFileTask::default_instance_;
  delete DownLoadSingleFileTask_reflection_;
  delete DownLoadHandlersFileListTask::default_instance_;
  delete DownLoadHandlersFileListTask_reflection_;
  delete Handler::default_instance_;
  delete Handler_reflection_;
  delete HandlerFile::default_instance_;
  delete HandlerFile_reflection_;
}

void protobuf_AddDesc_LogExportTask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023LogExportTask.proto\022\rLogExportTask\"\205\001\n"
    "\004Task\022\021\n\ttask_uuid\030\001 \002(\014\022\033\n\023task_timeout"
    "_second\030\002 \002(\005\0220\n\014task_handler\030\003 \002(\0162\032.Lo"
    "gExportTask.TaskHandler\022\033\n\023task_handler_"
    "userid\030\004 \002(\014\"\323\001\n\026DownLoadSingleFileTask\022"
    "\021\n\ttask_uuid\030\001 \002(\014\022\033\n\023task_timeout_secon"
    "d\030\002 \002(\005\0220\n\014task_handler\030\003 \002(\0162\032.LogExpor"
    "tTask.TaskHandler\022\033\n\023task_handler_userid"
    "\030\004 \002(\014\022\020\n\010filename\030\005 \002(\014\022\021\n\tfileindex\030\006 "
    "\002(\003\022\025\n\rfilesize_byte\030\007 \002(\003\"\225\001\n\034DownLoadH"
    "andlersFileListTask\022\021\n\ttask_uuid\030\001 \002(\014\022\033"
    "\n\023task_timeout_second\030\002 \002(\005\022\027\n\017bug_descr"
    "iption\030\003 \002(\014\022,\n\014handler_list\030\004 \003(\0132\026.Log"
    "ExportTask.Handler\"\246\001\n\007Handler\0220\n\014task_h"
    "andler\030\001 \002(\0162\032.LogExportTask.TaskHandler"
    "\022\033\n\023task_handler_userid\030\002 \002(\014\022\025\n\rtask_su"
    "b_uuid\030\003 \002(\014\0225\n\021handler_file_list\030\004 \003(\0132"
    "\032.LogExportTask.HandlerFile\"s\n\013HandlerFi"
    "le\022\020\n\010filetype\030\001 \002(\005\022\021\n\tfileindex\030\002 \002(\003\022"
    "\020\n\010filename\030\003 \002(\014\022\025\n\rfilesize_byte\030\004 \002(\003"
    "\022\026\n\016lastupdatetime\030\005 \002(\014*\256\001\n\013TaskHandler"
    "\022\026\n\022EN_TASK_HANDLE_WEB\020\001\022\032\n\026EN_TASK_HAND"
    "LE_MESSAGE\020\002\022\030\n\024EN_TASK_HANDLE_MYSQL\020\003\022\032"
    "\n\026EN_TASK_HANDLE_STORAGE\020\004\022\032\n\026EN_TASK_HA"
    "NDLE_COMPUTE\020\005\022\031\n\025EN_TASK_HANDLE_CLIENT\020"
    "\006", 1001);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LogExportTask.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  DownLoadSingleFileTask::default_instance_ = new DownLoadSingleFileTask();
  DownLoadHandlersFileListTask::default_instance_ = new DownLoadHandlersFileListTask();
  Handler::default_instance_ = new Handler();
  HandlerFile::default_instance_ = new HandlerFile();
  Task::default_instance_->InitAsDefaultInstance();
  DownLoadSingleFileTask::default_instance_->InitAsDefaultInstance();
  DownLoadHandlersFileListTask::default_instance_->InitAsDefaultInstance();
  Handler::default_instance_->InitAsDefaultInstance();
  HandlerFile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LogExportTask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LogExportTask_2eproto {
  StaticDescriptorInitializer_LogExportTask_2eproto() {
    protobuf_AddDesc_LogExportTask_2eproto();
  }
} static_descriptor_initializer_LogExportTask_2eproto_;

const ::google::protobuf::EnumDescriptor* TaskHandler_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskHandler_descriptor_;
}
bool TaskHandler_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string Task::_default_task_uuid_;
const ::std::string Task::_default_task_handler_userid_;
#ifndef _MSC_VER
const int Task::kTaskUuidFieldNumber;
const int Task::kTaskTimeoutSecondFieldNumber;
const int Task::kTaskHandlerFieldNumber;
const int Task::kTaskHandlerUseridFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  task_timeout_second_ = 0;
  task_handler_ = 1;
  task_handler_userid_ = const_cast< ::std::string*>(&_default_task_handler_userid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (task_handler_userid_ != &_default_task_handler_userid_) {
    delete task_handler_userid_;
  }
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogExportTask_2eproto();  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    task_timeout_second_ = 0;
    task_handler_ = 1;
    if (_has_bit(3)) {
      if (task_handler_userid_ != &_default_task_handler_userid_) {
        task_handler_userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_timeout_second;
        break;
      }
      
      // required int32 task_timeout_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_timeout_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_timeout_second_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_handler;
        break;
      }
      
      // required .LogExportTask.TaskHandler task_handler = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_handler:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (LogExportTask::TaskHandler_IsValid(value)) {
            set_task_handler(static_cast< LogExportTask::TaskHandler >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_handler_userid;
        break;
      }
      
      // required bytes task_handler_userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_handler_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_handler_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_timeout_second(), output);
  }
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->task_handler(), output);
  }
  
  // required bytes task_handler_userid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->task_handler_userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_timeout_second(), target);
  }
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->task_handler(), target);
  }
  
  // required bytes task_handler_userid = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->task_handler_userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required int32 task_timeout_second = 2;
    if (has_task_timeout_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_timeout_second());
    }
    
    // required .LogExportTask.TaskHandler task_handler = 3;
    if (has_task_handler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_handler());
    }
    
    // required bytes task_handler_userid = 4;
    if (has_task_handler_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_handler_userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_task_timeout_second(from.task_timeout_second());
    }
    if (from._has_bit(2)) {
      set_task_handler(from.task_handler());
    }
    if (from._has_bit(3)) {
      set_task_handler_userid(from.task_handler_userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(task_timeout_second_, other->task_timeout_second_);
    std::swap(task_handler_, other->task_handler_);
    std::swap(task_handler_userid_, other->task_handler_userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DownLoadSingleFileTask::_default_task_uuid_;
const ::std::string DownLoadSingleFileTask::_default_task_handler_userid_;
const ::std::string DownLoadSingleFileTask::_default_filename_;
#ifndef _MSC_VER
const int DownLoadSingleFileTask::kTaskUuidFieldNumber;
const int DownLoadSingleFileTask::kTaskTimeoutSecondFieldNumber;
const int DownLoadSingleFileTask::kTaskHandlerFieldNumber;
const int DownLoadSingleFileTask::kTaskHandlerUseridFieldNumber;
const int DownLoadSingleFileTask::kFilenameFieldNumber;
const int DownLoadSingleFileTask::kFileindexFieldNumber;
const int DownLoadSingleFileTask::kFilesizeByteFieldNumber;
#endif  // !_MSC_VER

DownLoadSingleFileTask::DownLoadSingleFileTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownLoadSingleFileTask::InitAsDefaultInstance() {
}

DownLoadSingleFileTask::DownLoadSingleFileTask(const DownLoadSingleFileTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownLoadSingleFileTask::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  task_timeout_second_ = 0;
  task_handler_ = 1;
  task_handler_userid_ = const_cast< ::std::string*>(&_default_task_handler_userid_);
  filename_ = const_cast< ::std::string*>(&_default_filename_);
  fileindex_ = GOOGLE_LONGLONG(0);
  filesize_byte_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownLoadSingleFileTask::~DownLoadSingleFileTask() {
  SharedDtor();
}

void DownLoadSingleFileTask::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (task_handler_userid_ != &_default_task_handler_userid_) {
    delete task_handler_userid_;
  }
  if (filename_ != &_default_filename_) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void DownLoadSingleFileTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownLoadSingleFileTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownLoadSingleFileTask_descriptor_;
}

const DownLoadSingleFileTask& DownLoadSingleFileTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogExportTask_2eproto();  return *default_instance_;
}

DownLoadSingleFileTask* DownLoadSingleFileTask::default_instance_ = NULL;

DownLoadSingleFileTask* DownLoadSingleFileTask::New() const {
  return new DownLoadSingleFileTask;
}

void DownLoadSingleFileTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    task_timeout_second_ = 0;
    task_handler_ = 1;
    if (_has_bit(3)) {
      if (task_handler_userid_ != &_default_task_handler_userid_) {
        task_handler_userid_->clear();
      }
    }
    if (_has_bit(4)) {
      if (filename_ != &_default_filename_) {
        filename_->clear();
      }
    }
    fileindex_ = GOOGLE_LONGLONG(0);
    filesize_byte_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownLoadSingleFileTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_timeout_second;
        break;
      }
      
      // required int32 task_timeout_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_timeout_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_timeout_second_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_handler;
        break;
      }
      
      // required .LogExportTask.TaskHandler task_handler = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_handler:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (LogExportTask::TaskHandler_IsValid(value)) {
            set_task_handler(static_cast< LogExportTask::TaskHandler >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_handler_userid;
        break;
      }
      
      // required bytes task_handler_userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_handler_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_handler_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filename;
        break;
      }
      
      // required bytes filename = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fileindex;
        break;
      }
      
      // required int64 fileindex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fileindex_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_filesize_byte;
        break;
      }
      
      // required int64 filesize_byte = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesize_byte_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownLoadSingleFileTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_timeout_second(), output);
  }
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->task_handler(), output);
  }
  
  // required bytes task_handler_userid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->task_handler_userid(), output);
  }
  
  // required bytes filename = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->filename(), output);
  }
  
  // required int64 fileindex = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fileindex(), output);
  }
  
  // required int64 filesize_byte = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->filesize_byte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownLoadSingleFileTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_timeout_second(), target);
  }
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->task_handler(), target);
  }
  
  // required bytes task_handler_userid = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->task_handler_userid(), target);
  }
  
  // required bytes filename = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->filename(), target);
  }
  
  // required int64 fileindex = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fileindex(), target);
  }
  
  // required int64 filesize_byte = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->filesize_byte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownLoadSingleFileTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required int32 task_timeout_second = 2;
    if (has_task_timeout_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_timeout_second());
    }
    
    // required .LogExportTask.TaskHandler task_handler = 3;
    if (has_task_handler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_handler());
    }
    
    // required bytes task_handler_userid = 4;
    if (has_task_handler_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_handler_userid());
    }
    
    // required bytes filename = 5;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filename());
    }
    
    // required int64 fileindex = 6;
    if (has_fileindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fileindex());
    }
    
    // required int64 filesize_byte = 7;
    if (has_filesize_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesize_byte());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownLoadSingleFileTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownLoadSingleFileTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownLoadSingleFileTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownLoadSingleFileTask::MergeFrom(const DownLoadSingleFileTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_task_timeout_second(from.task_timeout_second());
    }
    if (from._has_bit(2)) {
      set_task_handler(from.task_handler());
    }
    if (from._has_bit(3)) {
      set_task_handler_userid(from.task_handler_userid());
    }
    if (from._has_bit(4)) {
      set_filename(from.filename());
    }
    if (from._has_bit(5)) {
      set_fileindex(from.fileindex());
    }
    if (from._has_bit(6)) {
      set_filesize_byte(from.filesize_byte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownLoadSingleFileTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownLoadSingleFileTask::CopyFrom(const DownLoadSingleFileTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownLoadSingleFileTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void DownLoadSingleFileTask::Swap(DownLoadSingleFileTask* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(task_timeout_second_, other->task_timeout_second_);
    std::swap(task_handler_, other->task_handler_);
    std::swap(task_handler_userid_, other->task_handler_userid_);
    std::swap(filename_, other->filename_);
    std::swap(fileindex_, other->fileindex_);
    std::swap(filesize_byte_, other->filesize_byte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownLoadSingleFileTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownLoadSingleFileTask_descriptor_;
  metadata.reflection = DownLoadSingleFileTask_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string DownLoadHandlersFileListTask::_default_task_uuid_;
const ::std::string DownLoadHandlersFileListTask::_default_bug_description_;
#ifndef _MSC_VER
const int DownLoadHandlersFileListTask::kTaskUuidFieldNumber;
const int DownLoadHandlersFileListTask::kTaskTimeoutSecondFieldNumber;
const int DownLoadHandlersFileListTask::kBugDescriptionFieldNumber;
const int DownLoadHandlersFileListTask::kHandlerListFieldNumber;
#endif  // !_MSC_VER

DownLoadHandlersFileListTask::DownLoadHandlersFileListTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownLoadHandlersFileListTask::InitAsDefaultInstance() {
}

DownLoadHandlersFileListTask::DownLoadHandlersFileListTask(const DownLoadHandlersFileListTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownLoadHandlersFileListTask::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  task_timeout_second_ = 0;
  bug_description_ = const_cast< ::std::string*>(&_default_bug_description_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownLoadHandlersFileListTask::~DownLoadHandlersFileListTask() {
  SharedDtor();
}

void DownLoadHandlersFileListTask::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (bug_description_ != &_default_bug_description_) {
    delete bug_description_;
  }
  if (this != default_instance_) {
  }
}

void DownLoadHandlersFileListTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownLoadHandlersFileListTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownLoadHandlersFileListTask_descriptor_;
}

const DownLoadHandlersFileListTask& DownLoadHandlersFileListTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogExportTask_2eproto();  return *default_instance_;
}

DownLoadHandlersFileListTask* DownLoadHandlersFileListTask::default_instance_ = NULL;

DownLoadHandlersFileListTask* DownLoadHandlersFileListTask::New() const {
  return new DownLoadHandlersFileListTask;
}

void DownLoadHandlersFileListTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    task_timeout_second_ = 0;
    if (_has_bit(2)) {
      if (bug_description_ != &_default_bug_description_) {
        bug_description_->clear();
      }
    }
  }
  handler_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownLoadHandlersFileListTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_timeout_second;
        break;
      }
      
      // required int32 task_timeout_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_timeout_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_timeout_second_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bug_description;
        break;
      }
      
      // required bytes bug_description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bug_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bug_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_handler_list;
        break;
      }
      
      // repeated .LogExportTask.Handler handler_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handler_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handler_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_handler_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownLoadHandlersFileListTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_timeout_second(), output);
  }
  
  // required bytes bug_description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->bug_description(), output);
  }
  
  // repeated .LogExportTask.Handler handler_list = 4;
  for (int i = 0; i < this->handler_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->handler_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownLoadHandlersFileListTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_timeout_second(), target);
  }
  
  // required bytes bug_description = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->bug_description(), target);
  }
  
  // repeated .LogExportTask.Handler handler_list = 4;
  for (int i = 0; i < this->handler_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->handler_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownLoadHandlersFileListTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required int32 task_timeout_second = 2;
    if (has_task_timeout_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_timeout_second());
    }
    
    // required bytes bug_description = 3;
    if (has_bug_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bug_description());
    }
    
  }
  // repeated .LogExportTask.Handler handler_list = 4;
  total_size += 1 * this->handler_list_size();
  for (int i = 0; i < this->handler_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handler_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownLoadHandlersFileListTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownLoadHandlersFileListTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownLoadHandlersFileListTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownLoadHandlersFileListTask::MergeFrom(const DownLoadHandlersFileListTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  handler_list_.MergeFrom(from.handler_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_task_timeout_second(from.task_timeout_second());
    }
    if (from._has_bit(2)) {
      set_bug_description(from.bug_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownLoadHandlersFileListTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownLoadHandlersFileListTask::CopyFrom(const DownLoadHandlersFileListTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownLoadHandlersFileListTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < handler_list_size(); i++) {
    if (!this->handler_list(i).IsInitialized()) return false;
  }
  return true;
}

void DownLoadHandlersFileListTask::Swap(DownLoadHandlersFileListTask* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(task_timeout_second_, other->task_timeout_second_);
    std::swap(bug_description_, other->bug_description_);
    handler_list_.Swap(&other->handler_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownLoadHandlersFileListTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownLoadHandlersFileListTask_descriptor_;
  metadata.reflection = DownLoadHandlersFileListTask_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Handler::_default_task_handler_userid_;
const ::std::string Handler::_default_task_sub_uuid_;
#ifndef _MSC_VER
const int Handler::kTaskHandlerFieldNumber;
const int Handler::kTaskHandlerUseridFieldNumber;
const int Handler::kTaskSubUuidFieldNumber;
const int Handler::kHandlerFileListFieldNumber;
#endif  // !_MSC_VER

Handler::Handler()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Handler::InitAsDefaultInstance() {
}

Handler::Handler(const Handler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Handler::SharedCtor() {
  _cached_size_ = 0;
  task_handler_ = 1;
  task_handler_userid_ = const_cast< ::std::string*>(&_default_task_handler_userid_);
  task_sub_uuid_ = const_cast< ::std::string*>(&_default_task_sub_uuid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Handler::~Handler() {
  SharedDtor();
}

void Handler::SharedDtor() {
  if (task_handler_userid_ != &_default_task_handler_userid_) {
    delete task_handler_userid_;
  }
  if (task_sub_uuid_ != &_default_task_sub_uuid_) {
    delete task_sub_uuid_;
  }
  if (this != default_instance_) {
  }
}

void Handler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Handler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Handler_descriptor_;
}

const Handler& Handler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogExportTask_2eproto();  return *default_instance_;
}

Handler* Handler::default_instance_ = NULL;

Handler* Handler::New() const {
  return new Handler;
}

void Handler::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_handler_ = 1;
    if (_has_bit(1)) {
      if (task_handler_userid_ != &_default_task_handler_userid_) {
        task_handler_userid_->clear();
      }
    }
    if (_has_bit(2)) {
      if (task_sub_uuid_ != &_default_task_sub_uuid_) {
        task_sub_uuid_->clear();
      }
    }
  }
  handler_file_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Handler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogExportTask.TaskHandler task_handler = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (LogExportTask::TaskHandler_IsValid(value)) {
            set_task_handler(static_cast< LogExportTask::TaskHandler >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_handler_userid;
        break;
      }
      
      // required bytes task_handler_userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_handler_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_handler_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_task_sub_uuid;
        break;
      }
      
      // required bytes task_sub_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_sub_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_sub_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_handler_file_list;
        break;
      }
      
      // repeated .LogExportTask.HandlerFile handler_file_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_handler_file_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_handler_file_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_handler_file_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Handler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .LogExportTask.TaskHandler task_handler = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->task_handler(), output);
  }
  
  // required bytes task_handler_userid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->task_handler_userid(), output);
  }
  
  // required bytes task_sub_uuid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->task_sub_uuid(), output);
  }
  
  // repeated .LogExportTask.HandlerFile handler_file_list = 4;
  for (int i = 0; i < this->handler_file_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->handler_file_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Handler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .LogExportTask.TaskHandler task_handler = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->task_handler(), target);
  }
  
  // required bytes task_handler_userid = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->task_handler_userid(), target);
  }
  
  // required bytes task_sub_uuid = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->task_sub_uuid(), target);
  }
  
  // repeated .LogExportTask.HandlerFile handler_file_list = 4;
  for (int i = 0; i < this->handler_file_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->handler_file_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Handler::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogExportTask.TaskHandler task_handler = 1;
    if (has_task_handler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_handler());
    }
    
    // required bytes task_handler_userid = 2;
    if (has_task_handler_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_handler_userid());
    }
    
    // required bytes task_sub_uuid = 3;
    if (has_task_sub_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_sub_uuid());
    }
    
  }
  // repeated .LogExportTask.HandlerFile handler_file_list = 4;
  total_size += 1 * this->handler_file_list_size();
  for (int i = 0; i < this->handler_file_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->handler_file_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Handler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Handler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Handler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Handler::MergeFrom(const Handler& from) {
  GOOGLE_CHECK_NE(&from, this);
  handler_file_list_.MergeFrom(from.handler_file_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_handler(from.task_handler());
    }
    if (from._has_bit(1)) {
      set_task_handler_userid(from.task_handler_userid());
    }
    if (from._has_bit(2)) {
      set_task_sub_uuid(from.task_sub_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Handler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Handler::CopyFrom(const Handler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Handler::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < handler_file_list_size(); i++) {
    if (!this->handler_file_list(i).IsInitialized()) return false;
  }
  return true;
}

void Handler::Swap(Handler* other) {
  if (other != this) {
    std::swap(task_handler_, other->task_handler_);
    std::swap(task_handler_userid_, other->task_handler_userid_);
    std::swap(task_sub_uuid_, other->task_sub_uuid_);
    handler_file_list_.Swap(&other->handler_file_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Handler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Handler_descriptor_;
  metadata.reflection = Handler_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string HandlerFile::_default_filename_;
const ::std::string HandlerFile::_default_lastupdatetime_;
#ifndef _MSC_VER
const int HandlerFile::kFiletypeFieldNumber;
const int HandlerFile::kFileindexFieldNumber;
const int HandlerFile::kFilenameFieldNumber;
const int HandlerFile::kFilesizeByteFieldNumber;
const int HandlerFile::kLastupdatetimeFieldNumber;
#endif  // !_MSC_VER

HandlerFile::HandlerFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HandlerFile::InitAsDefaultInstance() {
}

HandlerFile::HandlerFile(const HandlerFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HandlerFile::SharedCtor() {
  _cached_size_ = 0;
  filetype_ = 0;
  fileindex_ = GOOGLE_LONGLONG(0);
  filename_ = const_cast< ::std::string*>(&_default_filename_);
  filesize_byte_ = GOOGLE_LONGLONG(0);
  lastupdatetime_ = const_cast< ::std::string*>(&_default_lastupdatetime_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandlerFile::~HandlerFile() {
  SharedDtor();
}

void HandlerFile::SharedDtor() {
  if (filename_ != &_default_filename_) {
    delete filename_;
  }
  if (lastupdatetime_ != &_default_lastupdatetime_) {
    delete lastupdatetime_;
  }
  if (this != default_instance_) {
  }
}

void HandlerFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandlerFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandlerFile_descriptor_;
}

const HandlerFile& HandlerFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LogExportTask_2eproto();  return *default_instance_;
}

HandlerFile* HandlerFile::default_instance_ = NULL;

HandlerFile* HandlerFile::New() const {
  return new HandlerFile;
}

void HandlerFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filetype_ = 0;
    fileindex_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (filename_ != &_default_filename_) {
        filename_->clear();
      }
    }
    filesize_byte_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (lastupdatetime_ != &_default_lastupdatetime_) {
        lastupdatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandlerFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 filetype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filetype_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fileindex;
        break;
      }
      
      // required int64 fileindex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fileindex_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filename;
        break;
      }
      
      // required bytes filename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filesize_byte;
        break;
      }
      
      // required int64 filesize_byte = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesize_byte_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lastupdatetime;
        break;
      }
      
      // required bytes lastupdatetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastupdatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lastupdatetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HandlerFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 filetype = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->filetype(), output);
  }
  
  // required int64 fileindex = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fileindex(), output);
  }
  
  // required bytes filename = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->filename(), output);
  }
  
  // required int64 filesize_byte = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->filesize_byte(), output);
  }
  
  // required bytes lastupdatetime = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->lastupdatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HandlerFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 filetype = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->filetype(), target);
  }
  
  // required int64 fileindex = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fileindex(), target);
  }
  
  // required bytes filename = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->filename(), target);
  }
  
  // required int64 filesize_byte = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->filesize_byte(), target);
  }
  
  // required bytes lastupdatetime = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->lastupdatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HandlerFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 filetype = 1;
    if (has_filetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filetype());
    }
    
    // required int64 fileindex = 2;
    if (has_fileindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fileindex());
    }
    
    // required bytes filename = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->filename());
    }
    
    // required int64 filesize_byte = 4;
    if (has_filesize_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesize_byte());
    }
    
    // required bytes lastupdatetime = 5;
    if (has_lastupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lastupdatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandlerFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandlerFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandlerFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandlerFile::MergeFrom(const HandlerFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_filetype(from.filetype());
    }
    if (from._has_bit(1)) {
      set_fileindex(from.fileindex());
    }
    if (from._has_bit(2)) {
      set_filename(from.filename());
    }
    if (from._has_bit(3)) {
      set_filesize_byte(from.filesize_byte());
    }
    if (from._has_bit(4)) {
      set_lastupdatetime(from.lastupdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandlerFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandlerFile::CopyFrom(const HandlerFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandlerFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void HandlerFile::Swap(HandlerFile* other) {
  if (other != this) {
    std::swap(filetype_, other->filetype_);
    std::swap(fileindex_, other->fileindex_);
    std::swap(filename_, other->filename_);
    std::swap(filesize_byte_, other->filesize_byte_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandlerFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandlerFile_descriptor_;
  metadata.reflection = HandlerFile_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LogExportTask

// @@protoc_insertion_point(global_scope)
