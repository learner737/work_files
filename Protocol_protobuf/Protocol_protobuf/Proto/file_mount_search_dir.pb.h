// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_mount_search_dir.proto

#ifndef PROTOBUF_file_5fmount_5fsearch_5fdir_2eproto__INCLUDED
#define PROTOBUF_file_5fmount_5fsearch_5fdir_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "LogExportTask.pb.h"
// @@protoc_insertion_point(includes)

namespace file_mount_search_dir {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_5fmount_5fsearch_5fdir_2eproto();
void protobuf_AssignDesc_file_5fmount_5fsearch_5fdir_2eproto();
void protobuf_ShutdownFile_file_5fmount_5fsearch_5fdir_2eproto();

class SearchDir;
class SearchDirAck;

// ===================================================================

class SearchDir : public ::google::protobuf::Message {
 public:
  SearchDir();
  virtual ~SearchDir();
  
  SearchDir(const SearchDir& from);
  
  inline SearchDir& operator=(const SearchDir& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchDir& default_instance();
  
  void Swap(SearchDir* other);
  
  // implements Message ----------------------------------------------
  
  SearchDir* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchDir& from);
  void MergeFrom(const SearchDir& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required int32 task_timeout_second = 2;
  inline bool has_task_timeout_second() const;
  inline void clear_task_timeout_second();
  static const int kTaskTimeoutSecondFieldNumber = 2;
  inline ::google::protobuf::int32 task_timeout_second() const;
  inline void set_task_timeout_second(::google::protobuf::int32 value);
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  inline bool has_task_handler() const;
  inline void clear_task_handler();
  static const int kTaskHandlerFieldNumber = 3;
  inline LogExportTask::TaskHandler task_handler() const;
  inline void set_task_handler(LogExportTask::TaskHandler value);
  
  // required bytes task_handler_userid = 4;
  inline bool has_task_handler_userid() const;
  inline void clear_task_handler_userid();
  static const int kTaskHandlerUseridFieldNumber = 4;
  inline const ::std::string& task_handler_userid() const;
  inline void set_task_handler_userid(const ::std::string& value);
  inline void set_task_handler_userid(const char* value);
  inline void set_task_handler_userid(const void* value, size_t size);
  inline ::std::string* mutable_task_handler_userid();
  
  // required bytes mount_root_path = 5;
  inline bool has_mount_root_path() const;
  inline void clear_mount_root_path();
  static const int kMountRootPathFieldNumber = 5;
  inline const ::std::string& mount_root_path() const;
  inline void set_mount_root_path(const ::std::string& value);
  inline void set_mount_root_path(const char* value);
  inline void set_mount_root_path(const void* value, size_t size);
  inline ::std::string* mutable_mount_root_path();
  
  // required bytes the_dir_path = 6;
  inline bool has_the_dir_path() const;
  inline void clear_the_dir_path();
  static const int kTheDirPathFieldNumber = 6;
  inline const ::std::string& the_dir_path() const;
  inline void set_the_dir_path(const ::std::string& value);
  inline void set_the_dir_path(const char* value);
  inline void set_the_dir_path(const void* value, size_t size);
  inline ::std::string* mutable_the_dir_path();
  
  // required bytes keywords = 7;
  inline bool has_keywords() const;
  inline void clear_keywords();
  static const int kKeywordsFieldNumber = 7;
  inline const ::std::string& keywords() const;
  inline void set_keywords(const ::std::string& value);
  inline void set_keywords(const char* value);
  inline void set_keywords(const void* value, size_t size);
  inline ::std::string* mutable_keywords();
  
  // @@protoc_insertion_point(class_scope:file_mount_search_dir.SearchDir)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::google::protobuf::int32 task_timeout_second_;
  int task_handler_;
  ::std::string* task_handler_userid_;
  static const ::std::string _default_task_handler_userid_;
  ::std::string* mount_root_path_;
  static const ::std::string _default_mount_root_path_;
  ::std::string* the_dir_path_;
  static const ::std::string _default_the_dir_path_;
  ::std::string* keywords_;
  static const ::std::string _default_keywords_;
  friend void  protobuf_AddDesc_file_5fmount_5fsearch_5fdir_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fsearch_5fdir_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fsearch_5fdir_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchDir* default_instance_;
};
// -------------------------------------------------------------------

class SearchDirAck : public ::google::protobuf::Message {
 public:
  SearchDirAck();
  virtual ~SearchDirAck();
  
  SearchDirAck(const SearchDirAck& from);
  
  inline SearchDirAck& operator=(const SearchDirAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchDirAck& default_instance();
  
  void Swap(SearchDirAck* other);
  
  // implements Message ----------------------------------------------
  
  SearchDirAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchDirAck& from);
  void MergeFrom(const SearchDirAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 3;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 3;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_search_dir.SearchDirAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_file_5fmount_5fsearch_5fdir_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fsearch_5fdir_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fsearch_5fdir_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchDirAck* default_instance_;
};
// ===================================================================


// ===================================================================

// SearchDir

// required bytes task_uuid = 1;
inline bool SearchDir::has_task_uuid() const {
  return _has_bit(0);
}
inline void SearchDir::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SearchDir::task_uuid() const {
  return *task_uuid_;
}
inline void SearchDir::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void SearchDir::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void SearchDir::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchDir::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required int32 task_timeout_second = 2;
inline bool SearchDir::has_task_timeout_second() const {
  return _has_bit(1);
}
inline void SearchDir::clear_task_timeout_second() {
  task_timeout_second_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 SearchDir::task_timeout_second() const {
  return task_timeout_second_;
}
inline void SearchDir::set_task_timeout_second(::google::protobuf::int32 value) {
  _set_bit(1);
  task_timeout_second_ = value;
}

// required .LogExportTask.TaskHandler task_handler = 3;
inline bool SearchDir::has_task_handler() const {
  return _has_bit(2);
}
inline void SearchDir::clear_task_handler() {
  task_handler_ = 1;
  _clear_bit(2);
}
inline LogExportTask::TaskHandler SearchDir::task_handler() const {
  return static_cast< LogExportTask::TaskHandler >(task_handler_);
}
inline void SearchDir::set_task_handler(LogExportTask::TaskHandler value) {
  GOOGLE_DCHECK(LogExportTask::TaskHandler_IsValid(value));
  _set_bit(2);
  task_handler_ = value;
}

// required bytes task_handler_userid = 4;
inline bool SearchDir::has_task_handler_userid() const {
  return _has_bit(3);
}
inline void SearchDir::clear_task_handler_userid() {
  if (task_handler_userid_ != &_default_task_handler_userid_) {
    task_handler_userid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SearchDir::task_handler_userid() const {
  return *task_handler_userid_;
}
inline void SearchDir::set_task_handler_userid(const ::std::string& value) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(value);
}
inline void SearchDir::set_task_handler_userid(const char* value) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(value);
}
inline void SearchDir::set_task_handler_userid(const void* value, size_t size) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchDir::mutable_task_handler_userid() {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  return task_handler_userid_;
}

// required bytes mount_root_path = 5;
inline bool SearchDir::has_mount_root_path() const {
  return _has_bit(4);
}
inline void SearchDir::clear_mount_root_path() {
  if (mount_root_path_ != &_default_mount_root_path_) {
    mount_root_path_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SearchDir::mount_root_path() const {
  return *mount_root_path_;
}
inline void SearchDir::set_mount_root_path(const ::std::string& value) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(value);
}
inline void SearchDir::set_mount_root_path(const char* value) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(value);
}
inline void SearchDir::set_mount_root_path(const void* value, size_t size) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchDir::mutable_mount_root_path() {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  return mount_root_path_;
}

// required bytes the_dir_path = 6;
inline bool SearchDir::has_the_dir_path() const {
  return _has_bit(5);
}
inline void SearchDir::clear_the_dir_path() {
  if (the_dir_path_ != &_default_the_dir_path_) {
    the_dir_path_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& SearchDir::the_dir_path() const {
  return *the_dir_path_;
}
inline void SearchDir::set_the_dir_path(const ::std::string& value) {
  _set_bit(5);
  if (the_dir_path_ == &_default_the_dir_path_) {
    the_dir_path_ = new ::std::string;
  }
  the_dir_path_->assign(value);
}
inline void SearchDir::set_the_dir_path(const char* value) {
  _set_bit(5);
  if (the_dir_path_ == &_default_the_dir_path_) {
    the_dir_path_ = new ::std::string;
  }
  the_dir_path_->assign(value);
}
inline void SearchDir::set_the_dir_path(const void* value, size_t size) {
  _set_bit(5);
  if (the_dir_path_ == &_default_the_dir_path_) {
    the_dir_path_ = new ::std::string;
  }
  the_dir_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchDir::mutable_the_dir_path() {
  _set_bit(5);
  if (the_dir_path_ == &_default_the_dir_path_) {
    the_dir_path_ = new ::std::string;
  }
  return the_dir_path_;
}

// required bytes keywords = 7;
inline bool SearchDir::has_keywords() const {
  return _has_bit(6);
}
inline void SearchDir::clear_keywords() {
  if (keywords_ != &_default_keywords_) {
    keywords_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SearchDir::keywords() const {
  return *keywords_;
}
inline void SearchDir::set_keywords(const ::std::string& value) {
  _set_bit(6);
  if (keywords_ == &_default_keywords_) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
}
inline void SearchDir::set_keywords(const char* value) {
  _set_bit(6);
  if (keywords_ == &_default_keywords_) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(value);
}
inline void SearchDir::set_keywords(const void* value, size_t size) {
  _set_bit(6);
  if (keywords_ == &_default_keywords_) {
    keywords_ = new ::std::string;
  }
  keywords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchDir::mutable_keywords() {
  _set_bit(6);
  if (keywords_ == &_default_keywords_) {
    keywords_ = new ::std::string;
  }
  return keywords_;
}

// -------------------------------------------------------------------

// SearchDirAck

// required bytes task_uuid = 1;
inline bool SearchDirAck::has_task_uuid() const {
  return _has_bit(0);
}
inline void SearchDirAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SearchDirAck::task_uuid() const {
  return *task_uuid_;
}
inline void SearchDirAck::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void SearchDirAck::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void SearchDirAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchDirAck::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool result = 2;
inline bool SearchDirAck::has_result() const {
  return _has_bit(1);
}
inline void SearchDirAck::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool SearchDirAck::result() const {
  return result_;
}
inline void SearchDirAck::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// optional int64 error_number = 3;
inline bool SearchDirAck::has_error_number() const {
  return _has_bit(2);
}
inline void SearchDirAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 SearchDirAck::error_number() const {
  return error_number_;
}
inline void SearchDirAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_mount_search_dir

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_5fmount_5fsearch_5fdir_2eproto__INCLUDED
