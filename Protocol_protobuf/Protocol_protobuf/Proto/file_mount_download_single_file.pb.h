// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_mount_download_single_file.proto

#ifndef PROTOBUF_file_5fmount_5fdownload_5fsingle_5ffile_2eproto__INCLUDED
#define PROTOBUF_file_5fmount_5fdownload_5fsingle_5ffile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "LogExportTask.pb.h"
// @@protoc_insertion_point(includes)

namespace file_mount_download_single_file {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();

class MountDownloadSingleFileTask;
class MountDownloadSingleFileTaskAck;
class MountOpenFile;
class MountOpenFileAck;
class MountRequstWriteFileBlock;
class MountRequstWriteFileBlockAck;
class MountWriteFileBlockAck;
class MountFileBlock;
class MountCloseFile;
class MountCloseFileAck;
class MountDownloadSingleFileFinish;
class MountDownloadSingleFileFinishAck;

// ===================================================================

class MountDownloadSingleFileTask : public ::google::protobuf::Message {
 public:
  MountDownloadSingleFileTask();
  virtual ~MountDownloadSingleFileTask();
  
  MountDownloadSingleFileTask(const MountDownloadSingleFileTask& from);
  
  inline MountDownloadSingleFileTask& operator=(const MountDownloadSingleFileTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountDownloadSingleFileTask& default_instance();
  
  void Swap(MountDownloadSingleFileTask* other);
  
  // implements Message ----------------------------------------------
  
  MountDownloadSingleFileTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountDownloadSingleFileTask& from);
  void MergeFrom(const MountDownloadSingleFileTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required int32 task_timeout_second = 2;
  inline bool has_task_timeout_second() const;
  inline void clear_task_timeout_second();
  static const int kTaskTimeoutSecondFieldNumber = 2;
  inline ::google::protobuf::int32 task_timeout_second() const;
  inline void set_task_timeout_second(::google::protobuf::int32 value);
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  inline bool has_task_handler() const;
  inline void clear_task_handler();
  static const int kTaskHandlerFieldNumber = 3;
  inline LogExportTask::TaskHandler task_handler() const;
  inline void set_task_handler(LogExportTask::TaskHandler value);
  
  // required bytes task_handler_userid = 4;
  inline bool has_task_handler_userid() const;
  inline void clear_task_handler_userid();
  static const int kTaskHandlerUseridFieldNumber = 4;
  inline const ::std::string& task_handler_userid() const;
  inline void set_task_handler_userid(const ::std::string& value);
  inline void set_task_handler_userid(const char* value);
  inline void set_task_handler_userid(const void* value, size_t size);
  inline ::std::string* mutable_task_handler_userid();
  
  // required bytes mount_root_path = 5;
  inline bool has_mount_root_path() const;
  inline void clear_mount_root_path();
  static const int kMountRootPathFieldNumber = 5;
  inline const ::std::string& mount_root_path() const;
  inline void set_mount_root_path(const ::std::string& value);
  inline void set_mount_root_path(const char* value);
  inline void set_mount_root_path(const void* value, size_t size);
  inline ::std::string* mutable_mount_root_path();
  
  // required bytes the_download_file = 6;
  inline bool has_the_download_file() const;
  inline void clear_the_download_file();
  static const int kTheDownloadFileFieldNumber = 6;
  inline const ::std::string& the_download_file() const;
  inline void set_the_download_file(const ::std::string& value);
  inline void set_the_download_file(const char* value);
  inline void set_the_download_file(const void* value, size_t size);
  inline ::std::string* mutable_the_download_file();
  
  // required int64 filesize_byte = 7;
  inline bool has_filesize_byte() const;
  inline void clear_filesize_byte();
  static const int kFilesizeByteFieldNumber = 7;
  inline ::google::protobuf::int64 filesize_byte() const;
  inline void set_filesize_byte(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountDownloadSingleFileTask)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::google::protobuf::int32 task_timeout_second_;
  int task_handler_;
  ::std::string* task_handler_userid_;
  static const ::std::string _default_task_handler_userid_;
  ::std::string* mount_root_path_;
  static const ::std::string _default_mount_root_path_;
  ::std::string* the_download_file_;
  static const ::std::string _default_the_download_file_;
  ::google::protobuf::int64 filesize_byte_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountDownloadSingleFileTask* default_instance_;
};
// -------------------------------------------------------------------

class MountDownloadSingleFileTaskAck : public ::google::protobuf::Message {
 public:
  MountDownloadSingleFileTaskAck();
  virtual ~MountDownloadSingleFileTaskAck();
  
  MountDownloadSingleFileTaskAck(const MountDownloadSingleFileTaskAck& from);
  
  inline MountDownloadSingleFileTaskAck& operator=(const MountDownloadSingleFileTaskAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountDownloadSingleFileTaskAck& default_instance();
  
  void Swap(MountDownloadSingleFileTaskAck* other);
  
  // implements Message ----------------------------------------------
  
  MountDownloadSingleFileTaskAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountDownloadSingleFileTaskAck& from);
  void MergeFrom(const MountDownloadSingleFileTaskAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 3;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 3;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountDownloadSingleFileTaskAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountDownloadSingleFileTaskAck* default_instance_;
};
// -------------------------------------------------------------------

class MountOpenFile : public ::google::protobuf::Message {
 public:
  MountOpenFile();
  virtual ~MountOpenFile();
  
  MountOpenFile(const MountOpenFile& from);
  
  inline MountOpenFile& operator=(const MountOpenFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountOpenFile& default_instance();
  
  void Swap(MountOpenFile* other);
  
  // implements Message ----------------------------------------------
  
  MountOpenFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountOpenFile& from);
  void MergeFrom(const MountOpenFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bytes the_download_file = 2;
  inline bool has_the_download_file() const;
  inline void clear_the_download_file();
  static const int kTheDownloadFileFieldNumber = 2;
  inline const ::std::string& the_download_file() const;
  inline void set_the_download_file(const ::std::string& value);
  inline void set_the_download_file(const char* value);
  inline void set_the_download_file(const void* value, size_t size);
  inline ::std::string* mutable_the_download_file();
  
  // required int64 filesize_byte = 3;
  inline bool has_filesize_byte() const;
  inline void clear_filesize_byte();
  static const int kFilesizeByteFieldNumber = 3;
  inline ::google::protobuf::int64 filesize_byte() const;
  inline void set_filesize_byte(::google::protobuf::int64 value);
  
  // required bytes lastupdatetime = 4;
  inline bool has_lastupdatetime() const;
  inline void clear_lastupdatetime();
  static const int kLastupdatetimeFieldNumber = 4;
  inline const ::std::string& lastupdatetime() const;
  inline void set_lastupdatetime(const ::std::string& value);
  inline void set_lastupdatetime(const char* value);
  inline void set_lastupdatetime(const void* value, size_t size);
  inline ::std::string* mutable_lastupdatetime();
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountOpenFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::std::string* the_download_file_;
  static const ::std::string _default_the_download_file_;
  ::google::protobuf::int64 filesize_byte_;
  ::std::string* lastupdatetime_;
  static const ::std::string _default_lastupdatetime_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountOpenFile* default_instance_;
};
// -------------------------------------------------------------------

class MountOpenFileAck : public ::google::protobuf::Message {
 public:
  MountOpenFileAck();
  virtual ~MountOpenFileAck();
  
  MountOpenFileAck(const MountOpenFileAck& from);
  
  inline MountOpenFileAck& operator=(const MountOpenFileAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountOpenFileAck& default_instance();
  
  void Swap(MountOpenFileAck* other);
  
  // implements Message ----------------------------------------------
  
  MountOpenFileAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountOpenFileAck& from);
  void MergeFrom(const MountOpenFileAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 2;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 2;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountOpenFileAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountOpenFileAck* default_instance_;
};
// -------------------------------------------------------------------

class MountRequstWriteFileBlock : public ::google::protobuf::Message {
 public:
  MountRequstWriteFileBlock();
  virtual ~MountRequstWriteFileBlock();
  
  MountRequstWriteFileBlock(const MountRequstWriteFileBlock& from);
  
  inline MountRequstWriteFileBlock& operator=(const MountRequstWriteFileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountRequstWriteFileBlock& default_instance();
  
  void Swap(MountRequstWriteFileBlock* other);
  
  // implements Message ----------------------------------------------
  
  MountRequstWriteFileBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountRequstWriteFileBlock& from);
  void MergeFrom(const MountRequstWriteFileBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required int64 block_size_byte = 2;
  inline bool has_block_size_byte() const;
  inline void clear_block_size_byte();
  static const int kBlockSizeByteFieldNumber = 2;
  inline ::google::protobuf::int64 block_size_byte() const;
  inline void set_block_size_byte(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountRequstWriteFileBlock)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::google::protobuf::int64 block_size_byte_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountRequstWriteFileBlock* default_instance_;
};
// -------------------------------------------------------------------

class MountRequstWriteFileBlockAck : public ::google::protobuf::Message {
 public:
  MountRequstWriteFileBlockAck();
  virtual ~MountRequstWriteFileBlockAck();
  
  MountRequstWriteFileBlockAck(const MountRequstWriteFileBlockAck& from);
  
  inline MountRequstWriteFileBlockAck& operator=(const MountRequstWriteFileBlockAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountRequstWriteFileBlockAck& default_instance();
  
  void Swap(MountRequstWriteFileBlockAck* other);
  
  // implements Message ----------------------------------------------
  
  MountRequstWriteFileBlockAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountRequstWriteFileBlockAck& from);
  void MergeFrom(const MountRequstWriteFileBlockAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 2;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 2;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountRequstWriteFileBlockAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountRequstWriteFileBlockAck* default_instance_;
};
// -------------------------------------------------------------------

class MountWriteFileBlockAck : public ::google::protobuf::Message {
 public:
  MountWriteFileBlockAck();
  virtual ~MountWriteFileBlockAck();
  
  MountWriteFileBlockAck(const MountWriteFileBlockAck& from);
  
  inline MountWriteFileBlockAck& operator=(const MountWriteFileBlockAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountWriteFileBlockAck& default_instance();
  
  void Swap(MountWriteFileBlockAck* other);
  
  // implements Message ----------------------------------------------
  
  MountWriteFileBlockAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountWriteFileBlockAck& from);
  void MergeFrom(const MountWriteFileBlockAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 2;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 2;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountWriteFileBlockAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountWriteFileBlockAck* default_instance_;
};
// -------------------------------------------------------------------

class MountFileBlock : public ::google::protobuf::Message {
 public:
  MountFileBlock();
  virtual ~MountFileBlock();
  
  MountFileBlock(const MountFileBlock& from);
  
  inline MountFileBlock& operator=(const MountFileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountFileBlock& default_instance();
  
  void Swap(MountFileBlock* other);
  
  // implements Message ----------------------------------------------
  
  MountFileBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountFileBlock& from);
  void MergeFrom(const MountFileBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bytes block = 2;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 2;
  inline const ::std::string& block() const;
  inline void set_block(const ::std::string& value);
  inline void set_block(const char* value);
  inline void set_block(const void* value, size_t size);
  inline ::std::string* mutable_block();
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountFileBlock)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::std::string* block_;
  static const ::std::string _default_block_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountFileBlock* default_instance_;
};
// -------------------------------------------------------------------

class MountCloseFile : public ::google::protobuf::Message {
 public:
  MountCloseFile();
  virtual ~MountCloseFile();
  
  MountCloseFile(const MountCloseFile& from);
  
  inline MountCloseFile& operator=(const MountCloseFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountCloseFile& default_instance();
  
  void Swap(MountCloseFile* other);
  
  // implements Message ----------------------------------------------
  
  MountCloseFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountCloseFile& from);
  void MergeFrom(const MountCloseFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bytes the_download_file = 2;
  inline bool has_the_download_file() const;
  inline void clear_the_download_file();
  static const int kTheDownloadFileFieldNumber = 2;
  inline const ::std::string& the_download_file() const;
  inline void set_the_download_file(const ::std::string& value);
  inline void set_the_download_file(const char* value);
  inline void set_the_download_file(const void* value, size_t size);
  inline ::std::string* mutable_the_download_file();
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountCloseFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::std::string* the_download_file_;
  static const ::std::string _default_the_download_file_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountCloseFile* default_instance_;
};
// -------------------------------------------------------------------

class MountCloseFileAck : public ::google::protobuf::Message {
 public:
  MountCloseFileAck();
  virtual ~MountCloseFileAck();
  
  MountCloseFileAck(const MountCloseFileAck& from);
  
  inline MountCloseFileAck& operator=(const MountCloseFileAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountCloseFileAck& default_instance();
  
  void Swap(MountCloseFileAck* other);
  
  // implements Message ----------------------------------------------
  
  MountCloseFileAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountCloseFileAck& from);
  void MergeFrom(const MountCloseFileAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 2;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 2;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountCloseFileAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountCloseFileAck* default_instance_;
};
// -------------------------------------------------------------------

class MountDownloadSingleFileFinish : public ::google::protobuf::Message {
 public:
  MountDownloadSingleFileFinish();
  virtual ~MountDownloadSingleFileFinish();
  
  MountDownloadSingleFileFinish(const MountDownloadSingleFileFinish& from);
  
  inline MountDownloadSingleFileFinish& operator=(const MountDownloadSingleFileFinish& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountDownloadSingleFileFinish& default_instance();
  
  void Swap(MountDownloadSingleFileFinish* other);
  
  // implements Message ----------------------------------------------
  
  MountDownloadSingleFileFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountDownloadSingleFileFinish& from);
  void MergeFrom(const MountDownloadSingleFileFinish& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number_msg = 2;
  inline bool has_error_number_msg() const;
  inline void clear_error_number_msg();
  static const int kErrorNumberMsgFieldNumber = 2;
  inline ::google::protobuf::int64 error_number_msg() const;
  inline void set_error_number_msg(::google::protobuf::int64 value);
  
  // optional int64 error_number_client = 3;
  inline bool has_error_number_client() const;
  inline void clear_error_number_client();
  static const int kErrorNumberClientFieldNumber = 3;
  inline ::google::protobuf::int64 error_number_client() const;
  inline void set_error_number_client(::google::protobuf::int64 value);
  
  // optional bytes task_uuid = 4;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 4;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountDownloadSingleFileFinish)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_msg_;
  ::google::protobuf::int64 error_number_client_;
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountDownloadSingleFileFinish* default_instance_;
};
// -------------------------------------------------------------------

class MountDownloadSingleFileFinishAck : public ::google::protobuf::Message {
 public:
  MountDownloadSingleFileFinishAck();
  virtual ~MountDownloadSingleFileFinishAck();
  
  MountDownloadSingleFileFinishAck(const MountDownloadSingleFileFinishAck& from);
  
  inline MountDownloadSingleFileFinishAck& operator=(const MountDownloadSingleFileFinishAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountDownloadSingleFileFinishAck& default_instance();
  
  void Swap(MountDownloadSingleFileFinishAck* other);
  
  // implements Message ----------------------------------------------
  
  MountDownloadSingleFileFinishAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountDownloadSingleFileFinishAck& from);
  void MergeFrom(const MountDownloadSingleFileFinishAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes reserver = 1;
  inline bool has_reserver() const;
  inline void clear_reserver();
  static const int kReserverFieldNumber = 1;
  inline const ::std::string& reserver() const;
  inline void set_reserver(const ::std::string& value);
  inline void set_reserver(const char* value);
  inline void set_reserver(const void* value, size_t size);
  inline ::std::string* mutable_reserver();
  
  // @@protoc_insertion_point(class_scope:file_mount_download_single_file.MountDownloadSingleFileFinishAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* reserver_;
  static const ::std::string _default_reserver_;
  friend void  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountDownloadSingleFileFinishAck* default_instance_;
};
// ===================================================================


// ===================================================================

// MountDownloadSingleFileTask

// required bytes task_uuid = 1;
inline bool MountDownloadSingleFileTask::has_task_uuid() const {
  return _has_bit(0);
}
inline void MountDownloadSingleFileTask::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MountDownloadSingleFileTask::task_uuid() const {
  return *task_uuid_;
}
inline void MountDownloadSingleFileTask::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountDownloadSingleFileTask::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountDownloadSingleFileTask::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountDownloadSingleFileTask::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required int32 task_timeout_second = 2;
inline bool MountDownloadSingleFileTask::has_task_timeout_second() const {
  return _has_bit(1);
}
inline void MountDownloadSingleFileTask::clear_task_timeout_second() {
  task_timeout_second_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 MountDownloadSingleFileTask::task_timeout_second() const {
  return task_timeout_second_;
}
inline void MountDownloadSingleFileTask::set_task_timeout_second(::google::protobuf::int32 value) {
  _set_bit(1);
  task_timeout_second_ = value;
}

// required .LogExportTask.TaskHandler task_handler = 3;
inline bool MountDownloadSingleFileTask::has_task_handler() const {
  return _has_bit(2);
}
inline void MountDownloadSingleFileTask::clear_task_handler() {
  task_handler_ = 1;
  _clear_bit(2);
}
inline LogExportTask::TaskHandler MountDownloadSingleFileTask::task_handler() const {
  return static_cast< LogExportTask::TaskHandler >(task_handler_);
}
inline void MountDownloadSingleFileTask::set_task_handler(LogExportTask::TaskHandler value) {
  GOOGLE_DCHECK(LogExportTask::TaskHandler_IsValid(value));
  _set_bit(2);
  task_handler_ = value;
}

// required bytes task_handler_userid = 4;
inline bool MountDownloadSingleFileTask::has_task_handler_userid() const {
  return _has_bit(3);
}
inline void MountDownloadSingleFileTask::clear_task_handler_userid() {
  if (task_handler_userid_ != &_default_task_handler_userid_) {
    task_handler_userid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MountDownloadSingleFileTask::task_handler_userid() const {
  return *task_handler_userid_;
}
inline void MountDownloadSingleFileTask::set_task_handler_userid(const ::std::string& value) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(value);
}
inline void MountDownloadSingleFileTask::set_task_handler_userid(const char* value) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(value);
}
inline void MountDownloadSingleFileTask::set_task_handler_userid(const void* value, size_t size) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountDownloadSingleFileTask::mutable_task_handler_userid() {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  return task_handler_userid_;
}

// required bytes mount_root_path = 5;
inline bool MountDownloadSingleFileTask::has_mount_root_path() const {
  return _has_bit(4);
}
inline void MountDownloadSingleFileTask::clear_mount_root_path() {
  if (mount_root_path_ != &_default_mount_root_path_) {
    mount_root_path_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& MountDownloadSingleFileTask::mount_root_path() const {
  return *mount_root_path_;
}
inline void MountDownloadSingleFileTask::set_mount_root_path(const ::std::string& value) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(value);
}
inline void MountDownloadSingleFileTask::set_mount_root_path(const char* value) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(value);
}
inline void MountDownloadSingleFileTask::set_mount_root_path(const void* value, size_t size) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountDownloadSingleFileTask::mutable_mount_root_path() {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  return mount_root_path_;
}

// required bytes the_download_file = 6;
inline bool MountDownloadSingleFileTask::has_the_download_file() const {
  return _has_bit(5);
}
inline void MountDownloadSingleFileTask::clear_the_download_file() {
  if (the_download_file_ != &_default_the_download_file_) {
    the_download_file_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& MountDownloadSingleFileTask::the_download_file() const {
  return *the_download_file_;
}
inline void MountDownloadSingleFileTask::set_the_download_file(const ::std::string& value) {
  _set_bit(5);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(value);
}
inline void MountDownloadSingleFileTask::set_the_download_file(const char* value) {
  _set_bit(5);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(value);
}
inline void MountDownloadSingleFileTask::set_the_download_file(const void* value, size_t size) {
  _set_bit(5);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountDownloadSingleFileTask::mutable_the_download_file() {
  _set_bit(5);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  return the_download_file_;
}

// required int64 filesize_byte = 7;
inline bool MountDownloadSingleFileTask::has_filesize_byte() const {
  return _has_bit(6);
}
inline void MountDownloadSingleFileTask::clear_filesize_byte() {
  filesize_byte_ = GOOGLE_LONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::int64 MountDownloadSingleFileTask::filesize_byte() const {
  return filesize_byte_;
}
inline void MountDownloadSingleFileTask::set_filesize_byte(::google::protobuf::int64 value) {
  _set_bit(6);
  filesize_byte_ = value;
}

// -------------------------------------------------------------------

// MountDownloadSingleFileTaskAck

// required bytes task_uuid = 1;
inline bool MountDownloadSingleFileTaskAck::has_task_uuid() const {
  return _has_bit(0);
}
inline void MountDownloadSingleFileTaskAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MountDownloadSingleFileTaskAck::task_uuid() const {
  return *task_uuid_;
}
inline void MountDownloadSingleFileTaskAck::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountDownloadSingleFileTaskAck::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountDownloadSingleFileTaskAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountDownloadSingleFileTaskAck::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool result = 2;
inline bool MountDownloadSingleFileTaskAck::has_result() const {
  return _has_bit(1);
}
inline void MountDownloadSingleFileTaskAck::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool MountDownloadSingleFileTaskAck::result() const {
  return result_;
}
inline void MountDownloadSingleFileTaskAck::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// optional int64 error_number = 3;
inline bool MountDownloadSingleFileTaskAck::has_error_number() const {
  return _has_bit(2);
}
inline void MountDownloadSingleFileTaskAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 MountDownloadSingleFileTaskAck::error_number() const {
  return error_number_;
}
inline void MountDownloadSingleFileTaskAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_ = value;
}

// -------------------------------------------------------------------

// MountOpenFile

// required bytes task_uuid = 1;
inline bool MountOpenFile::has_task_uuid() const {
  return _has_bit(0);
}
inline void MountOpenFile::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MountOpenFile::task_uuid() const {
  return *task_uuid_;
}
inline void MountOpenFile::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountOpenFile::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountOpenFile::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountOpenFile::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bytes the_download_file = 2;
inline bool MountOpenFile::has_the_download_file() const {
  return _has_bit(1);
}
inline void MountOpenFile::clear_the_download_file() {
  if (the_download_file_ != &_default_the_download_file_) {
    the_download_file_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MountOpenFile::the_download_file() const {
  return *the_download_file_;
}
inline void MountOpenFile::set_the_download_file(const ::std::string& value) {
  _set_bit(1);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(value);
}
inline void MountOpenFile::set_the_download_file(const char* value) {
  _set_bit(1);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(value);
}
inline void MountOpenFile::set_the_download_file(const void* value, size_t size) {
  _set_bit(1);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountOpenFile::mutable_the_download_file() {
  _set_bit(1);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  return the_download_file_;
}

// required int64 filesize_byte = 3;
inline bool MountOpenFile::has_filesize_byte() const {
  return _has_bit(2);
}
inline void MountOpenFile::clear_filesize_byte() {
  filesize_byte_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 MountOpenFile::filesize_byte() const {
  return filesize_byte_;
}
inline void MountOpenFile::set_filesize_byte(::google::protobuf::int64 value) {
  _set_bit(2);
  filesize_byte_ = value;
}

// required bytes lastupdatetime = 4;
inline bool MountOpenFile::has_lastupdatetime() const {
  return _has_bit(3);
}
inline void MountOpenFile::clear_lastupdatetime() {
  if (lastupdatetime_ != &_default_lastupdatetime_) {
    lastupdatetime_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MountOpenFile::lastupdatetime() const {
  return *lastupdatetime_;
}
inline void MountOpenFile::set_lastupdatetime(const ::std::string& value) {
  _set_bit(3);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
}
inline void MountOpenFile::set_lastupdatetime(const char* value) {
  _set_bit(3);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
}
inline void MountOpenFile::set_lastupdatetime(const void* value, size_t size) {
  _set_bit(3);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountOpenFile::mutable_lastupdatetime() {
  _set_bit(3);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  return lastupdatetime_;
}

// -------------------------------------------------------------------

// MountOpenFileAck

// required bool result = 1;
inline bool MountOpenFileAck::has_result() const {
  return _has_bit(0);
}
inline void MountOpenFileAck::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool MountOpenFileAck::result() const {
  return result_;
}
inline void MountOpenFileAck::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number = 2;
inline bool MountOpenFileAck::has_error_number() const {
  return _has_bit(1);
}
inline void MountOpenFileAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 MountOpenFileAck::error_number() const {
  return error_number_;
}
inline void MountOpenFileAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_ = value;
}

// -------------------------------------------------------------------

// MountRequstWriteFileBlock

// optional bytes task_uuid = 1;
inline bool MountRequstWriteFileBlock::has_task_uuid() const {
  return _has_bit(0);
}
inline void MountRequstWriteFileBlock::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MountRequstWriteFileBlock::task_uuid() const {
  return *task_uuid_;
}
inline void MountRequstWriteFileBlock::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountRequstWriteFileBlock::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountRequstWriteFileBlock::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountRequstWriteFileBlock::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required int64 block_size_byte = 2;
inline bool MountRequstWriteFileBlock::has_block_size_byte() const {
  return _has_bit(1);
}
inline void MountRequstWriteFileBlock::clear_block_size_byte() {
  block_size_byte_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 MountRequstWriteFileBlock::block_size_byte() const {
  return block_size_byte_;
}
inline void MountRequstWriteFileBlock::set_block_size_byte(::google::protobuf::int64 value) {
  _set_bit(1);
  block_size_byte_ = value;
}

// -------------------------------------------------------------------

// MountRequstWriteFileBlockAck

// required bool result = 1;
inline bool MountRequstWriteFileBlockAck::has_result() const {
  return _has_bit(0);
}
inline void MountRequstWriteFileBlockAck::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool MountRequstWriteFileBlockAck::result() const {
  return result_;
}
inline void MountRequstWriteFileBlockAck::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number = 2;
inline bool MountRequstWriteFileBlockAck::has_error_number() const {
  return _has_bit(1);
}
inline void MountRequstWriteFileBlockAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 MountRequstWriteFileBlockAck::error_number() const {
  return error_number_;
}
inline void MountRequstWriteFileBlockAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_ = value;
}

// -------------------------------------------------------------------

// MountWriteFileBlockAck

// required bool result = 1;
inline bool MountWriteFileBlockAck::has_result() const {
  return _has_bit(0);
}
inline void MountWriteFileBlockAck::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool MountWriteFileBlockAck::result() const {
  return result_;
}
inline void MountWriteFileBlockAck::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number = 2;
inline bool MountWriteFileBlockAck::has_error_number() const {
  return _has_bit(1);
}
inline void MountWriteFileBlockAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 MountWriteFileBlockAck::error_number() const {
  return error_number_;
}
inline void MountWriteFileBlockAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_ = value;
}

// -------------------------------------------------------------------

// MountFileBlock

// required bytes task_uuid = 1;
inline bool MountFileBlock::has_task_uuid() const {
  return _has_bit(0);
}
inline void MountFileBlock::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MountFileBlock::task_uuid() const {
  return *task_uuid_;
}
inline void MountFileBlock::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountFileBlock::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountFileBlock::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountFileBlock::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bytes block = 2;
inline bool MountFileBlock::has_block() const {
  return _has_bit(1);
}
inline void MountFileBlock::clear_block() {
  if (block_ != &_default_block_) {
    block_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MountFileBlock::block() const {
  return *block_;
}
inline void MountFileBlock::set_block(const ::std::string& value) {
  _set_bit(1);
  if (block_ == &_default_block_) {
    block_ = new ::std::string;
  }
  block_->assign(value);
}
inline void MountFileBlock::set_block(const char* value) {
  _set_bit(1);
  if (block_ == &_default_block_) {
    block_ = new ::std::string;
  }
  block_->assign(value);
}
inline void MountFileBlock::set_block(const void* value, size_t size) {
  _set_bit(1);
  if (block_ == &_default_block_) {
    block_ = new ::std::string;
  }
  block_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountFileBlock::mutable_block() {
  _set_bit(1);
  if (block_ == &_default_block_) {
    block_ = new ::std::string;
  }
  return block_;
}

// -------------------------------------------------------------------

// MountCloseFile

// optional bytes task_uuid = 1;
inline bool MountCloseFile::has_task_uuid() const {
  return _has_bit(0);
}
inline void MountCloseFile::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MountCloseFile::task_uuid() const {
  return *task_uuid_;
}
inline void MountCloseFile::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountCloseFile::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountCloseFile::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountCloseFile::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bytes the_download_file = 2;
inline bool MountCloseFile::has_the_download_file() const {
  return _has_bit(1);
}
inline void MountCloseFile::clear_the_download_file() {
  if (the_download_file_ != &_default_the_download_file_) {
    the_download_file_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MountCloseFile::the_download_file() const {
  return *the_download_file_;
}
inline void MountCloseFile::set_the_download_file(const ::std::string& value) {
  _set_bit(1);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(value);
}
inline void MountCloseFile::set_the_download_file(const char* value) {
  _set_bit(1);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(value);
}
inline void MountCloseFile::set_the_download_file(const void* value, size_t size) {
  _set_bit(1);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  the_download_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountCloseFile::mutable_the_download_file() {
  _set_bit(1);
  if (the_download_file_ == &_default_the_download_file_) {
    the_download_file_ = new ::std::string;
  }
  return the_download_file_;
}

// -------------------------------------------------------------------

// MountCloseFileAck

// required bool result = 1;
inline bool MountCloseFileAck::has_result() const {
  return _has_bit(0);
}
inline void MountCloseFileAck::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool MountCloseFileAck::result() const {
  return result_;
}
inline void MountCloseFileAck::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number = 2;
inline bool MountCloseFileAck::has_error_number() const {
  return _has_bit(1);
}
inline void MountCloseFileAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 MountCloseFileAck::error_number() const {
  return error_number_;
}
inline void MountCloseFileAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_ = value;
}

// -------------------------------------------------------------------

// MountDownloadSingleFileFinish

// required bool result = 1;
inline bool MountDownloadSingleFileFinish::has_result() const {
  return _has_bit(0);
}
inline void MountDownloadSingleFileFinish::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool MountDownloadSingleFileFinish::result() const {
  return result_;
}
inline void MountDownloadSingleFileFinish::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number_msg = 2;
inline bool MountDownloadSingleFileFinish::has_error_number_msg() const {
  return _has_bit(1);
}
inline void MountDownloadSingleFileFinish::clear_error_number_msg() {
  error_number_msg_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 MountDownloadSingleFileFinish::error_number_msg() const {
  return error_number_msg_;
}
inline void MountDownloadSingleFileFinish::set_error_number_msg(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_msg_ = value;
}

// optional int64 error_number_client = 3;
inline bool MountDownloadSingleFileFinish::has_error_number_client() const {
  return _has_bit(2);
}
inline void MountDownloadSingleFileFinish::clear_error_number_client() {
  error_number_client_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 MountDownloadSingleFileFinish::error_number_client() const {
  return error_number_client_;
}
inline void MountDownloadSingleFileFinish::set_error_number_client(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_client_ = value;
}

// optional bytes task_uuid = 4;
inline bool MountDownloadSingleFileFinish::has_task_uuid() const {
  return _has_bit(3);
}
inline void MountDownloadSingleFileFinish::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MountDownloadSingleFileFinish::task_uuid() const {
  return *task_uuid_;
}
inline void MountDownloadSingleFileFinish::set_task_uuid(const ::std::string& value) {
  _set_bit(3);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountDownloadSingleFileFinish::set_task_uuid(const char* value) {
  _set_bit(3);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void MountDownloadSingleFileFinish::set_task_uuid(const void* value, size_t size) {
  _set_bit(3);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountDownloadSingleFileFinish::mutable_task_uuid() {
  _set_bit(3);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// -------------------------------------------------------------------

// MountDownloadSingleFileFinishAck

// optional bytes reserver = 1;
inline bool MountDownloadSingleFileFinishAck::has_reserver() const {
  return _has_bit(0);
}
inline void MountDownloadSingleFileFinishAck::clear_reserver() {
  if (reserver_ != &_default_reserver_) {
    reserver_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MountDownloadSingleFileFinishAck::reserver() const {
  return *reserver_;
}
inline void MountDownloadSingleFileFinishAck::set_reserver(const ::std::string& value) {
  _set_bit(0);
  if (reserver_ == &_default_reserver_) {
    reserver_ = new ::std::string;
  }
  reserver_->assign(value);
}
inline void MountDownloadSingleFileFinishAck::set_reserver(const char* value) {
  _set_bit(0);
  if (reserver_ == &_default_reserver_) {
    reserver_ = new ::std::string;
  }
  reserver_->assign(value);
}
inline void MountDownloadSingleFileFinishAck::set_reserver(const void* value, size_t size) {
  _set_bit(0);
  if (reserver_ == &_default_reserver_) {
    reserver_ = new ::std::string;
  }
  reserver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountDownloadSingleFileFinishAck::mutable_reserver() {
  _set_bit(0);
  if (reserver_ == &_default_reserver_) {
    reserver_ = new ::std::string;
  }
  return reserver_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_mount_download_single_file

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_5fmount_5fdownload_5fsingle_5ffile_2eproto__INCLUDED
