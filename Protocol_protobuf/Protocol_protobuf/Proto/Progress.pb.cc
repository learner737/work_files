// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Progress.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Progress {

namespace {

const ::google::protobuf::Descriptor* ProgressInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgressInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProgressHandlerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProgressHandlerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultErrorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultErrorInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProgressType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Progress_2eproto() {
  protobuf_AddDesc_Progress_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Progress.proto");
  GOOGLE_CHECK(file != NULL);
  ProgressInfo_descriptor_ = file->message_type(0);
  static const int ProgressInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressInfo, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressInfo, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressInfo, error_number_),
  };
  ProgressInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgressInfo_descriptor_,
      ProgressInfo::default_instance_,
      ProgressInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgressInfo));
  ProgressHandlerInfo_descriptor_ = file->message_type(1);
  static const int ProgressHandlerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, error_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, progress_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, file_total_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, file_finish_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, mult_error_number_),
  };
  ProgressHandlerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProgressHandlerInfo_descriptor_,
      ProgressHandlerInfo::default_instance_,
      ProgressHandlerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProgressHandlerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProgressHandlerInfo));
  MultErrorInfo_descriptor_ = file->message_type(2);
  static const int MultErrorInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, task_handler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, is_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, is_finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, fileservice_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, handler_errer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, login_uuid_),
  };
  MultErrorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultErrorInfo_descriptor_,
      MultErrorInfo::default_instance_,
      MultErrorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultErrorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultErrorInfo));
  ProgressType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Progress_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgressInfo_descriptor_, &ProgressInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProgressHandlerInfo_descriptor_, &ProgressHandlerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultErrorInfo_descriptor_, &MultErrorInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Progress_2eproto() {
  delete ProgressInfo::default_instance_;
  delete ProgressInfo_reflection_;
  delete ProgressHandlerInfo::default_instance_;
  delete ProgressHandlerInfo_reflection_;
  delete MultErrorInfo::default_instance_;
  delete MultErrorInfo_reflection_;
}

void protobuf_AddDesc_Progress_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::LogExportTask::protobuf_AddDesc_LogExportTask_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Progress.proto\022\010Progress\032\023LogExportTas"
    "k.proto\"Y\n\014ProgressInfo\022\021\n\ttask_uuid\030\001 \002"
    "(\014\022\020\n\010progress\030\002 \002(\002\022\016\n\006result\030\003 \002(\010\022\024\n\014"
    "error_number\030\004 \001(\003\"\364\001\n\023ProgressHandlerIn"
    "fo\022\021\n\ttask_uuid\030\001 \002(\014\022\020\n\010progress\030\002 \002(\002\022"
    "\016\n\006result\030\003 \002(\010\022\024\n\014error_number\030\004 \001(\003\022-\n"
    "\rprogress_type\030\005 \002(\0162\026.Progress.Progress"
    "Type\022\026\n\016file_total_num\030\006 \001(\003\022\027\n\017file_fin"
    "ish_num\030\007 \001(\003\0222\n\021mult_error_number\030\010 \003(\013"
    "2\027.Progress.MultErrorInfo\"\276\001\n\rMultErrorI"
    "nfo\0220\n\014task_handler\030\001 \002(\0162\032.LogExportTas"
    "k.TaskHandler\022\020\n\010is_start\030\002 \002(\010\022\023\n\013is_fi"
    "nished\030\003 \002(\010\022\016\n\006result\030\004 \002(\010\022\031\n\021fileserv"
    "ice_error\030\005 \002(\003\022\025\n\rhandler_errer\030\006 \002(\003\022\022"
    "\n\nlogin_uuid\030\007 \001(\014*J\n\014ProgressType\022!\n\035EN"
    "_PROCESS_TYPE_DOWNLOAD_FILE\020\001\022\027\n\023EN_PROC"
    "ESS_TYPE_ZIP\020\002", 654);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Progress.proto", &protobuf_RegisterTypes);
  ProgressInfo::default_instance_ = new ProgressInfo();
  ProgressHandlerInfo::default_instance_ = new ProgressHandlerInfo();
  MultErrorInfo::default_instance_ = new MultErrorInfo();
  ProgressInfo::default_instance_->InitAsDefaultInstance();
  ProgressHandlerInfo::default_instance_->InitAsDefaultInstance();
  MultErrorInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Progress_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Progress_2eproto {
  StaticDescriptorInitializer_Progress_2eproto() {
    protobuf_AddDesc_Progress_2eproto();
  }
} static_descriptor_initializer_Progress_2eproto_;

const ::google::protobuf::EnumDescriptor* ProgressType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgressType_descriptor_;
}
bool ProgressType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string ProgressInfo::_default_task_uuid_;
#ifndef _MSC_VER
const int ProgressInfo::kTaskUuidFieldNumber;
const int ProgressInfo::kProgressFieldNumber;
const int ProgressInfo::kResultFieldNumber;
const int ProgressInfo::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

ProgressInfo::ProgressInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProgressInfo::InitAsDefaultInstance() {
}

ProgressInfo::ProgressInfo(const ProgressInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProgressInfo::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  progress_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgressInfo::~ProgressInfo() {
  SharedDtor();
}

void ProgressInfo::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void ProgressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgressInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgressInfo_descriptor_;
}

const ProgressInfo& ProgressInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Progress_2eproto();  return *default_instance_;
}

ProgressInfo* ProgressInfo::default_instance_ = NULL;

ProgressInfo* ProgressInfo::New() const {
  return new ProgressInfo;
}

void ProgressInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    progress_ = 0;
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProgressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_progress;
        break;
      }
      
      // required float progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required float progress = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->progress(), output);
  }
  
  // required bool result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }
  
  // optional int64 error_number = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProgressInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required float progress = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->progress(), target);
  }
  
  // required bool result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }
  
  // optional int64 error_number = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProgressInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required float progress = 2;
    if (has_progress()) {
      total_size += 1 + 4;
    }
    
    // required bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 4;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgressInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProgressInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProgressInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProgressInfo::MergeFrom(const ProgressInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_progress(from.progress());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProgressInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressInfo::CopyFrom(const ProgressInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ProgressInfo::Swap(ProgressInfo* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(progress_, other->progress_);
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProgressInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgressInfo_descriptor_;
  metadata.reflection = ProgressInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ProgressHandlerInfo::_default_task_uuid_;
#ifndef _MSC_VER
const int ProgressHandlerInfo::kTaskUuidFieldNumber;
const int ProgressHandlerInfo::kProgressFieldNumber;
const int ProgressHandlerInfo::kResultFieldNumber;
const int ProgressHandlerInfo::kErrorNumberFieldNumber;
const int ProgressHandlerInfo::kProgressTypeFieldNumber;
const int ProgressHandlerInfo::kFileTotalNumFieldNumber;
const int ProgressHandlerInfo::kFileFinishNumFieldNumber;
const int ProgressHandlerInfo::kMultErrorNumberFieldNumber;
#endif  // !_MSC_VER

ProgressHandlerInfo::ProgressHandlerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProgressHandlerInfo::InitAsDefaultInstance() {
}

ProgressHandlerInfo::ProgressHandlerInfo(const ProgressHandlerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProgressHandlerInfo::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  progress_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  progress_type_ = 1;
  file_total_num_ = GOOGLE_LONGLONG(0);
  file_finish_num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProgressHandlerInfo::~ProgressHandlerInfo() {
  SharedDtor();
}

void ProgressHandlerInfo::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void ProgressHandlerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProgressHandlerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProgressHandlerInfo_descriptor_;
}

const ProgressHandlerInfo& ProgressHandlerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Progress_2eproto();  return *default_instance_;
}

ProgressHandlerInfo* ProgressHandlerInfo::default_instance_ = NULL;

ProgressHandlerInfo* ProgressHandlerInfo::New() const {
  return new ProgressHandlerInfo;
}

void ProgressHandlerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    progress_ = 0;
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
    progress_type_ = 1;
    file_total_num_ = GOOGLE_LONGLONG(0);
    file_finish_num_ = GOOGLE_LONGLONG(0);
  }
  mult_error_number_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProgressHandlerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_progress;
        break;
      }
      
      // required float progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // required bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_progress_type;
        break;
      }
      
      // required .Progress.ProgressType progress_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Progress::ProgressType_IsValid(value)) {
            set_progress_type(static_cast< Progress::ProgressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_file_total_num;
        break;
      }
      
      // optional int64 file_total_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_total_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_total_num_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_file_finish_num;
        break;
      }
      
      // optional int64 file_finish_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_finish_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_finish_num_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mult_error_number;
        break;
      }
      
      // repeated .Progress.MultErrorInfo mult_error_number = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mult_error_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mult_error_number()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mult_error_number;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProgressHandlerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required float progress = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->progress(), output);
  }
  
  // required bool result = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }
  
  // optional int64 error_number = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->error_number(), output);
  }
  
  // required .Progress.ProgressType progress_type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->progress_type(), output);
  }
  
  // optional int64 file_total_num = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->file_total_num(), output);
  }
  
  // optional int64 file_finish_num = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->file_finish_num(), output);
  }
  
  // repeated .Progress.MultErrorInfo mult_error_number = 8;
  for (int i = 0; i < this->mult_error_number_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mult_error_number(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProgressHandlerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required float progress = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->progress(), target);
  }
  
  // required bool result = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }
  
  // optional int64 error_number = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->error_number(), target);
  }
  
  // required .Progress.ProgressType progress_type = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->progress_type(), target);
  }
  
  // optional int64 file_total_num = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->file_total_num(), target);
  }
  
  // optional int64 file_finish_num = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->file_finish_num(), target);
  }
  
  // repeated .Progress.MultErrorInfo mult_error_number = 8;
  for (int i = 0; i < this->mult_error_number_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mult_error_number(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProgressHandlerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required float progress = 2;
    if (has_progress()) {
      total_size += 1 + 4;
    }
    
    // required bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 4;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
    // required .Progress.ProgressType progress_type = 5;
    if (has_progress_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress_type());
    }
    
    // optional int64 file_total_num = 6;
    if (has_file_total_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_total_num());
    }
    
    // optional int64 file_finish_num = 7;
    if (has_file_finish_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_finish_num());
    }
    
  }
  // repeated .Progress.MultErrorInfo mult_error_number = 8;
  total_size += 1 * this->mult_error_number_size();
  for (int i = 0; i < this->mult_error_number_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mult_error_number(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProgressHandlerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProgressHandlerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProgressHandlerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProgressHandlerInfo::MergeFrom(const ProgressHandlerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mult_error_number_.MergeFrom(from.mult_error_number_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_progress(from.progress());
    }
    if (from._has_bit(2)) {
      set_result(from.result());
    }
    if (from._has_bit(3)) {
      set_error_number(from.error_number());
    }
    if (from._has_bit(4)) {
      set_progress_type(from.progress_type());
    }
    if (from._has_bit(5)) {
      set_file_total_num(from.file_total_num());
    }
    if (from._has_bit(6)) {
      set_file_finish_num(from.file_finish_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProgressHandlerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgressHandlerInfo::CopyFrom(const ProgressHandlerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgressHandlerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;
  
  for (int i = 0; i < mult_error_number_size(); i++) {
    if (!this->mult_error_number(i).IsInitialized()) return false;
  }
  return true;
}

void ProgressHandlerInfo::Swap(ProgressHandlerInfo* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(progress_, other->progress_);
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(progress_type_, other->progress_type_);
    std::swap(file_total_num_, other->file_total_num_);
    std::swap(file_finish_num_, other->file_finish_num_);
    mult_error_number_.Swap(&other->mult_error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProgressHandlerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProgressHandlerInfo_descriptor_;
  metadata.reflection = ProgressHandlerInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MultErrorInfo::_default_login_uuid_;
#ifndef _MSC_VER
const int MultErrorInfo::kTaskHandlerFieldNumber;
const int MultErrorInfo::kIsStartFieldNumber;
const int MultErrorInfo::kIsFinishedFieldNumber;
const int MultErrorInfo::kResultFieldNumber;
const int MultErrorInfo::kFileserviceErrorFieldNumber;
const int MultErrorInfo::kHandlerErrerFieldNumber;
const int MultErrorInfo::kLoginUuidFieldNumber;
#endif  // !_MSC_VER

MultErrorInfo::MultErrorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultErrorInfo::InitAsDefaultInstance() {
}

MultErrorInfo::MultErrorInfo(const MultErrorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultErrorInfo::SharedCtor() {
  _cached_size_ = 0;
  task_handler_ = 1;
  is_start_ = false;
  is_finished_ = false;
  result_ = false;
  fileservice_error_ = GOOGLE_LONGLONG(0);
  handler_errer_ = GOOGLE_LONGLONG(0);
  login_uuid_ = const_cast< ::std::string*>(&_default_login_uuid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultErrorInfo::~MultErrorInfo() {
  SharedDtor();
}

void MultErrorInfo::SharedDtor() {
  if (login_uuid_ != &_default_login_uuid_) {
    delete login_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MultErrorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultErrorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultErrorInfo_descriptor_;
}

const MultErrorInfo& MultErrorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Progress_2eproto();  return *default_instance_;
}

MultErrorInfo* MultErrorInfo::default_instance_ = NULL;

MultErrorInfo* MultErrorInfo::New() const {
  return new MultErrorInfo;
}

void MultErrorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_handler_ = 1;
    is_start_ = false;
    is_finished_ = false;
    result_ = false;
    fileservice_error_ = GOOGLE_LONGLONG(0);
    handler_errer_ = GOOGLE_LONGLONG(0);
    if (_has_bit(6)) {
      if (login_uuid_ != &_default_login_uuid_) {
        login_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultErrorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .LogExportTask.TaskHandler task_handler = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (LogExportTask::TaskHandler_IsValid(value)) {
            set_task_handler(static_cast< LogExportTask::TaskHandler >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_start;
        break;
      }
      
      // required bool is_start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_start_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_finished;
        break;
      }
      
      // required bool is_finished = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }
      
      // required bool result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fileservice_error;
        break;
      }
      
      // required int64 fileservice_error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileservice_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fileservice_error_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handler_errer;
        break;
      }
      
      // required int64 handler_errer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handler_errer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &handler_errer_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_login_uuid;
        break;
      }
      
      // optional bytes login_uuid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_login_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultErrorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .LogExportTask.TaskHandler task_handler = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->task_handler(), output);
  }
  
  // required bool is_start = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_start(), output);
  }
  
  // required bool is_finished = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_finished(), output);
  }
  
  // required bool result = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->result(), output);
  }
  
  // required int64 fileservice_error = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->fileservice_error(), output);
  }
  
  // required int64 handler_errer = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->handler_errer(), output);
  }
  
  // optional bytes login_uuid = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->login_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultErrorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .LogExportTask.TaskHandler task_handler = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->task_handler(), target);
  }
  
  // required bool is_start = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_start(), target);
  }
  
  // required bool is_finished = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_finished(), target);
  }
  
  // required bool result = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->result(), target);
  }
  
  // required int64 fileservice_error = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->fileservice_error(), target);
  }
  
  // required int64 handler_errer = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->handler_errer(), target);
  }
  
  // optional bytes login_uuid = 7;
  if (_has_bit(6)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->login_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultErrorInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .LogExportTask.TaskHandler task_handler = 1;
    if (has_task_handler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_handler());
    }
    
    // required bool is_start = 2;
    if (has_is_start()) {
      total_size += 1 + 1;
    }
    
    // required bool is_finished = 3;
    if (has_is_finished()) {
      total_size += 1 + 1;
    }
    
    // required bool result = 4;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // required int64 fileservice_error = 5;
    if (has_fileservice_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fileservice_error());
    }
    
    // required int64 handler_errer = 6;
    if (has_handler_errer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->handler_errer());
    }
    
    // optional bytes login_uuid = 7;
    if (has_login_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->login_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultErrorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultErrorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultErrorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultErrorInfo::MergeFrom(const MultErrorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_handler(from.task_handler());
    }
    if (from._has_bit(1)) {
      set_is_start(from.is_start());
    }
    if (from._has_bit(2)) {
      set_is_finished(from.is_finished());
    }
    if (from._has_bit(3)) {
      set_result(from.result());
    }
    if (from._has_bit(4)) {
      set_fileservice_error(from.fileservice_error());
    }
    if (from._has_bit(5)) {
      set_handler_errer(from.handler_errer());
    }
    if (from._has_bit(6)) {
      set_login_uuid(from.login_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultErrorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultErrorInfo::CopyFrom(const MultErrorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultErrorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void MultErrorInfo::Swap(MultErrorInfo* other) {
  if (other != this) {
    std::swap(task_handler_, other->task_handler_);
    std::swap(is_start_, other->is_start_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(result_, other->result_);
    std::swap(fileservice_error_, other->fileservice_error_);
    std::swap(handler_errer_, other->handler_errer_);
    std::swap(login_uuid_, other->login_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultErrorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultErrorInfo_descriptor_;
  metadata.reflection = MultErrorInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Progress

// @@protoc_insertion_point(global_scope)
