// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Progress.proto

#ifndef PROTOBUF_Progress_2eproto__INCLUDED
#define PROTOBUF_Progress_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "LogExportTask.pb.h"
// @@protoc_insertion_point(includes)

namespace Progress {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Progress_2eproto();
void protobuf_AssignDesc_Progress_2eproto();
void protobuf_ShutdownFile_Progress_2eproto();

class ProgressInfo;
class ProgressHandlerInfo;
class MultErrorInfo;

enum ProgressType {
  EN_PROCESS_TYPE_DOWNLOAD_FILE = 1,
  EN_PROCESS_TYPE_ZIP = 2
};
bool ProgressType_IsValid(int value);
const ProgressType ProgressType_MIN = EN_PROCESS_TYPE_DOWNLOAD_FILE;
const ProgressType ProgressType_MAX = EN_PROCESS_TYPE_ZIP;
const int ProgressType_ARRAYSIZE = ProgressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProgressType_descriptor();
inline const ::std::string& ProgressType_Name(ProgressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProgressType_descriptor(), value);
}
inline bool ProgressType_Parse(
    const ::std::string& name, ProgressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProgressType>(
    ProgressType_descriptor(), name, value);
}
// ===================================================================

class ProgressInfo : public ::google::protobuf::Message {
 public:
  ProgressInfo();
  virtual ~ProgressInfo();
  
  ProgressInfo(const ProgressInfo& from);
  
  inline ProgressInfo& operator=(const ProgressInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgressInfo& default_instance();
  
  void Swap(ProgressInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProgressInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProgressInfo& from);
  void MergeFrom(const ProgressInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required float progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline float progress() const;
  inline void set_progress(float value);
  
  // required bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 4;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 4;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:Progress.ProgressInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  float progress_;
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_Progress_2eproto();
  friend void protobuf_AssignDesc_Progress_2eproto();
  friend void protobuf_ShutdownFile_Progress_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ProgressInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProgressHandlerInfo : public ::google::protobuf::Message {
 public:
  ProgressHandlerInfo();
  virtual ~ProgressHandlerInfo();
  
  ProgressHandlerInfo(const ProgressHandlerInfo& from);
  
  inline ProgressHandlerInfo& operator=(const ProgressHandlerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgressHandlerInfo& default_instance();
  
  void Swap(ProgressHandlerInfo* other);
  
  // implements Message ----------------------------------------------
  
  ProgressHandlerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProgressHandlerInfo& from);
  void MergeFrom(const ProgressHandlerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required float progress = 2;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 2;
  inline float progress() const;
  inline void set_progress(float value);
  
  // required bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 4;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 4;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // required .Progress.ProgressType progress_type = 5;
  inline bool has_progress_type() const;
  inline void clear_progress_type();
  static const int kProgressTypeFieldNumber = 5;
  inline Progress::ProgressType progress_type() const;
  inline void set_progress_type(Progress::ProgressType value);
  
  // optional int64 file_total_num = 6;
  inline bool has_file_total_num() const;
  inline void clear_file_total_num();
  static const int kFileTotalNumFieldNumber = 6;
  inline ::google::protobuf::int64 file_total_num() const;
  inline void set_file_total_num(::google::protobuf::int64 value);
  
  // optional int64 file_finish_num = 7;
  inline bool has_file_finish_num() const;
  inline void clear_file_finish_num();
  static const int kFileFinishNumFieldNumber = 7;
  inline ::google::protobuf::int64 file_finish_num() const;
  inline void set_file_finish_num(::google::protobuf::int64 value);
  
  // repeated .Progress.MultErrorInfo mult_error_number = 8;
  inline int mult_error_number_size() const;
  inline void clear_mult_error_number();
  static const int kMultErrorNumberFieldNumber = 8;
  inline const ::Progress::MultErrorInfo& mult_error_number(int index) const;
  inline ::Progress::MultErrorInfo* mutable_mult_error_number(int index);
  inline ::Progress::MultErrorInfo* add_mult_error_number();
  inline const ::google::protobuf::RepeatedPtrField< ::Progress::MultErrorInfo >&
      mult_error_number() const;
  inline ::google::protobuf::RepeatedPtrField< ::Progress::MultErrorInfo >*
      mutable_mult_error_number();
  
  // @@protoc_insertion_point(class_scope:Progress.ProgressHandlerInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  float progress_;
  bool result_;
  ::google::protobuf::int64 error_number_;
  int progress_type_;
  ::google::protobuf::int64 file_total_num_;
  ::google::protobuf::int64 file_finish_num_;
  ::google::protobuf::RepeatedPtrField< ::Progress::MultErrorInfo > mult_error_number_;
  friend void  protobuf_AddDesc_Progress_2eproto();
  friend void protobuf_AssignDesc_Progress_2eproto();
  friend void protobuf_ShutdownFile_Progress_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ProgressHandlerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MultErrorInfo : public ::google::protobuf::Message {
 public:
  MultErrorInfo();
  virtual ~MultErrorInfo();
  
  MultErrorInfo(const MultErrorInfo& from);
  
  inline MultErrorInfo& operator=(const MultErrorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultErrorInfo& default_instance();
  
  void Swap(MultErrorInfo* other);
  
  // implements Message ----------------------------------------------
  
  MultErrorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultErrorInfo& from);
  void MergeFrom(const MultErrorInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .LogExportTask.TaskHandler task_handler = 1;
  inline bool has_task_handler() const;
  inline void clear_task_handler();
  static const int kTaskHandlerFieldNumber = 1;
  inline LogExportTask::TaskHandler task_handler() const;
  inline void set_task_handler(LogExportTask::TaskHandler value);
  
  // required bool is_start = 2;
  inline bool has_is_start() const;
  inline void clear_is_start();
  static const int kIsStartFieldNumber = 2;
  inline bool is_start() const;
  inline void set_is_start(bool value);
  
  // required bool is_finished = 3;
  inline bool has_is_finished() const;
  inline void clear_is_finished();
  static const int kIsFinishedFieldNumber = 3;
  inline bool is_finished() const;
  inline void set_is_finished(bool value);
  
  // required bool result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline bool result() const;
  inline void set_result(bool value);
  
  // required int64 fileservice_error = 5;
  inline bool has_fileservice_error() const;
  inline void clear_fileservice_error();
  static const int kFileserviceErrorFieldNumber = 5;
  inline ::google::protobuf::int64 fileservice_error() const;
  inline void set_fileservice_error(::google::protobuf::int64 value);
  
  // required int64 handler_errer = 6;
  inline bool has_handler_errer() const;
  inline void clear_handler_errer();
  static const int kHandlerErrerFieldNumber = 6;
  inline ::google::protobuf::int64 handler_errer() const;
  inline void set_handler_errer(::google::protobuf::int64 value);
  
  // optional bytes login_uuid = 7;
  inline bool has_login_uuid() const;
  inline void clear_login_uuid();
  static const int kLoginUuidFieldNumber = 7;
  inline const ::std::string& login_uuid() const;
  inline void set_login_uuid(const ::std::string& value);
  inline void set_login_uuid(const char* value);
  inline void set_login_uuid(const void* value, size_t size);
  inline ::std::string* mutable_login_uuid();
  
  // @@protoc_insertion_point(class_scope:Progress.MultErrorInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int task_handler_;
  bool is_start_;
  bool is_finished_;
  bool result_;
  ::google::protobuf::int64 fileservice_error_;
  ::google::protobuf::int64 handler_errer_;
  ::std::string* login_uuid_;
  static const ::std::string _default_login_uuid_;
  friend void  protobuf_AddDesc_Progress_2eproto();
  friend void protobuf_AssignDesc_Progress_2eproto();
  friend void protobuf_ShutdownFile_Progress_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MultErrorInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ProgressInfo

// required bytes task_uuid = 1;
inline bool ProgressInfo::has_task_uuid() const {
  return _has_bit(0);
}
inline void ProgressInfo::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ProgressInfo::task_uuid() const {
  return *task_uuid_;
}
inline void ProgressInfo::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void ProgressInfo::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void ProgressInfo::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProgressInfo::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required float progress = 2;
inline bool ProgressInfo::has_progress() const {
  return _has_bit(1);
}
inline void ProgressInfo::clear_progress() {
  progress_ = 0;
  _clear_bit(1);
}
inline float ProgressInfo::progress() const {
  return progress_;
}
inline void ProgressInfo::set_progress(float value) {
  _set_bit(1);
  progress_ = value;
}

// required bool result = 3;
inline bool ProgressInfo::has_result() const {
  return _has_bit(2);
}
inline void ProgressInfo::clear_result() {
  result_ = false;
  _clear_bit(2);
}
inline bool ProgressInfo::result() const {
  return result_;
}
inline void ProgressInfo::set_result(bool value) {
  _set_bit(2);
  result_ = value;
}

// optional int64 error_number = 4;
inline bool ProgressInfo::has_error_number() const {
  return _has_bit(3);
}
inline void ProgressInfo::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 ProgressInfo::error_number() const {
  return error_number_;
}
inline void ProgressInfo::set_error_number(::google::protobuf::int64 value) {
  _set_bit(3);
  error_number_ = value;
}

// -------------------------------------------------------------------

// ProgressHandlerInfo

// required bytes task_uuid = 1;
inline bool ProgressHandlerInfo::has_task_uuid() const {
  return _has_bit(0);
}
inline void ProgressHandlerInfo::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ProgressHandlerInfo::task_uuid() const {
  return *task_uuid_;
}
inline void ProgressHandlerInfo::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void ProgressHandlerInfo::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void ProgressHandlerInfo::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProgressHandlerInfo::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required float progress = 2;
inline bool ProgressHandlerInfo::has_progress() const {
  return _has_bit(1);
}
inline void ProgressHandlerInfo::clear_progress() {
  progress_ = 0;
  _clear_bit(1);
}
inline float ProgressHandlerInfo::progress() const {
  return progress_;
}
inline void ProgressHandlerInfo::set_progress(float value) {
  _set_bit(1);
  progress_ = value;
}

// required bool result = 3;
inline bool ProgressHandlerInfo::has_result() const {
  return _has_bit(2);
}
inline void ProgressHandlerInfo::clear_result() {
  result_ = false;
  _clear_bit(2);
}
inline bool ProgressHandlerInfo::result() const {
  return result_;
}
inline void ProgressHandlerInfo::set_result(bool value) {
  _set_bit(2);
  result_ = value;
}

// optional int64 error_number = 4;
inline bool ProgressHandlerInfo::has_error_number() const {
  return _has_bit(3);
}
inline void ProgressHandlerInfo::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 ProgressHandlerInfo::error_number() const {
  return error_number_;
}
inline void ProgressHandlerInfo::set_error_number(::google::protobuf::int64 value) {
  _set_bit(3);
  error_number_ = value;
}

// required .Progress.ProgressType progress_type = 5;
inline bool ProgressHandlerInfo::has_progress_type() const {
  return _has_bit(4);
}
inline void ProgressHandlerInfo::clear_progress_type() {
  progress_type_ = 1;
  _clear_bit(4);
}
inline Progress::ProgressType ProgressHandlerInfo::progress_type() const {
  return static_cast< Progress::ProgressType >(progress_type_);
}
inline void ProgressHandlerInfo::set_progress_type(Progress::ProgressType value) {
  GOOGLE_DCHECK(Progress::ProgressType_IsValid(value));
  _set_bit(4);
  progress_type_ = value;
}

// optional int64 file_total_num = 6;
inline bool ProgressHandlerInfo::has_file_total_num() const {
  return _has_bit(5);
}
inline void ProgressHandlerInfo::clear_file_total_num() {
  file_total_num_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 ProgressHandlerInfo::file_total_num() const {
  return file_total_num_;
}
inline void ProgressHandlerInfo::set_file_total_num(::google::protobuf::int64 value) {
  _set_bit(5);
  file_total_num_ = value;
}

// optional int64 file_finish_num = 7;
inline bool ProgressHandlerInfo::has_file_finish_num() const {
  return _has_bit(6);
}
inline void ProgressHandlerInfo::clear_file_finish_num() {
  file_finish_num_ = GOOGLE_LONGLONG(0);
  _clear_bit(6);
}
inline ::google::protobuf::int64 ProgressHandlerInfo::file_finish_num() const {
  return file_finish_num_;
}
inline void ProgressHandlerInfo::set_file_finish_num(::google::protobuf::int64 value) {
  _set_bit(6);
  file_finish_num_ = value;
}

// repeated .Progress.MultErrorInfo mult_error_number = 8;
inline int ProgressHandlerInfo::mult_error_number_size() const {
  return mult_error_number_.size();
}
inline void ProgressHandlerInfo::clear_mult_error_number() {
  mult_error_number_.Clear();
}
inline const ::Progress::MultErrorInfo& ProgressHandlerInfo::mult_error_number(int index) const {
  return mult_error_number_.Get(index);
}
inline ::Progress::MultErrorInfo* ProgressHandlerInfo::mutable_mult_error_number(int index) {
  return mult_error_number_.Mutable(index);
}
inline ::Progress::MultErrorInfo* ProgressHandlerInfo::add_mult_error_number() {
  return mult_error_number_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Progress::MultErrorInfo >&
ProgressHandlerInfo::mult_error_number() const {
  return mult_error_number_;
}
inline ::google::protobuf::RepeatedPtrField< ::Progress::MultErrorInfo >*
ProgressHandlerInfo::mutable_mult_error_number() {
  return &mult_error_number_;
}

// -------------------------------------------------------------------

// MultErrorInfo

// required .LogExportTask.TaskHandler task_handler = 1;
inline bool MultErrorInfo::has_task_handler() const {
  return _has_bit(0);
}
inline void MultErrorInfo::clear_task_handler() {
  task_handler_ = 1;
  _clear_bit(0);
}
inline LogExportTask::TaskHandler MultErrorInfo::task_handler() const {
  return static_cast< LogExportTask::TaskHandler >(task_handler_);
}
inline void MultErrorInfo::set_task_handler(LogExportTask::TaskHandler value) {
  GOOGLE_DCHECK(LogExportTask::TaskHandler_IsValid(value));
  _set_bit(0);
  task_handler_ = value;
}

// required bool is_start = 2;
inline bool MultErrorInfo::has_is_start() const {
  return _has_bit(1);
}
inline void MultErrorInfo::clear_is_start() {
  is_start_ = false;
  _clear_bit(1);
}
inline bool MultErrorInfo::is_start() const {
  return is_start_;
}
inline void MultErrorInfo::set_is_start(bool value) {
  _set_bit(1);
  is_start_ = value;
}

// required bool is_finished = 3;
inline bool MultErrorInfo::has_is_finished() const {
  return _has_bit(2);
}
inline void MultErrorInfo::clear_is_finished() {
  is_finished_ = false;
  _clear_bit(2);
}
inline bool MultErrorInfo::is_finished() const {
  return is_finished_;
}
inline void MultErrorInfo::set_is_finished(bool value) {
  _set_bit(2);
  is_finished_ = value;
}

// required bool result = 4;
inline bool MultErrorInfo::has_result() const {
  return _has_bit(3);
}
inline void MultErrorInfo::clear_result() {
  result_ = false;
  _clear_bit(3);
}
inline bool MultErrorInfo::result() const {
  return result_;
}
inline void MultErrorInfo::set_result(bool value) {
  _set_bit(3);
  result_ = value;
}

// required int64 fileservice_error = 5;
inline bool MultErrorInfo::has_fileservice_error() const {
  return _has_bit(4);
}
inline void MultErrorInfo::clear_fileservice_error() {
  fileservice_error_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 MultErrorInfo::fileservice_error() const {
  return fileservice_error_;
}
inline void MultErrorInfo::set_fileservice_error(::google::protobuf::int64 value) {
  _set_bit(4);
  fileservice_error_ = value;
}

// required int64 handler_errer = 6;
inline bool MultErrorInfo::has_handler_errer() const {
  return _has_bit(5);
}
inline void MultErrorInfo::clear_handler_errer() {
  handler_errer_ = GOOGLE_LONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::int64 MultErrorInfo::handler_errer() const {
  return handler_errer_;
}
inline void MultErrorInfo::set_handler_errer(::google::protobuf::int64 value) {
  _set_bit(5);
  handler_errer_ = value;
}

// optional bytes login_uuid = 7;
inline bool MultErrorInfo::has_login_uuid() const {
  return _has_bit(6);
}
inline void MultErrorInfo::clear_login_uuid() {
  if (login_uuid_ != &_default_login_uuid_) {
    login_uuid_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& MultErrorInfo::login_uuid() const {
  return *login_uuid_;
}
inline void MultErrorInfo::set_login_uuid(const ::std::string& value) {
  _set_bit(6);
  if (login_uuid_ == &_default_login_uuid_) {
    login_uuid_ = new ::std::string;
  }
  login_uuid_->assign(value);
}
inline void MultErrorInfo::set_login_uuid(const char* value) {
  _set_bit(6);
  if (login_uuid_ == &_default_login_uuid_) {
    login_uuid_ = new ::std::string;
  }
  login_uuid_->assign(value);
}
inline void MultErrorInfo::set_login_uuid(const void* value, size_t size) {
  _set_bit(6);
  if (login_uuid_ == &_default_login_uuid_) {
    login_uuid_ = new ::std::string;
  }
  login_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MultErrorInfo::mutable_login_uuid() {
  _set_bit(6);
  if (login_uuid_ == &_default_login_uuid_) {
    login_uuid_ = new ::std::string;
  }
  return login_uuid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Progress

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< Progress::ProgressType>() {
  return Progress::ProgressType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Progress_2eproto__INCLUDED
