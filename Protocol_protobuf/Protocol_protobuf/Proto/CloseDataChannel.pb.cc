// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CloseDataChannel.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CloseDataChannel {

namespace {

const ::google::protobuf::Descriptor* CloseDataChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseDataChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseDataChannelAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseDataChannelAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CloseDataChannel_2eproto() {
  protobuf_AddDesc_CloseDataChannel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CloseDataChannel.proto");
  GOOGLE_CHECK(file != NULL);
  CloseDataChannel_descriptor_ = file->message_type(0);
  static const int CloseDataChannel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannel, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannel, task_uuid_),
  };
  CloseDataChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseDataChannel_descriptor_,
      CloseDataChannel::default_instance_,
      CloseDataChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseDataChannel));
  CloseDataChannelAck_descriptor_ = file->message_type(1);
  static const int CloseDataChannelAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannelAck, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannelAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannelAck, error_number_),
  };
  CloseDataChannelAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseDataChannelAck_descriptor_,
      CloseDataChannelAck::default_instance_,
      CloseDataChannelAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannelAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseDataChannelAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseDataChannelAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CloseDataChannel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseDataChannel_descriptor_, &CloseDataChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseDataChannelAck_descriptor_, &CloseDataChannelAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CloseDataChannel_2eproto() {
  delete CloseDataChannel::default_instance_;
  delete CloseDataChannel_reflection_;
  delete CloseDataChannelAck::default_instance_;
  delete CloseDataChannelAck_reflection_;
}

void protobuf_AddDesc_CloseDataChannel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026CloseDataChannel.proto\022\020CloseDataChann"
    "el\"8\n\020CloseDataChannel\022\021\n\tsignature\030\001 \002("
    "\003\022\021\n\ttask_uuid\030\002 \002(\014\"N\n\023CloseDataChannel"
    "Ack\022\021\n\ttask_uuid\030\001 \002(\014\022\016\n\006result\030\002 \002(\010\022\024"
    "\n\014error_number\030\003 \001(\003", 180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CloseDataChannel.proto", &protobuf_RegisterTypes);
  CloseDataChannel::default_instance_ = new CloseDataChannel();
  CloseDataChannelAck::default_instance_ = new CloseDataChannelAck();
  CloseDataChannel::default_instance_->InitAsDefaultInstance();
  CloseDataChannelAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CloseDataChannel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CloseDataChannel_2eproto {
  StaticDescriptorInitializer_CloseDataChannel_2eproto() {
    protobuf_AddDesc_CloseDataChannel_2eproto();
  }
} static_descriptor_initializer_CloseDataChannel_2eproto_;


// ===================================================================

const ::std::string CloseDataChannel::_default_task_uuid_;
#ifndef _MSC_VER
const int CloseDataChannel::kSignatureFieldNumber;
const int CloseDataChannel::kTaskUuidFieldNumber;
#endif  // !_MSC_VER

CloseDataChannel::CloseDataChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseDataChannel::InitAsDefaultInstance() {
}

CloseDataChannel::CloseDataChannel(const CloseDataChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseDataChannel::SharedCtor() {
  _cached_size_ = 0;
  signature_ = GOOGLE_LONGLONG(0);
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseDataChannel::~CloseDataChannel() {
  SharedDtor();
}

void CloseDataChannel::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void CloseDataChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseDataChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseDataChannel_descriptor_;
}

const CloseDataChannel& CloseDataChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CloseDataChannel_2eproto();  return *default_instance_;
}

CloseDataChannel* CloseDataChannel::default_instance_ = NULL;

CloseDataChannel* CloseDataChannel::New() const {
  return new CloseDataChannel;
}

void CloseDataChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signature_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseDataChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 signature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &signature_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_uuid;
        break;
      }
      
      // required bytes task_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseDataChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 signature = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->signature(), output);
  }
  
  // required bytes task_uuid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->task_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseDataChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 signature = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->signature(), target);
  }
  
  // required bytes task_uuid = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->task_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseDataChannel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 signature = 1;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->signature());
    }
    
    // required bytes task_uuid = 2;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseDataChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseDataChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseDataChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseDataChannel::MergeFrom(const CloseDataChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_signature(from.signature());
    }
    if (from._has_bit(1)) {
      set_task_uuid(from.task_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseDataChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDataChannel::CopyFrom(const CloseDataChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDataChannel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CloseDataChannel::Swap(CloseDataChannel* other) {
  if (other != this) {
    std::swap(signature_, other->signature_);
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseDataChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseDataChannel_descriptor_;
  metadata.reflection = CloseDataChannel_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CloseDataChannelAck::_default_task_uuid_;
#ifndef _MSC_VER
const int CloseDataChannelAck::kTaskUuidFieldNumber;
const int CloseDataChannelAck::kResultFieldNumber;
const int CloseDataChannelAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

CloseDataChannelAck::CloseDataChannelAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseDataChannelAck::InitAsDefaultInstance() {
}

CloseDataChannelAck::CloseDataChannelAck(const CloseDataChannelAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseDataChannelAck::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseDataChannelAck::~CloseDataChannelAck() {
  SharedDtor();
}

void CloseDataChannelAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void CloseDataChannelAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseDataChannelAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseDataChannelAck_descriptor_;
}

const CloseDataChannelAck& CloseDataChannelAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CloseDataChannel_2eproto();  return *default_instance_;
}

CloseDataChannelAck* CloseDataChannelAck::default_instance_ = NULL;

CloseDataChannelAck* CloseDataChannelAck::New() const {
  return new CloseDataChannelAck;
}

void CloseDataChannelAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseDataChannelAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseDataChannelAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseDataChannelAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseDataChannelAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 3;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseDataChannelAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseDataChannelAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseDataChannelAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseDataChannelAck::MergeFrom(const CloseDataChannelAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseDataChannelAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseDataChannelAck::CopyFrom(const CloseDataChannelAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseDataChannelAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CloseDataChannelAck::Swap(CloseDataChannelAck* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseDataChannelAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseDataChannelAck_descriptor_;
  metadata.reflection = CloseDataChannelAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CloseDataChannel

// @@protoc_insertion_point(global_scope)
