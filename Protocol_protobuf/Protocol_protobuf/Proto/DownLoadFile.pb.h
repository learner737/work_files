// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DownLoadFile.proto

#ifndef PROTOBUF_DownLoadFile_2eproto__INCLUDED
#define PROTOBUF_DownLoadFile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace DownLoadFile {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DownLoadFile_2eproto();
void protobuf_AssignDesc_DownLoadFile_2eproto();
void protobuf_ShutdownFile_DownLoadFile_2eproto();

class DownLoadSingleFileAck;
class DownLoadHandlersFileListAck;
class HandlerAck;
class OpenFile;
class OpenFileAck;
class RequstWriteFileBlock;
class RequstWriteFileBlockAck;
class WriteFileBlockAck;
class CloseFile;
class CloseFileAck;
class StopDownLoadHandlersFileListTaskAck;

// ===================================================================

class DownLoadSingleFileAck : public ::google::protobuf::Message {
 public:
  DownLoadSingleFileAck();
  virtual ~DownLoadSingleFileAck();
  
  DownLoadSingleFileAck(const DownLoadSingleFileAck& from);
  
  inline DownLoadSingleFileAck& operator=(const DownLoadSingleFileAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownLoadSingleFileAck& default_instance();
  
  void Swap(DownLoadSingleFileAck* other);
  
  // implements Message ----------------------------------------------
  
  DownLoadSingleFileAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownLoadSingleFileAck& from);
  void MergeFrom(const DownLoadSingleFileAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number_msg = 3;
  inline bool has_error_number_msg() const;
  inline void clear_error_number_msg();
  static const int kErrorNumberMsgFieldNumber = 3;
  inline ::google::protobuf::int64 error_number_msg() const;
  inline void set_error_number_msg(::google::protobuf::int64 value);
  
  // optional int64 error_number_node = 4;
  inline bool has_error_number_node() const;
  inline void clear_error_number_node();
  static const int kErrorNumberNodeFieldNumber = 4;
  inline ::google::protobuf::int64 error_number_node() const;
  inline void set_error_number_node(::google::protobuf::int64 value);
  
  // optional bytes file_path = 5;
  inline bool has_file_path() const;
  inline void clear_file_path();
  static const int kFilePathFieldNumber = 5;
  inline const ::std::string& file_path() const;
  inline void set_file_path(const ::std::string& value);
  inline void set_file_path(const char* value);
  inline void set_file_path(const void* value, size_t size);
  inline ::std::string* mutable_file_path();
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.DownLoadSingleFileAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool result_;
  ::google::protobuf::int64 error_number_msg_;
  ::google::protobuf::int64 error_number_node_;
  ::std::string* file_path_;
  static const ::std::string _default_file_path_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownLoadSingleFileAck* default_instance_;
};
// -------------------------------------------------------------------

class DownLoadHandlersFileListAck : public ::google::protobuf::Message {
 public:
  DownLoadHandlersFileListAck();
  virtual ~DownLoadHandlersFileListAck();
  
  DownLoadHandlersFileListAck(const DownLoadHandlersFileListAck& from);
  
  inline DownLoadHandlersFileListAck& operator=(const DownLoadHandlersFileListAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownLoadHandlersFileListAck& default_instance();
  
  void Swap(DownLoadHandlersFileListAck* other);
  
  // implements Message ----------------------------------------------
  
  DownLoadHandlersFileListAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DownLoadHandlersFileListAck& from);
  void MergeFrom(const DownLoadHandlersFileListAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 3;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 3;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // optional bytes file_path = 4;
  inline bool has_file_path() const;
  inline void clear_file_path();
  static const int kFilePathFieldNumber = 4;
  inline const ::std::string& file_path() const;
  inline void set_file_path(const ::std::string& value);
  inline void set_file_path(const char* value);
  inline void set_file_path(const void* value, size_t size);
  inline ::std::string* mutable_file_path();
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.DownLoadHandlersFileListAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool result_;
  ::google::protobuf::int64 error_number_;
  ::std::string* file_path_;
  static const ::std::string _default_file_path_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DownLoadHandlersFileListAck* default_instance_;
};
// -------------------------------------------------------------------

class HandlerAck : public ::google::protobuf::Message {
 public:
  HandlerAck();
  virtual ~HandlerAck();
  
  HandlerAck(const HandlerAck& from);
  
  inline HandlerAck& operator=(const HandlerAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HandlerAck& default_instance();
  
  void Swap(HandlerAck* other);
  
  // implements Message ----------------------------------------------
  
  HandlerAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HandlerAck& from);
  void MergeFrom(const HandlerAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 3;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 3;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.HandlerAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static HandlerAck* default_instance_;
};
// -------------------------------------------------------------------

class OpenFile : public ::google::protobuf::Message {
 public:
  OpenFile();
  virtual ~OpenFile();
  
  OpenFile(const OpenFile& from);
  
  inline OpenFile& operator=(const OpenFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenFile& default_instance();
  
  void Swap(OpenFile* other);
  
  // implements Message ----------------------------------------------
  
  OpenFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenFile& from);
  void MergeFrom(const OpenFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bytes file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const void* value, size_t size);
  inline ::std::string* mutable_file_name();
  
  // required int64 file_index = 3;
  inline bool has_file_index() const;
  inline void clear_file_index();
  static const int kFileIndexFieldNumber = 3;
  inline ::google::protobuf::int64 file_index() const;
  inline void set_file_index(::google::protobuf::int64 value);
  
  // required int64 filesize_byte = 4;
  inline bool has_filesize_byte() const;
  inline void clear_filesize_byte();
  static const int kFilesizeByteFieldNumber = 4;
  inline ::google::protobuf::int64 filesize_byte() const;
  inline void set_filesize_byte(::google::protobuf::int64 value);
  
  // required bytes lastupdatetime = 5;
  inline bool has_lastupdatetime() const;
  inline void clear_lastupdatetime();
  static const int kLastupdatetimeFieldNumber = 5;
  inline const ::std::string& lastupdatetime() const;
  inline void set_lastupdatetime(const ::std::string& value);
  inline void set_lastupdatetime(const char* value);
  inline void set_lastupdatetime(const void* value, size_t size);
  inline ::std::string* mutable_lastupdatetime();
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.OpenFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::std::string* file_name_;
  static const ::std::string _default_file_name_;
  ::google::protobuf::int64 file_index_;
  ::google::protobuf::int64 filesize_byte_;
  ::std::string* lastupdatetime_;
  static const ::std::string _default_lastupdatetime_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OpenFile* default_instance_;
};
// -------------------------------------------------------------------

class OpenFileAck : public ::google::protobuf::Message {
 public:
  OpenFileAck();
  virtual ~OpenFileAck();
  
  OpenFileAck(const OpenFileAck& from);
  
  inline OpenFileAck& operator=(const OpenFileAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenFileAck& default_instance();
  
  void Swap(OpenFileAck* other);
  
  // implements Message ----------------------------------------------
  
  OpenFileAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenFileAck& from);
  void MergeFrom(const OpenFileAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 2;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 2;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // required bytes task_uuid = 3;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 3;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.OpenFileAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_;
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static OpenFileAck* default_instance_;
};
// -------------------------------------------------------------------

class RequstWriteFileBlock : public ::google::protobuf::Message {
 public:
  RequstWriteFileBlock();
  virtual ~RequstWriteFileBlock();
  
  RequstWriteFileBlock(const RequstWriteFileBlock& from);
  
  inline RequstWriteFileBlock& operator=(const RequstWriteFileBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequstWriteFileBlock& default_instance();
  
  void Swap(RequstWriteFileBlock* other);
  
  // implements Message ----------------------------------------------
  
  RequstWriteFileBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequstWriteFileBlock& from);
  void MergeFrom(const RequstWriteFileBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required int64 block_size_byte = 2;
  inline bool has_block_size_byte() const;
  inline void clear_block_size_byte();
  static const int kBlockSizeByteFieldNumber = 2;
  inline ::google::protobuf::int64 block_size_byte() const;
  inline void set_block_size_byte(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.RequstWriteFileBlock)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::google::protobuf::int64 block_size_byte_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RequstWriteFileBlock* default_instance_;
};
// -------------------------------------------------------------------

class RequstWriteFileBlockAck : public ::google::protobuf::Message {
 public:
  RequstWriteFileBlockAck();
  virtual ~RequstWriteFileBlockAck();
  
  RequstWriteFileBlockAck(const RequstWriteFileBlockAck& from);
  
  inline RequstWriteFileBlockAck& operator=(const RequstWriteFileBlockAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequstWriteFileBlockAck& default_instance();
  
  void Swap(RequstWriteFileBlockAck* other);
  
  // implements Message ----------------------------------------------
  
  RequstWriteFileBlockAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequstWriteFileBlockAck& from);
  void MergeFrom(const RequstWriteFileBlockAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 2;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 2;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // required bytes task_uuid = 3;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 3;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.RequstWriteFileBlockAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_;
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RequstWriteFileBlockAck* default_instance_;
};
// -------------------------------------------------------------------

class WriteFileBlockAck : public ::google::protobuf::Message {
 public:
  WriteFileBlockAck();
  virtual ~WriteFileBlockAck();
  
  WriteFileBlockAck(const WriteFileBlockAck& from);
  
  inline WriteFileBlockAck& operator=(const WriteFileBlockAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WriteFileBlockAck& default_instance();
  
  void Swap(WriteFileBlockAck* other);
  
  // implements Message ----------------------------------------------
  
  WriteFileBlockAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WriteFileBlockAck& from);
  void MergeFrom(const WriteFileBlockAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 2;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 2;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // required bytes task_uuid = 3;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 3;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.WriteFileBlockAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_;
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static WriteFileBlockAck* default_instance_;
};
// -------------------------------------------------------------------

class CloseFile : public ::google::protobuf::Message {
 public:
  CloseFile();
  virtual ~CloseFile();
  
  CloseFile(const CloseFile& from);
  
  inline CloseFile& operator=(const CloseFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseFile& default_instance();
  
  void Swap(CloseFile* other);
  
  // implements Message ----------------------------------------------
  
  CloseFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseFile& from);
  void MergeFrom(const CloseFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bytes file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const void* value, size_t size);
  inline ::std::string* mutable_file_name();
  
  // required int64 file_index = 3;
  inline bool has_file_index() const;
  inline void clear_file_index();
  static const int kFileIndexFieldNumber = 3;
  inline ::google::protobuf::int64 file_index() const;
  inline void set_file_index(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.CloseFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::std::string* file_name_;
  static const ::std::string _default_file_name_;
  ::google::protobuf::int64 file_index_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CloseFile* default_instance_;
};
// -------------------------------------------------------------------

class CloseFileAck : public ::google::protobuf::Message {
 public:
  CloseFileAck();
  virtual ~CloseFileAck();
  
  CloseFileAck(const CloseFileAck& from);
  
  inline CloseFileAck& operator=(const CloseFileAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseFileAck& default_instance();
  
  void Swap(CloseFileAck* other);
  
  // implements Message ----------------------------------------------
  
  CloseFileAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseFileAck& from);
  void MergeFrom(const CloseFileAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 2;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 2;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // required bytes task_uuid = 3;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 3;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.CloseFileAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool result_;
  ::google::protobuf::int64 error_number_;
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CloseFileAck* default_instance_;
};
// -------------------------------------------------------------------

class StopDownLoadHandlersFileListTaskAck : public ::google::protobuf::Message {
 public:
  StopDownLoadHandlersFileListTaskAck();
  virtual ~StopDownLoadHandlersFileListTaskAck();
  
  StopDownLoadHandlersFileListTaskAck(const StopDownLoadHandlersFileListTaskAck& from);
  
  inline StopDownLoadHandlersFileListTaskAck& operator=(const StopDownLoadHandlersFileListTaskAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopDownLoadHandlersFileListTaskAck& default_instance();
  
  void Swap(StopDownLoadHandlersFileListTaskAck* other);
  
  // implements Message ----------------------------------------------
  
  StopDownLoadHandlersFileListTaskAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StopDownLoadHandlersFileListTaskAck& from);
  void MergeFrom(const StopDownLoadHandlersFileListTaskAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 3;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 3;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:DownLoadFile.StopDownLoadHandlersFileListTaskAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_DownLoadFile_2eproto();
  friend void protobuf_AssignDesc_DownLoadFile_2eproto();
  friend void protobuf_ShutdownFile_DownLoadFile_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static StopDownLoadHandlersFileListTaskAck* default_instance_;
};
// ===================================================================


// ===================================================================

// DownLoadSingleFileAck

// required bytes task_uuid = 1;
inline bool DownLoadSingleFileAck::has_task_uuid() const {
  return _has_bit(0);
}
inline void DownLoadSingleFileAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DownLoadSingleFileAck::task_uuid() const {
  return *task_uuid_;
}
inline void DownLoadSingleFileAck::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void DownLoadSingleFileAck::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void DownLoadSingleFileAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownLoadSingleFileAck::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool result = 2;
inline bool DownLoadSingleFileAck::has_result() const {
  return _has_bit(1);
}
inline void DownLoadSingleFileAck::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool DownLoadSingleFileAck::result() const {
  return result_;
}
inline void DownLoadSingleFileAck::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// optional int64 error_number_msg = 3;
inline bool DownLoadSingleFileAck::has_error_number_msg() const {
  return _has_bit(2);
}
inline void DownLoadSingleFileAck::clear_error_number_msg() {
  error_number_msg_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 DownLoadSingleFileAck::error_number_msg() const {
  return error_number_msg_;
}
inline void DownLoadSingleFileAck::set_error_number_msg(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_msg_ = value;
}

// optional int64 error_number_node = 4;
inline bool DownLoadSingleFileAck::has_error_number_node() const {
  return _has_bit(3);
}
inline void DownLoadSingleFileAck::clear_error_number_node() {
  error_number_node_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 DownLoadSingleFileAck::error_number_node() const {
  return error_number_node_;
}
inline void DownLoadSingleFileAck::set_error_number_node(::google::protobuf::int64 value) {
  _set_bit(3);
  error_number_node_ = value;
}

// optional bytes file_path = 5;
inline bool DownLoadSingleFileAck::has_file_path() const {
  return _has_bit(4);
}
inline void DownLoadSingleFileAck::clear_file_path() {
  if (file_path_ != &_default_file_path_) {
    file_path_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& DownLoadSingleFileAck::file_path() const {
  return *file_path_;
}
inline void DownLoadSingleFileAck::set_file_path(const ::std::string& value) {
  _set_bit(4);
  if (file_path_ == &_default_file_path_) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void DownLoadSingleFileAck::set_file_path(const char* value) {
  _set_bit(4);
  if (file_path_ == &_default_file_path_) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void DownLoadSingleFileAck::set_file_path(const void* value, size_t size) {
  _set_bit(4);
  if (file_path_ == &_default_file_path_) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownLoadSingleFileAck::mutable_file_path() {
  _set_bit(4);
  if (file_path_ == &_default_file_path_) {
    file_path_ = new ::std::string;
  }
  return file_path_;
}

// -------------------------------------------------------------------

// DownLoadHandlersFileListAck

// required bytes task_uuid = 1;
inline bool DownLoadHandlersFileListAck::has_task_uuid() const {
  return _has_bit(0);
}
inline void DownLoadHandlersFileListAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DownLoadHandlersFileListAck::task_uuid() const {
  return *task_uuid_;
}
inline void DownLoadHandlersFileListAck::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void DownLoadHandlersFileListAck::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void DownLoadHandlersFileListAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownLoadHandlersFileListAck::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool result = 2;
inline bool DownLoadHandlersFileListAck::has_result() const {
  return _has_bit(1);
}
inline void DownLoadHandlersFileListAck::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool DownLoadHandlersFileListAck::result() const {
  return result_;
}
inline void DownLoadHandlersFileListAck::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// optional int64 error_number = 3;
inline bool DownLoadHandlersFileListAck::has_error_number() const {
  return _has_bit(2);
}
inline void DownLoadHandlersFileListAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 DownLoadHandlersFileListAck::error_number() const {
  return error_number_;
}
inline void DownLoadHandlersFileListAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_ = value;
}

// optional bytes file_path = 4;
inline bool DownLoadHandlersFileListAck::has_file_path() const {
  return _has_bit(3);
}
inline void DownLoadHandlersFileListAck::clear_file_path() {
  if (file_path_ != &_default_file_path_) {
    file_path_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DownLoadHandlersFileListAck::file_path() const {
  return *file_path_;
}
inline void DownLoadHandlersFileListAck::set_file_path(const ::std::string& value) {
  _set_bit(3);
  if (file_path_ == &_default_file_path_) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void DownLoadHandlersFileListAck::set_file_path(const char* value) {
  _set_bit(3);
  if (file_path_ == &_default_file_path_) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void DownLoadHandlersFileListAck::set_file_path(const void* value, size_t size) {
  _set_bit(3);
  if (file_path_ == &_default_file_path_) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DownLoadHandlersFileListAck::mutable_file_path() {
  _set_bit(3);
  if (file_path_ == &_default_file_path_) {
    file_path_ = new ::std::string;
  }
  return file_path_;
}

// -------------------------------------------------------------------

// HandlerAck

// required bytes task_uuid = 1;
inline bool HandlerAck::has_task_uuid() const {
  return _has_bit(0);
}
inline void HandlerAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& HandlerAck::task_uuid() const {
  return *task_uuid_;
}
inline void HandlerAck::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void HandlerAck::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void HandlerAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HandlerAck::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool result = 2;
inline bool HandlerAck::has_result() const {
  return _has_bit(1);
}
inline void HandlerAck::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool HandlerAck::result() const {
  return result_;
}
inline void HandlerAck::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// optional int64 error_number = 3;
inline bool HandlerAck::has_error_number() const {
  return _has_bit(2);
}
inline void HandlerAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 HandlerAck::error_number() const {
  return error_number_;
}
inline void HandlerAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_ = value;
}

// -------------------------------------------------------------------

// OpenFile

// required bytes task_uuid = 1;
inline bool OpenFile::has_task_uuid() const {
  return _has_bit(0);
}
inline void OpenFile::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& OpenFile::task_uuid() const {
  return *task_uuid_;
}
inline void OpenFile::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void OpenFile::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void OpenFile::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpenFile::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bytes file_name = 2;
inline bool OpenFile::has_file_name() const {
  return _has_bit(1);
}
inline void OpenFile::clear_file_name() {
  if (file_name_ != &_default_file_name_) {
    file_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& OpenFile::file_name() const {
  return *file_name_;
}
inline void OpenFile::set_file_name(const ::std::string& value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void OpenFile::set_file_name(const char* value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void OpenFile::set_file_name(const void* value, size_t size) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpenFile::mutable_file_name() {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}

// required int64 file_index = 3;
inline bool OpenFile::has_file_index() const {
  return _has_bit(2);
}
inline void OpenFile::clear_file_index() {
  file_index_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 OpenFile::file_index() const {
  return file_index_;
}
inline void OpenFile::set_file_index(::google::protobuf::int64 value) {
  _set_bit(2);
  file_index_ = value;
}

// required int64 filesize_byte = 4;
inline bool OpenFile::has_filesize_byte() const {
  return _has_bit(3);
}
inline void OpenFile::clear_filesize_byte() {
  filesize_byte_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 OpenFile::filesize_byte() const {
  return filesize_byte_;
}
inline void OpenFile::set_filesize_byte(::google::protobuf::int64 value) {
  _set_bit(3);
  filesize_byte_ = value;
}

// required bytes lastupdatetime = 5;
inline bool OpenFile::has_lastupdatetime() const {
  return _has_bit(4);
}
inline void OpenFile::clear_lastupdatetime() {
  if (lastupdatetime_ != &_default_lastupdatetime_) {
    lastupdatetime_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& OpenFile::lastupdatetime() const {
  return *lastupdatetime_;
}
inline void OpenFile::set_lastupdatetime(const ::std::string& value) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
}
inline void OpenFile::set_lastupdatetime(const char* value) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
}
inline void OpenFile::set_lastupdatetime(const void* value, size_t size) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpenFile::mutable_lastupdatetime() {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  return lastupdatetime_;
}

// -------------------------------------------------------------------

// OpenFileAck

// required bool result = 1;
inline bool OpenFileAck::has_result() const {
  return _has_bit(0);
}
inline void OpenFileAck::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool OpenFileAck::result() const {
  return result_;
}
inline void OpenFileAck::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number = 2;
inline bool OpenFileAck::has_error_number() const {
  return _has_bit(1);
}
inline void OpenFileAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 OpenFileAck::error_number() const {
  return error_number_;
}
inline void OpenFileAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_ = value;
}

// required bytes task_uuid = 3;
inline bool OpenFileAck::has_task_uuid() const {
  return _has_bit(2);
}
inline void OpenFileAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& OpenFileAck::task_uuid() const {
  return *task_uuid_;
}
inline void OpenFileAck::set_task_uuid(const ::std::string& value) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void OpenFileAck::set_task_uuid(const char* value) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void OpenFileAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpenFileAck::mutable_task_uuid() {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// -------------------------------------------------------------------

// RequstWriteFileBlock

// required bytes task_uuid = 1;
inline bool RequstWriteFileBlock::has_task_uuid() const {
  return _has_bit(0);
}
inline void RequstWriteFileBlock::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RequstWriteFileBlock::task_uuid() const {
  return *task_uuid_;
}
inline void RequstWriteFileBlock::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void RequstWriteFileBlock::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void RequstWriteFileBlock::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequstWriteFileBlock::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required int64 block_size_byte = 2;
inline bool RequstWriteFileBlock::has_block_size_byte() const {
  return _has_bit(1);
}
inline void RequstWriteFileBlock::clear_block_size_byte() {
  block_size_byte_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 RequstWriteFileBlock::block_size_byte() const {
  return block_size_byte_;
}
inline void RequstWriteFileBlock::set_block_size_byte(::google::protobuf::int64 value) {
  _set_bit(1);
  block_size_byte_ = value;
}

// -------------------------------------------------------------------

// RequstWriteFileBlockAck

// required bool result = 1;
inline bool RequstWriteFileBlockAck::has_result() const {
  return _has_bit(0);
}
inline void RequstWriteFileBlockAck::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool RequstWriteFileBlockAck::result() const {
  return result_;
}
inline void RequstWriteFileBlockAck::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number = 2;
inline bool RequstWriteFileBlockAck::has_error_number() const {
  return _has_bit(1);
}
inline void RequstWriteFileBlockAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 RequstWriteFileBlockAck::error_number() const {
  return error_number_;
}
inline void RequstWriteFileBlockAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_ = value;
}

// required bytes task_uuid = 3;
inline bool RequstWriteFileBlockAck::has_task_uuid() const {
  return _has_bit(2);
}
inline void RequstWriteFileBlockAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RequstWriteFileBlockAck::task_uuid() const {
  return *task_uuid_;
}
inline void RequstWriteFileBlockAck::set_task_uuid(const ::std::string& value) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void RequstWriteFileBlockAck::set_task_uuid(const char* value) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void RequstWriteFileBlockAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequstWriteFileBlockAck::mutable_task_uuid() {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// -------------------------------------------------------------------

// WriteFileBlockAck

// required bool result = 1;
inline bool WriteFileBlockAck::has_result() const {
  return _has_bit(0);
}
inline void WriteFileBlockAck::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool WriteFileBlockAck::result() const {
  return result_;
}
inline void WriteFileBlockAck::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number = 2;
inline bool WriteFileBlockAck::has_error_number() const {
  return _has_bit(1);
}
inline void WriteFileBlockAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 WriteFileBlockAck::error_number() const {
  return error_number_;
}
inline void WriteFileBlockAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_ = value;
}

// required bytes task_uuid = 3;
inline bool WriteFileBlockAck::has_task_uuid() const {
  return _has_bit(2);
}
inline void WriteFileBlockAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& WriteFileBlockAck::task_uuid() const {
  return *task_uuid_;
}
inline void WriteFileBlockAck::set_task_uuid(const ::std::string& value) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void WriteFileBlockAck::set_task_uuid(const char* value) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void WriteFileBlockAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WriteFileBlockAck::mutable_task_uuid() {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// -------------------------------------------------------------------

// CloseFile

// required bytes task_uuid = 1;
inline bool CloseFile::has_task_uuid() const {
  return _has_bit(0);
}
inline void CloseFile::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CloseFile::task_uuid() const {
  return *task_uuid_;
}
inline void CloseFile::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void CloseFile::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void CloseFile::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CloseFile::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bytes file_name = 2;
inline bool CloseFile::has_file_name() const {
  return _has_bit(1);
}
inline void CloseFile::clear_file_name() {
  if (file_name_ != &_default_file_name_) {
    file_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& CloseFile::file_name() const {
  return *file_name_;
}
inline void CloseFile::set_file_name(const ::std::string& value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void CloseFile::set_file_name(const char* value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void CloseFile::set_file_name(const void* value, size_t size) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CloseFile::mutable_file_name() {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}

// required int64 file_index = 3;
inline bool CloseFile::has_file_index() const {
  return _has_bit(2);
}
inline void CloseFile::clear_file_index() {
  file_index_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 CloseFile::file_index() const {
  return file_index_;
}
inline void CloseFile::set_file_index(::google::protobuf::int64 value) {
  _set_bit(2);
  file_index_ = value;
}

// -------------------------------------------------------------------

// CloseFileAck

// required bool result = 1;
inline bool CloseFileAck::has_result() const {
  return _has_bit(0);
}
inline void CloseFileAck::clear_result() {
  result_ = false;
  _clear_bit(0);
}
inline bool CloseFileAck::result() const {
  return result_;
}
inline void CloseFileAck::set_result(bool value) {
  _set_bit(0);
  result_ = value;
}

// optional int64 error_number = 2;
inline bool CloseFileAck::has_error_number() const {
  return _has_bit(1);
}
inline void CloseFileAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 CloseFileAck::error_number() const {
  return error_number_;
}
inline void CloseFileAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(1);
  error_number_ = value;
}

// required bytes task_uuid = 3;
inline bool CloseFileAck::has_task_uuid() const {
  return _has_bit(2);
}
inline void CloseFileAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CloseFileAck::task_uuid() const {
  return *task_uuid_;
}
inline void CloseFileAck::set_task_uuid(const ::std::string& value) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void CloseFileAck::set_task_uuid(const char* value) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void CloseFileAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CloseFileAck::mutable_task_uuid() {
  _set_bit(2);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// -------------------------------------------------------------------

// StopDownLoadHandlersFileListTaskAck

// required bytes task_uuid = 1;
inline bool StopDownLoadHandlersFileListTaskAck::has_task_uuid() const {
  return _has_bit(0);
}
inline void StopDownLoadHandlersFileListTaskAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& StopDownLoadHandlersFileListTaskAck::task_uuid() const {
  return *task_uuid_;
}
inline void StopDownLoadHandlersFileListTaskAck::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void StopDownLoadHandlersFileListTaskAck::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void StopDownLoadHandlersFileListTaskAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StopDownLoadHandlersFileListTaskAck::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool result = 2;
inline bool StopDownLoadHandlersFileListTaskAck::has_result() const {
  return _has_bit(1);
}
inline void StopDownLoadHandlersFileListTaskAck::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool StopDownLoadHandlersFileListTaskAck::result() const {
  return result_;
}
inline void StopDownLoadHandlersFileListTaskAck::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// optional int64 error_number = 3;
inline bool StopDownLoadHandlersFileListTaskAck::has_error_number() const {
  return _has_bit(2);
}
inline void StopDownLoadHandlersFileListTaskAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 StopDownLoadHandlersFileListTaskAck::error_number() const {
  return error_number_;
}
inline void StopDownLoadHandlersFileListTaskAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DownLoadFile

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DownLoadFile_2eproto__INCLUDED
