// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_mount_get_file_list.proto

#ifndef PROTOBUF_file_5fmount_5fget_5ffile_5flist_2eproto__INCLUDED
#define PROTOBUF_file_5fmount_5fget_5ffile_5flist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "LogExportTask.pb.h"
// @@protoc_insertion_point(includes)

namespace file_mount_get_file_list {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
void protobuf_AssignDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
void protobuf_ShutdownFile_file_5fmount_5fget_5ffile_5flist_2eproto();

class GetFileListTask;
class GetFileListTaskAck;
class GetFileListTaskAckDetail;
class MountFile;

// ===================================================================

class GetFileListTask : public ::google::protobuf::Message {
 public:
  GetFileListTask();
  virtual ~GetFileListTask();
  
  GetFileListTask(const GetFileListTask& from);
  
  inline GetFileListTask& operator=(const GetFileListTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileListTask& default_instance();
  
  void Swap(GetFileListTask* other);
  
  // implements Message ----------------------------------------------
  
  GetFileListTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileListTask& from);
  void MergeFrom(const GetFileListTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required int32 task_timeout_second = 2;
  inline bool has_task_timeout_second() const;
  inline void clear_task_timeout_second();
  static const int kTaskTimeoutSecondFieldNumber = 2;
  inline ::google::protobuf::int32 task_timeout_second() const;
  inline void set_task_timeout_second(::google::protobuf::int32 value);
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  inline bool has_task_handler() const;
  inline void clear_task_handler();
  static const int kTaskHandlerFieldNumber = 3;
  inline LogExportTask::TaskHandler task_handler() const;
  inline void set_task_handler(LogExportTask::TaskHandler value);
  
  // required bytes task_handler_userid = 4;
  inline bool has_task_handler_userid() const;
  inline void clear_task_handler_userid();
  static const int kTaskHandlerUseridFieldNumber = 4;
  inline const ::std::string& task_handler_userid() const;
  inline void set_task_handler_userid(const ::std::string& value);
  inline void set_task_handler_userid(const char* value);
  inline void set_task_handler_userid(const void* value, size_t size);
  inline ::std::string* mutable_task_handler_userid();
  
  // required bytes mount_root_path = 5;
  inline bool has_mount_root_path() const;
  inline void clear_mount_root_path();
  static const int kMountRootPathFieldNumber = 5;
  inline const ::std::string& mount_root_path() const;
  inline void set_mount_root_path(const ::std::string& value);
  inline void set_mount_root_path(const char* value);
  inline void set_mount_root_path(const void* value, size_t size);
  inline ::std::string* mutable_mount_root_path();
  
  // required bytes the_dir_path = 6;
  inline bool has_the_dir_path() const;
  inline void clear_the_dir_path();
  static const int kTheDirPathFieldNumber = 6;
  inline const ::std::string& the_dir_path() const;
  inline void set_the_dir_path(const ::std::string& value);
  inline void set_the_dir_path(const char* value);
  inline void set_the_dir_path(const void* value, size_t size);
  inline ::std::string* mutable_the_dir_path();
  
  // @@protoc_insertion_point(class_scope:file_mount_get_file_list.GetFileListTask)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  ::google::protobuf::int32 task_timeout_second_;
  int task_handler_;
  ::std::string* task_handler_userid_;
  static const ::std::string _default_task_handler_userid_;
  ::std::string* mount_root_path_;
  static const ::std::string _default_mount_root_path_;
  ::std::string* the_dir_path_;
  static const ::std::string _default_the_dir_path_;
  friend void  protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fget_5ffile_5flist_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFileListTask* default_instance_;
};
// -------------------------------------------------------------------

class GetFileListTaskAck : public ::google::protobuf::Message {
 public:
  GetFileListTaskAck();
  virtual ~GetFileListTaskAck();
  
  GetFileListTaskAck(const GetFileListTaskAck& from);
  
  inline GetFileListTaskAck& operator=(const GetFileListTaskAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileListTaskAck& default_instance();
  
  void Swap(GetFileListTaskAck* other);
  
  // implements Message ----------------------------------------------
  
  GetFileListTaskAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileListTaskAck& from);
  void MergeFrom(const GetFileListTaskAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number = 3;
  inline bool has_error_number() const;
  inline void clear_error_number();
  static const int kErrorNumberFieldNumber = 3;
  inline ::google::protobuf::int64 error_number() const;
  inline void set_error_number(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:file_mount_get_file_list.GetFileListTaskAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool result_;
  ::google::protobuf::int64 error_number_;
  friend void  protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fget_5ffile_5flist_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFileListTaskAck* default_instance_;
};
// -------------------------------------------------------------------

class GetFileListTaskAckDetail : public ::google::protobuf::Message {
 public:
  GetFileListTaskAckDetail();
  virtual ~GetFileListTaskAckDetail();
  
  GetFileListTaskAckDetail(const GetFileListTaskAckDetail& from);
  
  inline GetFileListTaskAckDetail& operator=(const GetFileListTaskAckDetail& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFileListTaskAckDetail& default_instance();
  
  void Swap(GetFileListTaskAckDetail* other);
  
  // implements Message ----------------------------------------------
  
  GetFileListTaskAckDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFileListTaskAckDetail& from);
  void MergeFrom(const GetFileListTaskAckDetail& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool finish = 2;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 2;
  inline bool finish() const;
  inline void set_finish(bool value);
  
  // required bool result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number_msg = 4;
  inline bool has_error_number_msg() const;
  inline void clear_error_number_msg();
  static const int kErrorNumberMsgFieldNumber = 4;
  inline ::google::protobuf::int64 error_number_msg() const;
  inline void set_error_number_msg(::google::protobuf::int64 value);
  
  // optional int64 error_number_client = 5;
  inline bool has_error_number_client() const;
  inline void clear_error_number_client();
  static const int kErrorNumberClientFieldNumber = 5;
  inline ::google::protobuf::int64 error_number_client() const;
  inline void set_error_number_client(::google::protobuf::int64 value);
  
  // repeated .file_mount_get_file_list.MountFile file_list = 6;
  inline int file_list_size() const;
  inline void clear_file_list();
  static const int kFileListFieldNumber = 6;
  inline const ::file_mount_get_file_list::MountFile& file_list(int index) const;
  inline ::file_mount_get_file_list::MountFile* mutable_file_list(int index);
  inline ::file_mount_get_file_list::MountFile* add_file_list();
  inline const ::google::protobuf::RepeatedPtrField< ::file_mount_get_file_list::MountFile >&
      file_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::file_mount_get_file_list::MountFile >*
      mutable_file_list();
  
  // @@protoc_insertion_point(class_scope:file_mount_get_file_list.GetFileListTaskAckDetail)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool finish_;
  bool result_;
  ::google::protobuf::int64 error_number_msg_;
  ::google::protobuf::int64 error_number_client_;
  ::google::protobuf::RepeatedPtrField< ::file_mount_get_file_list::MountFile > file_list_;
  friend void  protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fget_5ffile_5flist_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetFileListTaskAckDetail* default_instance_;
};
// -------------------------------------------------------------------

class MountFile : public ::google::protobuf::Message {
 public:
  MountFile();
  virtual ~MountFile();
  
  MountFile(const MountFile& from);
  
  inline MountFile& operator=(const MountFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MountFile& default_instance();
  
  void Swap(MountFile* other);
  
  // implements Message ----------------------------------------------
  
  MountFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MountFile& from);
  void MergeFrom(const MountFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool is_dir = 1;
  inline bool has_is_dir() const;
  inline void clear_is_dir();
  static const int kIsDirFieldNumber = 1;
  inline bool is_dir() const;
  inline void set_is_dir(bool value);
  
  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional bytes path = 3;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const void* value, size_t size);
  inline ::std::string* mutable_path();
  
  // required int64 size_byte = 4;
  inline bool has_size_byte() const;
  inline void clear_size_byte();
  static const int kSizeByteFieldNumber = 4;
  inline ::google::protobuf::int64 size_byte() const;
  inline void set_size_byte(::google::protobuf::int64 value);
  
  // required bytes lastupdatetime = 5;
  inline bool has_lastupdatetime() const;
  inline void clear_lastupdatetime();
  static const int kLastupdatetimeFieldNumber = 5;
  inline const ::std::string& lastupdatetime() const;
  inline void set_lastupdatetime(const ::std::string& value);
  inline void set_lastupdatetime(const char* value);
  inline void set_lastupdatetime(const void* value, size_t size);
  inline ::std::string* mutable_lastupdatetime();
  
  // optional bytes mount_root_path = 6;
  inline bool has_mount_root_path() const;
  inline void clear_mount_root_path();
  static const int kMountRootPathFieldNumber = 6;
  inline const ::std::string& mount_root_path() const;
  inline void set_mount_root_path(const ::std::string& value);
  inline void set_mount_root_path(const char* value);
  inline void set_mount_root_path(const void* value, size_t size);
  inline ::std::string* mutable_mount_root_path();
  
  // @@protoc_insertion_point(class_scope:file_mount_get_file_list.MountFile)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool is_dir_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::std::string* path_;
  static const ::std::string _default_path_;
  ::google::protobuf::int64 size_byte_;
  ::std::string* lastupdatetime_;
  static const ::std::string _default_lastupdatetime_;
  ::std::string* mount_root_path_;
  static const ::std::string _default_mount_root_path_;
  friend void  protobuf_AddDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  friend void protobuf_AssignDesc_file_5fmount_5fget_5ffile_5flist_2eproto();
  friend void protobuf_ShutdownFile_file_5fmount_5fget_5ffile_5flist_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MountFile* default_instance_;
};
// ===================================================================


// ===================================================================

// GetFileListTask

// required bytes task_uuid = 1;
inline bool GetFileListTask::has_task_uuid() const {
  return _has_bit(0);
}
inline void GetFileListTask::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetFileListTask::task_uuid() const {
  return *task_uuid_;
}
inline void GetFileListTask::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void GetFileListTask::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void GetFileListTask::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileListTask::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required int32 task_timeout_second = 2;
inline bool GetFileListTask::has_task_timeout_second() const {
  return _has_bit(1);
}
inline void GetFileListTask::clear_task_timeout_second() {
  task_timeout_second_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 GetFileListTask::task_timeout_second() const {
  return task_timeout_second_;
}
inline void GetFileListTask::set_task_timeout_second(::google::protobuf::int32 value) {
  _set_bit(1);
  task_timeout_second_ = value;
}

// required .LogExportTask.TaskHandler task_handler = 3;
inline bool GetFileListTask::has_task_handler() const {
  return _has_bit(2);
}
inline void GetFileListTask::clear_task_handler() {
  task_handler_ = 1;
  _clear_bit(2);
}
inline LogExportTask::TaskHandler GetFileListTask::task_handler() const {
  return static_cast< LogExportTask::TaskHandler >(task_handler_);
}
inline void GetFileListTask::set_task_handler(LogExportTask::TaskHandler value) {
  GOOGLE_DCHECK(LogExportTask::TaskHandler_IsValid(value));
  _set_bit(2);
  task_handler_ = value;
}

// required bytes task_handler_userid = 4;
inline bool GetFileListTask::has_task_handler_userid() const {
  return _has_bit(3);
}
inline void GetFileListTask::clear_task_handler_userid() {
  if (task_handler_userid_ != &_default_task_handler_userid_) {
    task_handler_userid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& GetFileListTask::task_handler_userid() const {
  return *task_handler_userid_;
}
inline void GetFileListTask::set_task_handler_userid(const ::std::string& value) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(value);
}
inline void GetFileListTask::set_task_handler_userid(const char* value) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(value);
}
inline void GetFileListTask::set_task_handler_userid(const void* value, size_t size) {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  task_handler_userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileListTask::mutable_task_handler_userid() {
  _set_bit(3);
  if (task_handler_userid_ == &_default_task_handler_userid_) {
    task_handler_userid_ = new ::std::string;
  }
  return task_handler_userid_;
}

// required bytes mount_root_path = 5;
inline bool GetFileListTask::has_mount_root_path() const {
  return _has_bit(4);
}
inline void GetFileListTask::clear_mount_root_path() {
  if (mount_root_path_ != &_default_mount_root_path_) {
    mount_root_path_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& GetFileListTask::mount_root_path() const {
  return *mount_root_path_;
}
inline void GetFileListTask::set_mount_root_path(const ::std::string& value) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(value);
}
inline void GetFileListTask::set_mount_root_path(const char* value) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(value);
}
inline void GetFileListTask::set_mount_root_path(const void* value, size_t size) {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileListTask::mutable_mount_root_path() {
  _set_bit(4);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  return mount_root_path_;
}

// required bytes the_dir_path = 6;
inline bool GetFileListTask::has_the_dir_path() const {
  return _has_bit(5);
}
inline void GetFileListTask::clear_the_dir_path() {
  if (the_dir_path_ != &_default_the_dir_path_) {
    the_dir_path_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& GetFileListTask::the_dir_path() const {
  return *the_dir_path_;
}
inline void GetFileListTask::set_the_dir_path(const ::std::string& value) {
  _set_bit(5);
  if (the_dir_path_ == &_default_the_dir_path_) {
    the_dir_path_ = new ::std::string;
  }
  the_dir_path_->assign(value);
}
inline void GetFileListTask::set_the_dir_path(const char* value) {
  _set_bit(5);
  if (the_dir_path_ == &_default_the_dir_path_) {
    the_dir_path_ = new ::std::string;
  }
  the_dir_path_->assign(value);
}
inline void GetFileListTask::set_the_dir_path(const void* value, size_t size) {
  _set_bit(5);
  if (the_dir_path_ == &_default_the_dir_path_) {
    the_dir_path_ = new ::std::string;
  }
  the_dir_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileListTask::mutable_the_dir_path() {
  _set_bit(5);
  if (the_dir_path_ == &_default_the_dir_path_) {
    the_dir_path_ = new ::std::string;
  }
  return the_dir_path_;
}

// -------------------------------------------------------------------

// GetFileListTaskAck

// required bytes task_uuid = 1;
inline bool GetFileListTaskAck::has_task_uuid() const {
  return _has_bit(0);
}
inline void GetFileListTaskAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetFileListTaskAck::task_uuid() const {
  return *task_uuid_;
}
inline void GetFileListTaskAck::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void GetFileListTaskAck::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void GetFileListTaskAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileListTaskAck::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool result = 2;
inline bool GetFileListTaskAck::has_result() const {
  return _has_bit(1);
}
inline void GetFileListTaskAck::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool GetFileListTaskAck::result() const {
  return result_;
}
inline void GetFileListTaskAck::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// optional int64 error_number = 3;
inline bool GetFileListTaskAck::has_error_number() const {
  return _has_bit(2);
}
inline void GetFileListTaskAck::clear_error_number() {
  error_number_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 GetFileListTaskAck::error_number() const {
  return error_number_;
}
inline void GetFileListTaskAck::set_error_number(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_ = value;
}

// -------------------------------------------------------------------

// GetFileListTaskAckDetail

// required bytes task_uuid = 1;
inline bool GetFileListTaskAckDetail::has_task_uuid() const {
  return _has_bit(0);
}
inline void GetFileListTaskAckDetail::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetFileListTaskAckDetail::task_uuid() const {
  return *task_uuid_;
}
inline void GetFileListTaskAckDetail::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void GetFileListTaskAckDetail::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void GetFileListTaskAckDetail::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFileListTaskAckDetail::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool finish = 2;
inline bool GetFileListTaskAckDetail::has_finish() const {
  return _has_bit(1);
}
inline void GetFileListTaskAckDetail::clear_finish() {
  finish_ = false;
  _clear_bit(1);
}
inline bool GetFileListTaskAckDetail::finish() const {
  return finish_;
}
inline void GetFileListTaskAckDetail::set_finish(bool value) {
  _set_bit(1);
  finish_ = value;
}

// required bool result = 3;
inline bool GetFileListTaskAckDetail::has_result() const {
  return _has_bit(2);
}
inline void GetFileListTaskAckDetail::clear_result() {
  result_ = false;
  _clear_bit(2);
}
inline bool GetFileListTaskAckDetail::result() const {
  return result_;
}
inline void GetFileListTaskAckDetail::set_result(bool value) {
  _set_bit(2);
  result_ = value;
}

// optional int64 error_number_msg = 4;
inline bool GetFileListTaskAckDetail::has_error_number_msg() const {
  return _has_bit(3);
}
inline void GetFileListTaskAckDetail::clear_error_number_msg() {
  error_number_msg_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 GetFileListTaskAckDetail::error_number_msg() const {
  return error_number_msg_;
}
inline void GetFileListTaskAckDetail::set_error_number_msg(::google::protobuf::int64 value) {
  _set_bit(3);
  error_number_msg_ = value;
}

// optional int64 error_number_client = 5;
inline bool GetFileListTaskAckDetail::has_error_number_client() const {
  return _has_bit(4);
}
inline void GetFileListTaskAckDetail::clear_error_number_client() {
  error_number_client_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 GetFileListTaskAckDetail::error_number_client() const {
  return error_number_client_;
}
inline void GetFileListTaskAckDetail::set_error_number_client(::google::protobuf::int64 value) {
  _set_bit(4);
  error_number_client_ = value;
}

// repeated .file_mount_get_file_list.MountFile file_list = 6;
inline int GetFileListTaskAckDetail::file_list_size() const {
  return file_list_.size();
}
inline void GetFileListTaskAckDetail::clear_file_list() {
  file_list_.Clear();
}
inline const ::file_mount_get_file_list::MountFile& GetFileListTaskAckDetail::file_list(int index) const {
  return file_list_.Get(index);
}
inline ::file_mount_get_file_list::MountFile* GetFileListTaskAckDetail::mutable_file_list(int index) {
  return file_list_.Mutable(index);
}
inline ::file_mount_get_file_list::MountFile* GetFileListTaskAckDetail::add_file_list() {
  return file_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::file_mount_get_file_list::MountFile >&
GetFileListTaskAckDetail::file_list() const {
  return file_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::file_mount_get_file_list::MountFile >*
GetFileListTaskAckDetail::mutable_file_list() {
  return &file_list_;
}

// -------------------------------------------------------------------

// MountFile

// required bool is_dir = 1;
inline bool MountFile::has_is_dir() const {
  return _has_bit(0);
}
inline void MountFile::clear_is_dir() {
  is_dir_ = false;
  _clear_bit(0);
}
inline bool MountFile::is_dir() const {
  return is_dir_;
}
inline void MountFile::set_is_dir(bool value) {
  _set_bit(0);
  is_dir_ = value;
}

// required bytes name = 2;
inline bool MountFile::has_name() const {
  return _has_bit(1);
}
inline void MountFile::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MountFile::name() const {
  return *name_;
}
inline void MountFile::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MountFile::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MountFile::set_name(const void* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountFile::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional bytes path = 3;
inline bool MountFile::has_path() const {
  return _has_bit(2);
}
inline void MountFile::clear_path() {
  if (path_ != &_default_path_) {
    path_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& MountFile::path() const {
  return *path_;
}
inline void MountFile::set_path(const ::std::string& value) {
  _set_bit(2);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void MountFile::set_path(const char* value) {
  _set_bit(2);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void MountFile::set_path(const void* value, size_t size) {
  _set_bit(2);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountFile::mutable_path() {
  _set_bit(2);
  if (path_ == &_default_path_) {
    path_ = new ::std::string;
  }
  return path_;
}

// required int64 size_byte = 4;
inline bool MountFile::has_size_byte() const {
  return _has_bit(3);
}
inline void MountFile::clear_size_byte() {
  size_byte_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 MountFile::size_byte() const {
  return size_byte_;
}
inline void MountFile::set_size_byte(::google::protobuf::int64 value) {
  _set_bit(3);
  size_byte_ = value;
}

// required bytes lastupdatetime = 5;
inline bool MountFile::has_lastupdatetime() const {
  return _has_bit(4);
}
inline void MountFile::clear_lastupdatetime() {
  if (lastupdatetime_ != &_default_lastupdatetime_) {
    lastupdatetime_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& MountFile::lastupdatetime() const {
  return *lastupdatetime_;
}
inline void MountFile::set_lastupdatetime(const ::std::string& value) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
}
inline void MountFile::set_lastupdatetime(const char* value) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
}
inline void MountFile::set_lastupdatetime(const void* value, size_t size) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountFile::mutable_lastupdatetime() {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  return lastupdatetime_;
}

// optional bytes mount_root_path = 6;
inline bool MountFile::has_mount_root_path() const {
  return _has_bit(5);
}
inline void MountFile::clear_mount_root_path() {
  if (mount_root_path_ != &_default_mount_root_path_) {
    mount_root_path_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& MountFile::mount_root_path() const {
  return *mount_root_path_;
}
inline void MountFile::set_mount_root_path(const ::std::string& value) {
  _set_bit(5);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(value);
}
inline void MountFile::set_mount_root_path(const char* value) {
  _set_bit(5);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(value);
}
inline void MountFile::set_mount_root_path(const void* value, size_t size) {
  _set_bit(5);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  mount_root_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MountFile::mutable_mount_root_path() {
  _set_bit(5);
  if (mount_root_path_ == &_default_mount_root_path_) {
    mount_root_path_ = new ::std::string;
  }
  return mount_root_path_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_mount_get_file_list

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_file_5fmount_5fget_5ffile_5flist_2eproto__INCLUDED
