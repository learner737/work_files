// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_mount_download_single_file.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace file_mount_download_single_file {

namespace {

const ::google::protobuf::Descriptor* MountDownloadSingleFileTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountDownloadSingleFileTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountDownloadSingleFileTaskAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountDownloadSingleFileTaskAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountOpenFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountOpenFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountOpenFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountOpenFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountRequstWriteFileBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountRequstWriteFileBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountRequstWriteFileBlockAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountRequstWriteFileBlockAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountWriteFileBlockAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountWriteFileBlockAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountFileBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountFileBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountCloseFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountCloseFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountCloseFileAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountCloseFileAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountDownloadSingleFileFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountDownloadSingleFileFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountDownloadSingleFileFinishAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountDownloadSingleFileFinishAck_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto() {
  protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "file_mount_download_single_file.proto");
  GOOGLE_CHECK(file != NULL);
  MountDownloadSingleFileTask_descriptor_ = file->message_type(0);
  static const int MountDownloadSingleFileTask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, task_timeout_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, task_handler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, task_handler_userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, mount_root_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, the_download_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, filesize_byte_),
  };
  MountDownloadSingleFileTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountDownloadSingleFileTask_descriptor_,
      MountDownloadSingleFileTask::default_instance_,
      MountDownloadSingleFileTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountDownloadSingleFileTask));
  MountDownloadSingleFileTaskAck_descriptor_ = file->message_type(1);
  static const int MountDownloadSingleFileTaskAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTaskAck, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTaskAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTaskAck, error_number_),
  };
  MountDownloadSingleFileTaskAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountDownloadSingleFileTaskAck_descriptor_,
      MountDownloadSingleFileTaskAck::default_instance_,
      MountDownloadSingleFileTaskAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTaskAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileTaskAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountDownloadSingleFileTaskAck));
  MountOpenFile_descriptor_ = file->message_type(2);
  static const int MountOpenFile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFile, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFile, the_download_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFile, filesize_byte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFile, lastupdatetime_),
  };
  MountOpenFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountOpenFile_descriptor_,
      MountOpenFile::default_instance_,
      MountOpenFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountOpenFile));
  MountOpenFileAck_descriptor_ = file->message_type(3);
  static const int MountOpenFileAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFileAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFileAck, error_number_),
  };
  MountOpenFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountOpenFileAck_descriptor_,
      MountOpenFileAck::default_instance_,
      MountOpenFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountOpenFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountOpenFileAck));
  MountRequstWriteFileBlock_descriptor_ = file->message_type(4);
  static const int MountRequstWriteFileBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountRequstWriteFileBlock, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountRequstWriteFileBlock, block_size_byte_),
  };
  MountRequstWriteFileBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountRequstWriteFileBlock_descriptor_,
      MountRequstWriteFileBlock::default_instance_,
      MountRequstWriteFileBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountRequstWriteFileBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountRequstWriteFileBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountRequstWriteFileBlock));
  MountRequstWriteFileBlockAck_descriptor_ = file->message_type(5);
  static const int MountRequstWriteFileBlockAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountRequstWriteFileBlockAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountRequstWriteFileBlockAck, error_number_),
  };
  MountRequstWriteFileBlockAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountRequstWriteFileBlockAck_descriptor_,
      MountRequstWriteFileBlockAck::default_instance_,
      MountRequstWriteFileBlockAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountRequstWriteFileBlockAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountRequstWriteFileBlockAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountRequstWriteFileBlockAck));
  MountWriteFileBlockAck_descriptor_ = file->message_type(6);
  static const int MountWriteFileBlockAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountWriteFileBlockAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountWriteFileBlockAck, error_number_),
  };
  MountWriteFileBlockAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountWriteFileBlockAck_descriptor_,
      MountWriteFileBlockAck::default_instance_,
      MountWriteFileBlockAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountWriteFileBlockAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountWriteFileBlockAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountWriteFileBlockAck));
  MountFileBlock_descriptor_ = file->message_type(7);
  static const int MountFileBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFileBlock, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFileBlock, block_),
  };
  MountFileBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountFileBlock_descriptor_,
      MountFileBlock::default_instance_,
      MountFileBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFileBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFileBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountFileBlock));
  MountCloseFile_descriptor_ = file->message_type(8);
  static const int MountCloseFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountCloseFile, task_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountCloseFile, the_download_file_),
  };
  MountCloseFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountCloseFile_descriptor_,
      MountCloseFile::default_instance_,
      MountCloseFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountCloseFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountCloseFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountCloseFile));
  MountCloseFileAck_descriptor_ = file->message_type(9);
  static const int MountCloseFileAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountCloseFileAck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountCloseFileAck, error_number_),
  };
  MountCloseFileAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountCloseFileAck_descriptor_,
      MountCloseFileAck::default_instance_,
      MountCloseFileAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountCloseFileAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountCloseFileAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountCloseFileAck));
  MountDownloadSingleFileFinish_descriptor_ = file->message_type(10);
  static const int MountDownloadSingleFileFinish_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinish, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinish, error_number_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinish, error_number_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinish, task_uuid_),
  };
  MountDownloadSingleFileFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountDownloadSingleFileFinish_descriptor_,
      MountDownloadSingleFileFinish::default_instance_,
      MountDownloadSingleFileFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountDownloadSingleFileFinish));
  MountDownloadSingleFileFinishAck_descriptor_ = file->message_type(11);
  static const int MountDownloadSingleFileFinishAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinishAck, reserver_),
  };
  MountDownloadSingleFileFinishAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountDownloadSingleFileFinishAck_descriptor_,
      MountDownloadSingleFileFinishAck::default_instance_,
      MountDownloadSingleFileFinishAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinishAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDownloadSingleFileFinishAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountDownloadSingleFileFinishAck));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountDownloadSingleFileTask_descriptor_, &MountDownloadSingleFileTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountDownloadSingleFileTaskAck_descriptor_, &MountDownloadSingleFileTaskAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountOpenFile_descriptor_, &MountOpenFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountOpenFileAck_descriptor_, &MountOpenFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountRequstWriteFileBlock_descriptor_, &MountRequstWriteFileBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountRequstWriteFileBlockAck_descriptor_, &MountRequstWriteFileBlockAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountWriteFileBlockAck_descriptor_, &MountWriteFileBlockAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountFileBlock_descriptor_, &MountFileBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountCloseFile_descriptor_, &MountCloseFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountCloseFileAck_descriptor_, &MountCloseFileAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountDownloadSingleFileFinish_descriptor_, &MountDownloadSingleFileFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountDownloadSingleFileFinishAck_descriptor_, &MountDownloadSingleFileFinishAck::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto() {
  delete MountDownloadSingleFileTask::default_instance_;
  delete MountDownloadSingleFileTask_reflection_;
  delete MountDownloadSingleFileTaskAck::default_instance_;
  delete MountDownloadSingleFileTaskAck_reflection_;
  delete MountOpenFile::default_instance_;
  delete MountOpenFile_reflection_;
  delete MountOpenFileAck::default_instance_;
  delete MountOpenFileAck_reflection_;
  delete MountRequstWriteFileBlock::default_instance_;
  delete MountRequstWriteFileBlock_reflection_;
  delete MountRequstWriteFileBlockAck::default_instance_;
  delete MountRequstWriteFileBlockAck_reflection_;
  delete MountWriteFileBlockAck::default_instance_;
  delete MountWriteFileBlockAck_reflection_;
  delete MountFileBlock::default_instance_;
  delete MountFileBlock_reflection_;
  delete MountCloseFile::default_instance_;
  delete MountCloseFile_reflection_;
  delete MountCloseFileAck::default_instance_;
  delete MountCloseFileAck_reflection_;
  delete MountDownloadSingleFileFinish::default_instance_;
  delete MountDownloadSingleFileFinish_reflection_;
  delete MountDownloadSingleFileFinishAck::default_instance_;
  delete MountDownloadSingleFileFinishAck_reflection_;
}

void protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::LogExportTask::protobuf_AddDesc_LogExportTask_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%file_mount_download_single_file.proto\022"
    "\037file_mount_download_single_file\032\023LogExp"
    "ortTask.proto\"\347\001\n\033MountDownloadSingleFil"
    "eTask\022\021\n\ttask_uuid\030\001 \002(\014\022\033\n\023task_timeout"
    "_second\030\002 \002(\005\0220\n\014task_handler\030\003 \002(\0162\032.Lo"
    "gExportTask.TaskHandler\022\033\n\023task_handler_"
    "userid\030\004 \002(\014\022\027\n\017mount_root_path\030\005 \002(\014\022\031\n"
    "\021the_download_file\030\006 \002(\014\022\025\n\rfilesize_byt"
    "e\030\007 \002(\003\"Y\n\036MountDownloadSingleFileTaskAc"
    "k\022\021\n\ttask_uuid\030\001 \002(\014\022\016\n\006result\030\002 \002(\010\022\024\n\014"
    "error_number\030\003 \001(\003\"l\n\rMountOpenFile\022\021\n\tt"
    "ask_uuid\030\001 \002(\014\022\031\n\021the_download_file\030\002 \002("
    "\014\022\025\n\rfilesize_byte\030\003 \002(\003\022\026\n\016lastupdateti"
    "me\030\004 \002(\014\"8\n\020MountOpenFileAck\022\016\n\006result\030\001"
    " \002(\010\022\024\n\014error_number\030\002 \001(\003\"G\n\031MountRequs"
    "tWriteFileBlock\022\021\n\ttask_uuid\030\001 \001(\014\022\027\n\017bl"
    "ock_size_byte\030\002 \002(\003\"D\n\034MountRequstWriteF"
    "ileBlockAck\022\016\n\006result\030\001 \002(\010\022\024\n\014error_num"
    "ber\030\002 \001(\003\">\n\026MountWriteFileBlockAck\022\016\n\006r"
    "esult\030\001 \002(\010\022\024\n\014error_number\030\002 \001(\003\"2\n\016Mou"
    "ntFileBlock\022\021\n\ttask_uuid\030\001 \002(\014\022\r\n\005block\030"
    "\002 \002(\014\">\n\016MountCloseFile\022\021\n\ttask_uuid\030\001 \001"
    "(\014\022\031\n\021the_download_file\030\002 \002(\014\"9\n\021MountCl"
    "oseFileAck\022\016\n\006result\030\001 \002(\010\022\024\n\014error_numb"
    "er\030\002 \001(\003\"y\n\035MountDownloadSingleFileFinis"
    "h\022\016\n\006result\030\001 \002(\010\022\030\n\020error_number_msg\030\002 "
    "\001(\003\022\033\n\023error_number_client\030\003 \001(\003\022\021\n\ttask"
    "_uuid\030\004 \001(\014\"4\n MountDownloadSingleFileFi"
    "nishAck\022\020\n\010reserver\030\001 \001(\014", 1145);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file_mount_download_single_file.proto", &protobuf_RegisterTypes);
  MountDownloadSingleFileTask::default_instance_ = new MountDownloadSingleFileTask();
  MountDownloadSingleFileTaskAck::default_instance_ = new MountDownloadSingleFileTaskAck();
  MountOpenFile::default_instance_ = new MountOpenFile();
  MountOpenFileAck::default_instance_ = new MountOpenFileAck();
  MountRequstWriteFileBlock::default_instance_ = new MountRequstWriteFileBlock();
  MountRequstWriteFileBlockAck::default_instance_ = new MountRequstWriteFileBlockAck();
  MountWriteFileBlockAck::default_instance_ = new MountWriteFileBlockAck();
  MountFileBlock::default_instance_ = new MountFileBlock();
  MountCloseFile::default_instance_ = new MountCloseFile();
  MountCloseFileAck::default_instance_ = new MountCloseFileAck();
  MountDownloadSingleFileFinish::default_instance_ = new MountDownloadSingleFileFinish();
  MountDownloadSingleFileFinishAck::default_instance_ = new MountDownloadSingleFileFinishAck();
  MountDownloadSingleFileTask::default_instance_->InitAsDefaultInstance();
  MountDownloadSingleFileTaskAck::default_instance_->InitAsDefaultInstance();
  MountOpenFile::default_instance_->InitAsDefaultInstance();
  MountOpenFileAck::default_instance_->InitAsDefaultInstance();
  MountRequstWriteFileBlock::default_instance_->InitAsDefaultInstance();
  MountRequstWriteFileBlockAck::default_instance_->InitAsDefaultInstance();
  MountWriteFileBlockAck::default_instance_->InitAsDefaultInstance();
  MountFileBlock::default_instance_->InitAsDefaultInstance();
  MountCloseFile::default_instance_->InitAsDefaultInstance();
  MountCloseFileAck::default_instance_->InitAsDefaultInstance();
  MountDownloadSingleFileFinish::default_instance_->InitAsDefaultInstance();
  MountDownloadSingleFileFinishAck::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_file_5fmount_5fdownload_5fsingle_5ffile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_file_5fmount_5fdownload_5fsingle_5ffile_2eproto {
  StaticDescriptorInitializer_file_5fmount_5fdownload_5fsingle_5ffile_2eproto() {
    protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();
  }
} static_descriptor_initializer_file_5fmount_5fdownload_5fsingle_5ffile_2eproto_;


// ===================================================================

const ::std::string MountDownloadSingleFileTask::_default_task_uuid_;
const ::std::string MountDownloadSingleFileTask::_default_task_handler_userid_;
const ::std::string MountDownloadSingleFileTask::_default_mount_root_path_;
const ::std::string MountDownloadSingleFileTask::_default_the_download_file_;
#ifndef _MSC_VER
const int MountDownloadSingleFileTask::kTaskUuidFieldNumber;
const int MountDownloadSingleFileTask::kTaskTimeoutSecondFieldNumber;
const int MountDownloadSingleFileTask::kTaskHandlerFieldNumber;
const int MountDownloadSingleFileTask::kTaskHandlerUseridFieldNumber;
const int MountDownloadSingleFileTask::kMountRootPathFieldNumber;
const int MountDownloadSingleFileTask::kTheDownloadFileFieldNumber;
const int MountDownloadSingleFileTask::kFilesizeByteFieldNumber;
#endif  // !_MSC_VER

MountDownloadSingleFileTask::MountDownloadSingleFileTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountDownloadSingleFileTask::InitAsDefaultInstance() {
}

MountDownloadSingleFileTask::MountDownloadSingleFileTask(const MountDownloadSingleFileTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountDownloadSingleFileTask::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  task_timeout_second_ = 0;
  task_handler_ = 1;
  task_handler_userid_ = const_cast< ::std::string*>(&_default_task_handler_userid_);
  mount_root_path_ = const_cast< ::std::string*>(&_default_mount_root_path_);
  the_download_file_ = const_cast< ::std::string*>(&_default_the_download_file_);
  filesize_byte_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountDownloadSingleFileTask::~MountDownloadSingleFileTask() {
  SharedDtor();
}

void MountDownloadSingleFileTask::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (task_handler_userid_ != &_default_task_handler_userid_) {
    delete task_handler_userid_;
  }
  if (mount_root_path_ != &_default_mount_root_path_) {
    delete mount_root_path_;
  }
  if (the_download_file_ != &_default_the_download_file_) {
    delete the_download_file_;
  }
  if (this != default_instance_) {
  }
}

void MountDownloadSingleFileTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountDownloadSingleFileTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountDownloadSingleFileTask_descriptor_;
}

const MountDownloadSingleFileTask& MountDownloadSingleFileTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountDownloadSingleFileTask* MountDownloadSingleFileTask::default_instance_ = NULL;

MountDownloadSingleFileTask* MountDownloadSingleFileTask::New() const {
  return new MountDownloadSingleFileTask;
}

void MountDownloadSingleFileTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    task_timeout_second_ = 0;
    task_handler_ = 1;
    if (_has_bit(3)) {
      if (task_handler_userid_ != &_default_task_handler_userid_) {
        task_handler_userid_->clear();
      }
    }
    if (_has_bit(4)) {
      if (mount_root_path_ != &_default_mount_root_path_) {
        mount_root_path_->clear();
      }
    }
    if (_has_bit(5)) {
      if (the_download_file_ != &_default_the_download_file_) {
        the_download_file_->clear();
      }
    }
    filesize_byte_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountDownloadSingleFileTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_timeout_second;
        break;
      }
      
      // required int32 task_timeout_second = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_timeout_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_timeout_second_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_handler;
        break;
      }
      
      // required .LogExportTask.TaskHandler task_handler = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_handler:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (LogExportTask::TaskHandler_IsValid(value)) {
            set_task_handler(static_cast< LogExportTask::TaskHandler >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_handler_userid;
        break;
      }
      
      // required bytes task_handler_userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_handler_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_handler_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mount_root_path;
        break;
      }
      
      // required bytes mount_root_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount_root_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mount_root_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_the_download_file;
        break;
      }
      
      // required bytes the_download_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_the_download_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_the_download_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_filesize_byte;
        break;
      }
      
      // required int64 filesize_byte = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesize_byte_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountDownloadSingleFileTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->task_timeout_second(), output);
  }
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->task_handler(), output);
  }
  
  // required bytes task_handler_userid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->task_handler_userid(), output);
  }
  
  // required bytes mount_root_path = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->mount_root_path(), output);
  }
  
  // required bytes the_download_file = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->the_download_file(), output);
  }
  
  // required int64 filesize_byte = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->filesize_byte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountDownloadSingleFileTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required int32 task_timeout_second = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->task_timeout_second(), target);
  }
  
  // required .LogExportTask.TaskHandler task_handler = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->task_handler(), target);
  }
  
  // required bytes task_handler_userid = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->task_handler_userid(), target);
  }
  
  // required bytes mount_root_path = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->mount_root_path(), target);
  }
  
  // required bytes the_download_file = 6;
  if (_has_bit(5)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->the_download_file(), target);
  }
  
  // required int64 filesize_byte = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->filesize_byte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountDownloadSingleFileTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required int32 task_timeout_second = 2;
    if (has_task_timeout_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_timeout_second());
    }
    
    // required .LogExportTask.TaskHandler task_handler = 3;
    if (has_task_handler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_handler());
    }
    
    // required bytes task_handler_userid = 4;
    if (has_task_handler_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_handler_userid());
    }
    
    // required bytes mount_root_path = 5;
    if (has_mount_root_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mount_root_path());
    }
    
    // required bytes the_download_file = 6;
    if (has_the_download_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->the_download_file());
    }
    
    // required int64 filesize_byte = 7;
    if (has_filesize_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesize_byte());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountDownloadSingleFileTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountDownloadSingleFileTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountDownloadSingleFileTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountDownloadSingleFileTask::MergeFrom(const MountDownloadSingleFileTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_task_timeout_second(from.task_timeout_second());
    }
    if (from._has_bit(2)) {
      set_task_handler(from.task_handler());
    }
    if (from._has_bit(3)) {
      set_task_handler_userid(from.task_handler_userid());
    }
    if (from._has_bit(4)) {
      set_mount_root_path(from.mount_root_path());
    }
    if (from._has_bit(5)) {
      set_the_download_file(from.the_download_file());
    }
    if (from._has_bit(6)) {
      set_filesize_byte(from.filesize_byte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountDownloadSingleFileTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountDownloadSingleFileTask::CopyFrom(const MountDownloadSingleFileTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountDownloadSingleFileTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void MountDownloadSingleFileTask::Swap(MountDownloadSingleFileTask* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(task_timeout_second_, other->task_timeout_second_);
    std::swap(task_handler_, other->task_handler_);
    std::swap(task_handler_userid_, other->task_handler_userid_);
    std::swap(mount_root_path_, other->mount_root_path_);
    std::swap(the_download_file_, other->the_download_file_);
    std::swap(filesize_byte_, other->filesize_byte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountDownloadSingleFileTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountDownloadSingleFileTask_descriptor_;
  metadata.reflection = MountDownloadSingleFileTask_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MountDownloadSingleFileTaskAck::_default_task_uuid_;
#ifndef _MSC_VER
const int MountDownloadSingleFileTaskAck::kTaskUuidFieldNumber;
const int MountDownloadSingleFileTaskAck::kResultFieldNumber;
const int MountDownloadSingleFileTaskAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

MountDownloadSingleFileTaskAck::MountDownloadSingleFileTaskAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountDownloadSingleFileTaskAck::InitAsDefaultInstance() {
}

MountDownloadSingleFileTaskAck::MountDownloadSingleFileTaskAck(const MountDownloadSingleFileTaskAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountDownloadSingleFileTaskAck::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountDownloadSingleFileTaskAck::~MountDownloadSingleFileTaskAck() {
  SharedDtor();
}

void MountDownloadSingleFileTaskAck::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MountDownloadSingleFileTaskAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountDownloadSingleFileTaskAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountDownloadSingleFileTaskAck_descriptor_;
}

const MountDownloadSingleFileTaskAck& MountDownloadSingleFileTaskAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountDownloadSingleFileTaskAck* MountDownloadSingleFileTaskAck::default_instance_ = NULL;

MountDownloadSingleFileTaskAck* MountDownloadSingleFileTaskAck::New() const {
  return new MountDownloadSingleFileTaskAck;
}

void MountDownloadSingleFileTaskAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountDownloadSingleFileTaskAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }
      
      // required bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountDownloadSingleFileTaskAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountDownloadSingleFileTaskAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bool result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }
  
  // optional int64 error_number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountDownloadSingleFileTaskAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 3;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountDownloadSingleFileTaskAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountDownloadSingleFileTaskAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountDownloadSingleFileTaskAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountDownloadSingleFileTaskAck::MergeFrom(const MountDownloadSingleFileTaskAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_result(from.result());
    }
    if (from._has_bit(2)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountDownloadSingleFileTaskAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountDownloadSingleFileTaskAck::CopyFrom(const MountDownloadSingleFileTaskAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountDownloadSingleFileTaskAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MountDownloadSingleFileTaskAck::Swap(MountDownloadSingleFileTaskAck* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountDownloadSingleFileTaskAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountDownloadSingleFileTaskAck_descriptor_;
  metadata.reflection = MountDownloadSingleFileTaskAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MountOpenFile::_default_task_uuid_;
const ::std::string MountOpenFile::_default_the_download_file_;
const ::std::string MountOpenFile::_default_lastupdatetime_;
#ifndef _MSC_VER
const int MountOpenFile::kTaskUuidFieldNumber;
const int MountOpenFile::kTheDownloadFileFieldNumber;
const int MountOpenFile::kFilesizeByteFieldNumber;
const int MountOpenFile::kLastupdatetimeFieldNumber;
#endif  // !_MSC_VER

MountOpenFile::MountOpenFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountOpenFile::InitAsDefaultInstance() {
}

MountOpenFile::MountOpenFile(const MountOpenFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountOpenFile::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  the_download_file_ = const_cast< ::std::string*>(&_default_the_download_file_);
  filesize_byte_ = GOOGLE_LONGLONG(0);
  lastupdatetime_ = const_cast< ::std::string*>(&_default_lastupdatetime_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountOpenFile::~MountOpenFile() {
  SharedDtor();
}

void MountOpenFile::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (the_download_file_ != &_default_the_download_file_) {
    delete the_download_file_;
  }
  if (lastupdatetime_ != &_default_lastupdatetime_) {
    delete lastupdatetime_;
  }
  if (this != default_instance_) {
  }
}

void MountOpenFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountOpenFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountOpenFile_descriptor_;
}

const MountOpenFile& MountOpenFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountOpenFile* MountOpenFile::default_instance_ = NULL;

MountOpenFile* MountOpenFile::New() const {
  return new MountOpenFile;
}

void MountOpenFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (the_download_file_ != &_default_the_download_file_) {
        the_download_file_->clear();
      }
    }
    filesize_byte_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (lastupdatetime_ != &_default_lastupdatetime_) {
        lastupdatetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountOpenFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_the_download_file;
        break;
      }
      
      // required bytes the_download_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_the_download_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_the_download_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesize_byte;
        break;
      }
      
      // required int64 filesize_byte = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesize_byte_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lastupdatetime;
        break;
      }
      
      // required bytes lastupdatetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastupdatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lastupdatetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountOpenFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bytes the_download_file = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->the_download_file(), output);
  }
  
  // required int64 filesize_byte = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->filesize_byte(), output);
  }
  
  // required bytes lastupdatetime = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->lastupdatetime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountOpenFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bytes the_download_file = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->the_download_file(), target);
  }
  
  // required int64 filesize_byte = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->filesize_byte(), target);
  }
  
  // required bytes lastupdatetime = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->lastupdatetime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountOpenFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bytes the_download_file = 2;
    if (has_the_download_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->the_download_file());
    }
    
    // required int64 filesize_byte = 3;
    if (has_filesize_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->filesize_byte());
    }
    
    // required bytes lastupdatetime = 4;
    if (has_lastupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lastupdatetime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountOpenFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountOpenFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountOpenFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountOpenFile::MergeFrom(const MountOpenFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_the_download_file(from.the_download_file());
    }
    if (from._has_bit(2)) {
      set_filesize_byte(from.filesize_byte());
    }
    if (from._has_bit(3)) {
      set_lastupdatetime(from.lastupdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountOpenFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountOpenFile::CopyFrom(const MountOpenFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountOpenFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MountOpenFile::Swap(MountOpenFile* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(the_download_file_, other->the_download_file_);
    std::swap(filesize_byte_, other->filesize_byte_);
    std::swap(lastupdatetime_, other->lastupdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountOpenFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountOpenFile_descriptor_;
  metadata.reflection = MountOpenFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountOpenFileAck::kResultFieldNumber;
const int MountOpenFileAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

MountOpenFileAck::MountOpenFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountOpenFileAck::InitAsDefaultInstance() {
}

MountOpenFileAck::MountOpenFileAck(const MountOpenFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountOpenFileAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountOpenFileAck::~MountOpenFileAck() {
  SharedDtor();
}

void MountOpenFileAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountOpenFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountOpenFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountOpenFileAck_descriptor_;
}

const MountOpenFileAck& MountOpenFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountOpenFileAck* MountOpenFileAck::default_instance_ = NULL;

MountOpenFileAck* MountOpenFileAck::New() const {
  return new MountOpenFileAck;
}

void MountOpenFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountOpenFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountOpenFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountOpenFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountOpenFileAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 2;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountOpenFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountOpenFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountOpenFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountOpenFileAck::MergeFrom(const MountOpenFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountOpenFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountOpenFileAck::CopyFrom(const MountOpenFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountOpenFileAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MountOpenFileAck::Swap(MountOpenFileAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountOpenFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountOpenFileAck_descriptor_;
  metadata.reflection = MountOpenFileAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MountRequstWriteFileBlock::_default_task_uuid_;
#ifndef _MSC_VER
const int MountRequstWriteFileBlock::kTaskUuidFieldNumber;
const int MountRequstWriteFileBlock::kBlockSizeByteFieldNumber;
#endif  // !_MSC_VER

MountRequstWriteFileBlock::MountRequstWriteFileBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountRequstWriteFileBlock::InitAsDefaultInstance() {
}

MountRequstWriteFileBlock::MountRequstWriteFileBlock(const MountRequstWriteFileBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountRequstWriteFileBlock::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  block_size_byte_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountRequstWriteFileBlock::~MountRequstWriteFileBlock() {
  SharedDtor();
}

void MountRequstWriteFileBlock::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MountRequstWriteFileBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountRequstWriteFileBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountRequstWriteFileBlock_descriptor_;
}

const MountRequstWriteFileBlock& MountRequstWriteFileBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountRequstWriteFileBlock* MountRequstWriteFileBlock::default_instance_ = NULL;

MountRequstWriteFileBlock* MountRequstWriteFileBlock::New() const {
  return new MountRequstWriteFileBlock;
}

void MountRequstWriteFileBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    block_size_byte_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountRequstWriteFileBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_block_size_byte;
        break;
      }
      
      // required int64 block_size_byte = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_size_byte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_size_byte_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountRequstWriteFileBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required int64 block_size_byte = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->block_size_byte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountRequstWriteFileBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required int64 block_size_byte = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->block_size_byte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountRequstWriteFileBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required int64 block_size_byte = 2;
    if (has_block_size_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->block_size_byte());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountRequstWriteFileBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountRequstWriteFileBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountRequstWriteFileBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountRequstWriteFileBlock::MergeFrom(const MountRequstWriteFileBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_block_size_byte(from.block_size_byte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountRequstWriteFileBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountRequstWriteFileBlock::CopyFrom(const MountRequstWriteFileBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountRequstWriteFileBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void MountRequstWriteFileBlock::Swap(MountRequstWriteFileBlock* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(block_size_byte_, other->block_size_byte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountRequstWriteFileBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountRequstWriteFileBlock_descriptor_;
  metadata.reflection = MountRequstWriteFileBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountRequstWriteFileBlockAck::kResultFieldNumber;
const int MountRequstWriteFileBlockAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

MountRequstWriteFileBlockAck::MountRequstWriteFileBlockAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountRequstWriteFileBlockAck::InitAsDefaultInstance() {
}

MountRequstWriteFileBlockAck::MountRequstWriteFileBlockAck(const MountRequstWriteFileBlockAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountRequstWriteFileBlockAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountRequstWriteFileBlockAck::~MountRequstWriteFileBlockAck() {
  SharedDtor();
}

void MountRequstWriteFileBlockAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountRequstWriteFileBlockAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountRequstWriteFileBlockAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountRequstWriteFileBlockAck_descriptor_;
}

const MountRequstWriteFileBlockAck& MountRequstWriteFileBlockAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountRequstWriteFileBlockAck* MountRequstWriteFileBlockAck::default_instance_ = NULL;

MountRequstWriteFileBlockAck* MountRequstWriteFileBlockAck::New() const {
  return new MountRequstWriteFileBlockAck;
}

void MountRequstWriteFileBlockAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountRequstWriteFileBlockAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountRequstWriteFileBlockAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountRequstWriteFileBlockAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountRequstWriteFileBlockAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 2;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountRequstWriteFileBlockAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountRequstWriteFileBlockAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountRequstWriteFileBlockAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountRequstWriteFileBlockAck::MergeFrom(const MountRequstWriteFileBlockAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountRequstWriteFileBlockAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountRequstWriteFileBlockAck::CopyFrom(const MountRequstWriteFileBlockAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountRequstWriteFileBlockAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MountRequstWriteFileBlockAck::Swap(MountRequstWriteFileBlockAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountRequstWriteFileBlockAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountRequstWriteFileBlockAck_descriptor_;
  metadata.reflection = MountRequstWriteFileBlockAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountWriteFileBlockAck::kResultFieldNumber;
const int MountWriteFileBlockAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

MountWriteFileBlockAck::MountWriteFileBlockAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountWriteFileBlockAck::InitAsDefaultInstance() {
}

MountWriteFileBlockAck::MountWriteFileBlockAck(const MountWriteFileBlockAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountWriteFileBlockAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountWriteFileBlockAck::~MountWriteFileBlockAck() {
  SharedDtor();
}

void MountWriteFileBlockAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountWriteFileBlockAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountWriteFileBlockAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountWriteFileBlockAck_descriptor_;
}

const MountWriteFileBlockAck& MountWriteFileBlockAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountWriteFileBlockAck* MountWriteFileBlockAck::default_instance_ = NULL;

MountWriteFileBlockAck* MountWriteFileBlockAck::New() const {
  return new MountWriteFileBlockAck;
}

void MountWriteFileBlockAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountWriteFileBlockAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountWriteFileBlockAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountWriteFileBlockAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountWriteFileBlockAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 2;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountWriteFileBlockAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountWriteFileBlockAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountWriteFileBlockAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountWriteFileBlockAck::MergeFrom(const MountWriteFileBlockAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountWriteFileBlockAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountWriteFileBlockAck::CopyFrom(const MountWriteFileBlockAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountWriteFileBlockAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MountWriteFileBlockAck::Swap(MountWriteFileBlockAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountWriteFileBlockAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountWriteFileBlockAck_descriptor_;
  metadata.reflection = MountWriteFileBlockAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MountFileBlock::_default_task_uuid_;
const ::std::string MountFileBlock::_default_block_;
#ifndef _MSC_VER
const int MountFileBlock::kTaskUuidFieldNumber;
const int MountFileBlock::kBlockFieldNumber;
#endif  // !_MSC_VER

MountFileBlock::MountFileBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountFileBlock::InitAsDefaultInstance() {
}

MountFileBlock::MountFileBlock(const MountFileBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountFileBlock::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  block_ = const_cast< ::std::string*>(&_default_block_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountFileBlock::~MountFileBlock() {
  SharedDtor();
}

void MountFileBlock::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (block_ != &_default_block_) {
    delete block_;
  }
  if (this != default_instance_) {
  }
}

void MountFileBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountFileBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountFileBlock_descriptor_;
}

const MountFileBlock& MountFileBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountFileBlock* MountFileBlock::default_instance_ = NULL;

MountFileBlock* MountFileBlock::New() const {
  return new MountFileBlock;
}

void MountFileBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (block_ != &_default_block_) {
        block_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountFileBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block;
        break;
      }
      
      // required bytes block = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountFileBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bytes block = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->block(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountFileBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bytes block = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->block(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountFileBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bytes block = 2;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->block());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountFileBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountFileBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountFileBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountFileBlock::MergeFrom(const MountFileBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_block(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountFileBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountFileBlock::CopyFrom(const MountFileBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountFileBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MountFileBlock::Swap(MountFileBlock* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(block_, other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountFileBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountFileBlock_descriptor_;
  metadata.reflection = MountFileBlock_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MountCloseFile::_default_task_uuid_;
const ::std::string MountCloseFile::_default_the_download_file_;
#ifndef _MSC_VER
const int MountCloseFile::kTaskUuidFieldNumber;
const int MountCloseFile::kTheDownloadFileFieldNumber;
#endif  // !_MSC_VER

MountCloseFile::MountCloseFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountCloseFile::InitAsDefaultInstance() {
}

MountCloseFile::MountCloseFile(const MountCloseFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountCloseFile::SharedCtor() {
  _cached_size_ = 0;
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  the_download_file_ = const_cast< ::std::string*>(&_default_the_download_file_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountCloseFile::~MountCloseFile() {
  SharedDtor();
}

void MountCloseFile::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (the_download_file_ != &_default_the_download_file_) {
    delete the_download_file_;
  }
  if (this != default_instance_) {
  }
}

void MountCloseFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountCloseFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountCloseFile_descriptor_;
}

const MountCloseFile& MountCloseFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountCloseFile* MountCloseFile::default_instance_ = NULL;

MountCloseFile* MountCloseFile::New() const {
  return new MountCloseFile;
}

void MountCloseFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
    if (_has_bit(1)) {
      if (the_download_file_ != &_default_the_download_file_) {
        the_download_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountCloseFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes task_uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_the_download_file;
        break;
      }
      
      // required bytes the_download_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_the_download_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_the_download_file()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountCloseFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes task_uuid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->task_uuid(), output);
  }
  
  // required bytes the_download_file = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->the_download_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountCloseFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes task_uuid = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_uuid(), target);
  }
  
  // required bytes the_download_file = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->the_download_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountCloseFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes task_uuid = 1;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
    // required bytes the_download_file = 2;
    if (has_the_download_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->the_download_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountCloseFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountCloseFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountCloseFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountCloseFile::MergeFrom(const MountCloseFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_task_uuid(from.task_uuid());
    }
    if (from._has_bit(1)) {
      set_the_download_file(from.the_download_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountCloseFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountCloseFile::CopyFrom(const MountCloseFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountCloseFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void MountCloseFile::Swap(MountCloseFile* other) {
  if (other != this) {
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(the_download_file_, other->the_download_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountCloseFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountCloseFile_descriptor_;
  metadata.reflection = MountCloseFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountCloseFileAck::kResultFieldNumber;
const int MountCloseFileAck::kErrorNumberFieldNumber;
#endif  // !_MSC_VER

MountCloseFileAck::MountCloseFileAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountCloseFileAck::InitAsDefaultInstance() {
}

MountCloseFileAck::MountCloseFileAck(const MountCloseFileAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountCloseFileAck::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountCloseFileAck::~MountCloseFileAck() {
  SharedDtor();
}

void MountCloseFileAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountCloseFileAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountCloseFileAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountCloseFileAck_descriptor_;
}

const MountCloseFileAck& MountCloseFileAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountCloseFileAck* MountCloseFileAck::default_instance_ = NULL;

MountCloseFileAck* MountCloseFileAck::New() const {
  return new MountCloseFileAck;
}

void MountCloseFileAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountCloseFileAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number;
        break;
      }
      
      // optional int64 error_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountCloseFileAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountCloseFileAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountCloseFileAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number = 2;
    if (has_error_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountCloseFileAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountCloseFileAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountCloseFileAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountCloseFileAck::MergeFrom(const MountCloseFileAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number(from.error_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountCloseFileAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountCloseFileAck::CopyFrom(const MountCloseFileAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountCloseFileAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MountCloseFileAck::Swap(MountCloseFileAck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_, other->error_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountCloseFileAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountCloseFileAck_descriptor_;
  metadata.reflection = MountCloseFileAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MountDownloadSingleFileFinish::_default_task_uuid_;
#ifndef _MSC_VER
const int MountDownloadSingleFileFinish::kResultFieldNumber;
const int MountDownloadSingleFileFinish::kErrorNumberMsgFieldNumber;
const int MountDownloadSingleFileFinish::kErrorNumberClientFieldNumber;
const int MountDownloadSingleFileFinish::kTaskUuidFieldNumber;
#endif  // !_MSC_VER

MountDownloadSingleFileFinish::MountDownloadSingleFileFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountDownloadSingleFileFinish::InitAsDefaultInstance() {
}

MountDownloadSingleFileFinish::MountDownloadSingleFileFinish(const MountDownloadSingleFileFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountDownloadSingleFileFinish::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  error_number_msg_ = GOOGLE_LONGLONG(0);
  error_number_client_ = GOOGLE_LONGLONG(0);
  task_uuid_ = const_cast< ::std::string*>(&_default_task_uuid_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountDownloadSingleFileFinish::~MountDownloadSingleFileFinish() {
  SharedDtor();
}

void MountDownloadSingleFileFinish::SharedDtor() {
  if (task_uuid_ != &_default_task_uuid_) {
    delete task_uuid_;
  }
  if (this != default_instance_) {
  }
}

void MountDownloadSingleFileFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountDownloadSingleFileFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountDownloadSingleFileFinish_descriptor_;
}

const MountDownloadSingleFileFinish& MountDownloadSingleFileFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountDownloadSingleFileFinish* MountDownloadSingleFileFinish::default_instance_ = NULL;

MountDownloadSingleFileFinish* MountDownloadSingleFileFinish::New() const {
  return new MountDownloadSingleFileFinish;
}

void MountDownloadSingleFileFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    error_number_msg_ = GOOGLE_LONGLONG(0);
    error_number_client_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (task_uuid_ != &_default_task_uuid_) {
        task_uuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountDownloadSingleFileFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_number_msg;
        break;
      }
      
      // optional int64 error_number_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number_msg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_msg_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_number_client;
        break;
      }
      
      // optional int64 error_number_client = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_number_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_number_client_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task_uuid;
        break;
      }
      
      // optional bytes task_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_uuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountDownloadSingleFileFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }
  
  // optional int64 error_number_msg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_number_msg(), output);
  }
  
  // optional int64 error_number_client = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->error_number_client(), output);
  }
  
  // optional bytes task_uuid = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->task_uuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountDownloadSingleFileFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool result = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }
  
  // optional int64 error_number_msg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_number_msg(), target);
  }
  
  // optional int64 error_number_client = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->error_number_client(), target);
  }
  
  // optional bytes task_uuid = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->task_uuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountDownloadSingleFileFinish::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }
    
    // optional int64 error_number_msg = 2;
    if (has_error_number_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number_msg());
    }
    
    // optional int64 error_number_client = 3;
    if (has_error_number_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_number_client());
    }
    
    // optional bytes task_uuid = 4;
    if (has_task_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->task_uuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountDownloadSingleFileFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountDownloadSingleFileFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountDownloadSingleFileFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountDownloadSingleFileFinish::MergeFrom(const MountDownloadSingleFileFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_result(from.result());
    }
    if (from._has_bit(1)) {
      set_error_number_msg(from.error_number_msg());
    }
    if (from._has_bit(2)) {
      set_error_number_client(from.error_number_client());
    }
    if (from._has_bit(3)) {
      set_task_uuid(from.task_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountDownloadSingleFileFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountDownloadSingleFileFinish::CopyFrom(const MountDownloadSingleFileFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountDownloadSingleFileFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MountDownloadSingleFileFinish::Swap(MountDownloadSingleFileFinish* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(error_number_msg_, other->error_number_msg_);
    std::swap(error_number_client_, other->error_number_client_);
    std::swap(task_uuid_, other->task_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountDownloadSingleFileFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountDownloadSingleFileFinish_descriptor_;
  metadata.reflection = MountDownloadSingleFileFinish_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MountDownloadSingleFileFinishAck::_default_reserver_;
#ifndef _MSC_VER
const int MountDownloadSingleFileFinishAck::kReserverFieldNumber;
#endif  // !_MSC_VER

MountDownloadSingleFileFinishAck::MountDownloadSingleFileFinishAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountDownloadSingleFileFinishAck::InitAsDefaultInstance() {
}

MountDownloadSingleFileFinishAck::MountDownloadSingleFileFinishAck(const MountDownloadSingleFileFinishAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountDownloadSingleFileFinishAck::SharedCtor() {
  _cached_size_ = 0;
  reserver_ = const_cast< ::std::string*>(&_default_reserver_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountDownloadSingleFileFinishAck::~MountDownloadSingleFileFinishAck() {
  SharedDtor();
}

void MountDownloadSingleFileFinishAck::SharedDtor() {
  if (reserver_ != &_default_reserver_) {
    delete reserver_;
  }
  if (this != default_instance_) {
  }
}

void MountDownloadSingleFileFinishAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountDownloadSingleFileFinishAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountDownloadSingleFileFinishAck_descriptor_;
}

const MountDownloadSingleFileFinishAck& MountDownloadSingleFileFinishAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_file_5fmount_5fdownload_5fsingle_5ffile_2eproto();  return *default_instance_;
}

MountDownloadSingleFileFinishAck* MountDownloadSingleFileFinishAck::default_instance_ = NULL;

MountDownloadSingleFileFinishAck* MountDownloadSingleFileFinishAck::New() const {
  return new MountDownloadSingleFileFinishAck;
}

void MountDownloadSingleFileFinishAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (reserver_ != &_default_reserver_) {
        reserver_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountDownloadSingleFileFinishAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes reserver = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reserver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountDownloadSingleFileFinishAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes reserver = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->reserver(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountDownloadSingleFileFinishAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes reserver = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->reserver(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountDownloadSingleFileFinishAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes reserver = 1;
    if (has_reserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reserver());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountDownloadSingleFileFinishAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountDownloadSingleFileFinishAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountDownloadSingleFileFinishAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountDownloadSingleFileFinishAck::MergeFrom(const MountDownloadSingleFileFinishAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_reserver(from.reserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountDownloadSingleFileFinishAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountDownloadSingleFileFinishAck::CopyFrom(const MountDownloadSingleFileFinishAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountDownloadSingleFileFinishAck::IsInitialized() const {
  
  return true;
}

void MountDownloadSingleFileFinishAck::Swap(MountDownloadSingleFileFinishAck* other) {
  if (other != this) {
    std::swap(reserver_, other->reserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountDownloadSingleFileFinishAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountDownloadSingleFileFinishAck_descriptor_;
  metadata.reflection = MountDownloadSingleFileFinishAck_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace file_mount_download_single_file

// @@protoc_insertion_point(global_scope)
