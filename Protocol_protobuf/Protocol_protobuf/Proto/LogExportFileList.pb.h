// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LogExportFileList.proto

#ifndef PROTOBUF_LogExportFileList_2eproto__INCLUDED
#define PROTOBUF_LogExportFileList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace LogExportFileList {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LogExportFileList_2eproto();
void protobuf_AssignDesc_LogExportFileList_2eproto();
void protobuf_ShutdownFile_LogExportFileList_2eproto();

class FileListAck;
class FileInfo;

// ===================================================================

class FileListAck : public ::google::protobuf::Message {
 public:
  FileListAck();
  virtual ~FileListAck();
  
  FileListAck(const FileListAck& from);
  
  inline FileListAck& operator=(const FileListAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileListAck& default_instance();
  
  void Swap(FileListAck* other);
  
  // implements Message ----------------------------------------------
  
  FileListAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileListAck& from);
  void MergeFrom(const FileListAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes task_uuid = 1;
  inline bool has_task_uuid() const;
  inline void clear_task_uuid();
  static const int kTaskUuidFieldNumber = 1;
  inline const ::std::string& task_uuid() const;
  inline void set_task_uuid(const ::std::string& value);
  inline void set_task_uuid(const char* value);
  inline void set_task_uuid(const void* value, size_t size);
  inline ::std::string* mutable_task_uuid();
  
  // required bool result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline bool result() const;
  inline void set_result(bool value);
  
  // optional int64 error_number_msg = 3;
  inline bool has_error_number_msg() const;
  inline void clear_error_number_msg();
  static const int kErrorNumberMsgFieldNumber = 3;
  inline ::google::protobuf::int64 error_number_msg() const;
  inline void set_error_number_msg(::google::protobuf::int64 value);
  
  // optional int64 error_number_node = 4;
  inline bool has_error_number_node() const;
  inline void clear_error_number_node();
  static const int kErrorNumberNodeFieldNumber = 4;
  inline ::google::protobuf::int64 error_number_node() const;
  inline void set_error_number_node(::google::protobuf::int64 value);
  
  // repeated .LogExportFileList.FileInfo files = 5;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 5;
  inline const ::LogExportFileList::FileInfo& files(int index) const;
  inline ::LogExportFileList::FileInfo* mutable_files(int index);
  inline ::LogExportFileList::FileInfo* add_files();
  inline const ::google::protobuf::RepeatedPtrField< ::LogExportFileList::FileInfo >&
      files() const;
  inline ::google::protobuf::RepeatedPtrField< ::LogExportFileList::FileInfo >*
      mutable_files();
  
  // @@protoc_insertion_point(class_scope:LogExportFileList.FileListAck)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* task_uuid_;
  static const ::std::string _default_task_uuid_;
  bool result_;
  ::google::protobuf::int64 error_number_msg_;
  ::google::protobuf::int64 error_number_node_;
  ::google::protobuf::RepeatedPtrField< ::LogExportFileList::FileInfo > files_;
  friend void  protobuf_AddDesc_LogExportFileList_2eproto();
  friend void protobuf_AssignDesc_LogExportFileList_2eproto();
  friend void protobuf_ShutdownFile_LogExportFileList_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FileListAck* default_instance_;
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::Message {
 public:
  FileInfo();
  virtual ~FileInfo();
  
  FileInfo(const FileInfo& from);
  
  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfo& default_instance();
  
  void Swap(FileInfo* other);
  
  // implements Message ----------------------------------------------
  
  FileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 filetype = 1;
  inline bool has_filetype() const;
  inline void clear_filetype();
  static const int kFiletypeFieldNumber = 1;
  inline ::google::protobuf::int32 filetype() const;
  inline void set_filetype(::google::protobuf::int32 value);
  
  // required int64 fileindex = 2;
  inline bool has_fileindex() const;
  inline void clear_fileindex();
  static const int kFileindexFieldNumber = 2;
  inline ::google::protobuf::int64 fileindex() const;
  inline void set_fileindex(::google::protobuf::int64 value);
  
  // required bytes filename = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const void* value, size_t size);
  inline ::std::string* mutable_filename();
  
  // required int64 filesize_byte = 4;
  inline bool has_filesize_byte() const;
  inline void clear_filesize_byte();
  static const int kFilesizeByteFieldNumber = 4;
  inline ::google::protobuf::int64 filesize_byte() const;
  inline void set_filesize_byte(::google::protobuf::int64 value);
  
  // required bytes lastupdatetime = 5;
  inline bool has_lastupdatetime() const;
  inline void clear_lastupdatetime();
  static const int kLastupdatetimeFieldNumber = 5;
  inline const ::std::string& lastupdatetime() const;
  inline void set_lastupdatetime(const ::std::string& value);
  inline void set_lastupdatetime(const char* value);
  inline void set_lastupdatetime(const void* value, size_t size);
  inline ::std::string* mutable_lastupdatetime();
  
  // @@protoc_insertion_point(class_scope:LogExportFileList.FileInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 filetype_;
  ::google::protobuf::int64 fileindex_;
  ::std::string* filename_;
  static const ::std::string _default_filename_;
  ::google::protobuf::int64 filesize_byte_;
  ::std::string* lastupdatetime_;
  static const ::std::string _default_lastupdatetime_;
  friend void  protobuf_AddDesc_LogExportFileList_2eproto();
  friend void protobuf_AssignDesc_LogExportFileList_2eproto();
  friend void protobuf_ShutdownFile_LogExportFileList_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FileInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// FileListAck

// required bytes task_uuid = 1;
inline bool FileListAck::has_task_uuid() const {
  return _has_bit(0);
}
inline void FileListAck::clear_task_uuid() {
  if (task_uuid_ != &_default_task_uuid_) {
    task_uuid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FileListAck::task_uuid() const {
  return *task_uuid_;
}
inline void FileListAck::set_task_uuid(const ::std::string& value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void FileListAck::set_task_uuid(const char* value) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(value);
}
inline void FileListAck::set_task_uuid(const void* value, size_t size) {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  task_uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileListAck::mutable_task_uuid() {
  _set_bit(0);
  if (task_uuid_ == &_default_task_uuid_) {
    task_uuid_ = new ::std::string;
  }
  return task_uuid_;
}

// required bool result = 2;
inline bool FileListAck::has_result() const {
  return _has_bit(1);
}
inline void FileListAck::clear_result() {
  result_ = false;
  _clear_bit(1);
}
inline bool FileListAck::result() const {
  return result_;
}
inline void FileListAck::set_result(bool value) {
  _set_bit(1);
  result_ = value;
}

// optional int64 error_number_msg = 3;
inline bool FileListAck::has_error_number_msg() const {
  return _has_bit(2);
}
inline void FileListAck::clear_error_number_msg() {
  error_number_msg_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 FileListAck::error_number_msg() const {
  return error_number_msg_;
}
inline void FileListAck::set_error_number_msg(::google::protobuf::int64 value) {
  _set_bit(2);
  error_number_msg_ = value;
}

// optional int64 error_number_node = 4;
inline bool FileListAck::has_error_number_node() const {
  return _has_bit(3);
}
inline void FileListAck::clear_error_number_node() {
  error_number_node_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 FileListAck::error_number_node() const {
  return error_number_node_;
}
inline void FileListAck::set_error_number_node(::google::protobuf::int64 value) {
  _set_bit(3);
  error_number_node_ = value;
}

// repeated .LogExportFileList.FileInfo files = 5;
inline int FileListAck::files_size() const {
  return files_.size();
}
inline void FileListAck::clear_files() {
  files_.Clear();
}
inline const ::LogExportFileList::FileInfo& FileListAck::files(int index) const {
  return files_.Get(index);
}
inline ::LogExportFileList::FileInfo* FileListAck::mutable_files(int index) {
  return files_.Mutable(index);
}
inline ::LogExportFileList::FileInfo* FileListAck::add_files() {
  return files_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LogExportFileList::FileInfo >&
FileListAck::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::LogExportFileList::FileInfo >*
FileListAck::mutable_files() {
  return &files_;
}

// -------------------------------------------------------------------

// FileInfo

// required int32 filetype = 1;
inline bool FileInfo::has_filetype() const {
  return _has_bit(0);
}
inline void FileInfo::clear_filetype() {
  filetype_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 FileInfo::filetype() const {
  return filetype_;
}
inline void FileInfo::set_filetype(::google::protobuf::int32 value) {
  _set_bit(0);
  filetype_ = value;
}

// required int64 fileindex = 2;
inline bool FileInfo::has_fileindex() const {
  return _has_bit(1);
}
inline void FileInfo::clear_fileindex() {
  fileindex_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 FileInfo::fileindex() const {
  return fileindex_;
}
inline void FileInfo::set_fileindex(::google::protobuf::int64 value) {
  _set_bit(1);
  fileindex_ = value;
}

// required bytes filename = 3;
inline bool FileInfo::has_filename() const {
  return _has_bit(2);
}
inline void FileInfo::clear_filename() {
  if (filename_ != &_default_filename_) {
    filename_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& FileInfo::filename() const {
  return *filename_;
}
inline void FileInfo::set_filename(const ::std::string& value) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileInfo::set_filename(const char* value) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void FileInfo::set_filename(const void* value, size_t size) {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileInfo::mutable_filename() {
  _set_bit(2);
  if (filename_ == &_default_filename_) {
    filename_ = new ::std::string;
  }
  return filename_;
}

// required int64 filesize_byte = 4;
inline bool FileInfo::has_filesize_byte() const {
  return _has_bit(3);
}
inline void FileInfo::clear_filesize_byte() {
  filesize_byte_ = GOOGLE_LONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::int64 FileInfo::filesize_byte() const {
  return filesize_byte_;
}
inline void FileInfo::set_filesize_byte(::google::protobuf::int64 value) {
  _set_bit(3);
  filesize_byte_ = value;
}

// required bytes lastupdatetime = 5;
inline bool FileInfo::has_lastupdatetime() const {
  return _has_bit(4);
}
inline void FileInfo::clear_lastupdatetime() {
  if (lastupdatetime_ != &_default_lastupdatetime_) {
    lastupdatetime_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& FileInfo::lastupdatetime() const {
  return *lastupdatetime_;
}
inline void FileInfo::set_lastupdatetime(const ::std::string& value) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
}
inline void FileInfo::set_lastupdatetime(const char* value) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(value);
}
inline void FileInfo::set_lastupdatetime(const void* value, size_t size) {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  lastupdatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileInfo::mutable_lastupdatetime() {
  _set_bit(4);
  if (lastupdatetime_ == &_default_lastupdatetime_) {
    lastupdatetime_ = new ::std::string;
  }
  return lastupdatetime_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LogExportFileList

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LogExportFileList_2eproto__INCLUDED
